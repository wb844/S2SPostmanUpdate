{
	"info": {
		"_postman_id": "c44392e1-5702-4b77-89e1-40ee7c1f816f",
		"name": "S2S Zoom Api",
		"description": "The Zoom API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials).\nAll endpoints are available via `https` and are located at `api.zoom.us/v2/`.\n\nFor instance you can list all users on an account via `https://api.zoom.us/v2/users/`.\n\nContact Support:\n Name: Zoom Developers",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18473493"
	},
	"item": [
		{
			"name": "sip phones",
			"item": [
				{
					"name": "{phone Id}",
					"item": [
						{
							"name": "Update SIP phone",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "domain",
											"value": "minim et non",
											"description": "(Required) The name or IP address of your provider’s SIP domain. (example: CDC.WEB).",
											"type": "text"
										},
										{
											"key": "register_server",
											"value": "adipisicing occaecat in officia",
											"description": "(Required) IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
											"type": "text"
										},
										{
											"key": "proxy_server",
											"value": "ut in velit",
											"description": "(Required) IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.",
											"type": "text"
										},
										{
											"key": "register_server2",
											"value": "magna fugiat veli",
											"description": "(Required) IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
											"type": "text"
										},
										{
											"key": "proxy_server2",
											"value": "elit commodo",
											"description": "(Required) IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.",
											"type": "text"
										},
										{
											"key": "register_server3",
											"value": "in",
											"description": "(Required) IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
											"type": "text"
										},
										{
											"key": "proxy_server3",
											"value": "incididunt e",
											"description": "(Required) IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.",
											"type": "text"
										},
										{
											"key": "user_name",
											"value": "ut Ut in",
											"description": "(Required) The phone number associated with the user in the SIP account.",
											"type": "text"
										},
										{
											"key": "password",
											"value": "irure ipsum mollit labore Lorem",
											"description": "(Required) The password generated for the user in the SIP account.",
											"type": "text"
										},
										{
											"key": "authorization_name",
											"value": "Lorem minim veniam ",
											"description": "(Required) Authorization name of the user  registered for SIP Phone.",
											"type": "text"
										},
										{
											"key": "voice_mail",
											"value": "laboris nostrud adipisicing anim",
											"description": "(Required) The number to dial for checking voicemail.",
											"type": "text"
										},
										{
											"key": "transport_protocol",
											"value": "TLS",
											"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
											"type": "text"
										},
										{
											"key": "transport_protocol2",
											"value": "UDP",
											"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
											"type": "text"
										},
										{
											"key": "transport_protocol3",
											"value": "TLS",
											"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
											"type": "text"
										},
										{
											"key": "registration_expire_time",
											"value": "60",
											"description": "The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/sip_phones/:phoneId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sip_phones",
										":phoneId"
									],
									"variable": [
										{
											"key": "phoneId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Unique Identifier of the SIP Phone. This can be retrieved from the List SIP Phones API."
										}
									]
								},
								"description": "Zoom’s Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to update information of a specific SIP Phone on a Zoom account.<br><br>\n**Prerequisites**:\n* Currently only supported on Cisco and Avaya PBX systems. \n* The account owner or account admin must first enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.<br> **Scope:** `sip_phone:write:admin`\n<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**Error Code:** `200`<br>\nPermission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.\n",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "domain",
													"value": "minim et non",
													"description": "(Required) The name or IP address of your provider’s SIP domain. (example: CDC.WEB).",
													"type": "text"
												},
												{
													"key": "register_server",
													"value": "adipisicing occaecat in officia",
													"description": "(Required) IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
													"type": "text"
												},
												{
													"key": "proxy_server",
													"value": "ut in velit",
													"description": "(Required) IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.",
													"type": "text"
												},
												{
													"key": "register_server2",
													"value": "magna fugiat veli",
													"description": "(Required) IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
													"type": "text"
												},
												{
													"key": "proxy_server2",
													"value": "elit commodo",
													"description": "(Required) IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.",
													"type": "text"
												},
												{
													"key": "register_server3",
													"value": "in",
													"description": "(Required) IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
													"type": "text"
												},
												{
													"key": "proxy_server3",
													"value": "incididunt e",
													"description": "(Required) IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.",
													"type": "text"
												},
												{
													"key": "user_name",
													"value": "ut Ut in",
													"description": "(Required) The phone number associated with the user in the SIP account.",
													"type": "text"
												},
												{
													"key": "password",
													"value": "irure ipsum mollit labore Lorem",
													"description": "(Required) The password generated for the user in the SIP account.",
													"type": "text"
												},
												{
													"key": "authorization_name",
													"value": "Lorem minim veniam ",
													"description": "(Required) Authorization name of the user  registered for SIP Phone.",
													"type": "text"
												},
												{
													"key": "voice_mail",
													"value": "laboris nostrud adipisicing anim",
													"description": "(Required) The number to dial for checking voicemail.",
													"type": "text"
												},
												{
													"key": "transport_protocol",
													"value": "TLS",
													"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
													"type": "text"
												},
												{
													"key": "transport_protocol2",
													"value": "UDP",
													"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
													"type": "text"
												},
												{
													"key": "transport_protocol3",
													"value": "TLS",
													"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
													"type": "text"
												},
												{
													"key": "registration_expire_time",
													"value": "60",
													"description": "The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/sip_phones/:phoneId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sip_phones",
												":phoneId"
											],
											"variable": [
												{
													"key": "phoneId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of the SIP Phone. This can be retrieved from the List SIP Phones API."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `204`<br>\nSIP Phone information updated successfully.\n",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "domain",
													"value": "minim et non",
													"description": "(Required) The name or IP address of your provider’s SIP domain. (example: CDC.WEB).",
													"type": "text"
												},
												{
													"key": "register_server",
													"value": "adipisicing occaecat in officia",
													"description": "(Required) IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
													"type": "text"
												},
												{
													"key": "proxy_server",
													"value": "ut in velit",
													"description": "(Required) IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.",
													"type": "text"
												},
												{
													"key": "register_server2",
													"value": "magna fugiat veli",
													"description": "(Required) IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
													"type": "text"
												},
												{
													"key": "proxy_server2",
													"value": "elit commodo",
													"description": "(Required) IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.",
													"type": "text"
												},
												{
													"key": "register_server3",
													"value": "in",
													"description": "(Required) IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
													"type": "text"
												},
												{
													"key": "proxy_server3",
													"value": "incididunt e",
													"description": "(Required) IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.",
													"type": "text"
												},
												{
													"key": "user_name",
													"value": "ut Ut in",
													"description": "(Required) The phone number associated with the user in the SIP account.",
													"type": "text"
												},
												{
													"key": "password",
													"value": "irure ipsum mollit labore Lorem",
													"description": "(Required) The password generated for the user in the SIP account.",
													"type": "text"
												},
												{
													"key": "authorization_name",
													"value": "Lorem minim veniam ",
													"description": "(Required) Authorization name of the user  registered for SIP Phone.",
													"type": "text"
												},
												{
													"key": "voice_mail",
													"value": "laboris nostrud adipisicing anim",
													"description": "(Required) The number to dial for checking voicemail.",
													"type": "text"
												},
												{
													"key": "transport_protocol",
													"value": "TLS",
													"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
													"type": "text"
												},
												{
													"key": "transport_protocol2",
													"value": "UDP",
													"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
													"type": "text"
												},
												{
													"key": "transport_protocol3",
													"value": "TLS",
													"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
													"type": "text"
												},
												{
													"key": "registration_expire_time",
													"value": "60",
													"description": "The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/sip_phones/:phoneId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sip_phones",
												":phoneId"
											],
											"variable": [
												{
													"key": "phoneId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of the SIP Phone. This can be retrieved from the List SIP Phones API."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "**Error Code:** `300`<br>\n SIP phone not found: phoneId.<br>\n The SIP phone with this phoneId was not found on this account.\n",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "domain",
													"value": "minim et non",
													"description": "(Required) The name or IP address of your provider’s SIP domain. (example: CDC.WEB).",
													"type": "text"
												},
												{
													"key": "register_server",
													"value": "adipisicing occaecat in officia",
													"description": "(Required) IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
													"type": "text"
												},
												{
													"key": "proxy_server",
													"value": "ut in velit",
													"description": "(Required) IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.",
													"type": "text"
												},
												{
													"key": "register_server2",
													"value": "magna fugiat veli",
													"description": "(Required) IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
													"type": "text"
												},
												{
													"key": "proxy_server2",
													"value": "elit commodo",
													"description": "(Required) IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.",
													"type": "text"
												},
												{
													"key": "register_server3",
													"value": "in",
													"description": "(Required) IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
													"type": "text"
												},
												{
													"key": "proxy_server3",
													"value": "incididunt e",
													"description": "(Required) IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.",
													"type": "text"
												},
												{
													"key": "user_name",
													"value": "ut Ut in",
													"description": "(Required) The phone number associated with the user in the SIP account.",
													"type": "text"
												},
												{
													"key": "password",
													"value": "irure ipsum mollit labore Lorem",
													"description": "(Required) The password generated for the user in the SIP account.",
													"type": "text"
												},
												{
													"key": "authorization_name",
													"value": "Lorem minim veniam ",
													"description": "(Required) Authorization name of the user  registered for SIP Phone.",
													"type": "text"
												},
												{
													"key": "voice_mail",
													"value": "laboris nostrud adipisicing anim",
													"description": "(Required) The number to dial for checking voicemail.",
													"type": "text"
												},
												{
													"key": "transport_protocol",
													"value": "TLS",
													"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
													"type": "text"
												},
												{
													"key": "transport_protocol2",
													"value": "UDP",
													"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
													"type": "text"
												},
												{
													"key": "transport_protocol3",
													"value": "TLS",
													"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
													"type": "text"
												},
												{
													"key": "registration_expire_time",
													"value": "60",
													"description": "The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/sip_phones/:phoneId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sip_phones",
												":phoneId"
											],
											"variable": [
												{
													"key": "phoneId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of the SIP Phone. This can be retrieved from the List SIP Phones API."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request.\n\n",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "domain",
													"value": "minim et non",
													"description": "(Required) The name or IP address of your provider’s SIP domain. (example: CDC.WEB).",
													"type": "text"
												},
												{
													"key": "register_server",
													"value": "adipisicing occaecat in officia",
													"description": "(Required) IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
													"type": "text"
												},
												{
													"key": "proxy_server",
													"value": "ut in velit",
													"description": "(Required) IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.",
													"type": "text"
												},
												{
													"key": "register_server2",
													"value": "magna fugiat veli",
													"description": "(Required) IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
													"type": "text"
												},
												{
													"key": "proxy_server2",
													"value": "elit commodo",
													"description": "(Required) IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.",
													"type": "text"
												},
												{
													"key": "register_server3",
													"value": "in",
													"description": "(Required) IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
													"type": "text"
												},
												{
													"key": "proxy_server3",
													"value": "incididunt e",
													"description": "(Required) IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.",
													"type": "text"
												},
												{
													"key": "user_name",
													"value": "ut Ut in",
													"description": "(Required) The phone number associated with the user in the SIP account.",
													"type": "text"
												},
												{
													"key": "password",
													"value": "irure ipsum mollit labore Lorem",
													"description": "(Required) The password generated for the user in the SIP account.",
													"type": "text"
												},
												{
													"key": "authorization_name",
													"value": "Lorem minim veniam ",
													"description": "(Required) Authorization name of the user  registered for SIP Phone.",
													"type": "text"
												},
												{
													"key": "voice_mail",
													"value": "laboris nostrud adipisicing anim",
													"description": "(Required) The number to dial for checking voicemail.",
													"type": "text"
												},
												{
													"key": "transport_protocol",
													"value": "TLS",
													"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
													"type": "text"
												},
												{
													"key": "transport_protocol2",
													"value": "UDP",
													"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
													"type": "text"
												},
												{
													"key": "transport_protocol3",
													"value": "TLS",
													"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
													"type": "text"
												},
												{
													"key": "registration_expire_time",
													"value": "60",
													"description": "The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/sip_phones/:phoneId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sip_phones",
												":phoneId"
											],
											"variable": [
												{
													"key": "phoneId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of the SIP Phone. This can be retrieved from the List SIP Phones API."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete SIP phone",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/sip_phones/:phoneId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sip_phones",
										":phoneId"
									],
									"variable": [
										{
											"key": "phoneId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Unique Identifier of the SIP Phone. It can be retrieved from the List SIP Phones API."
										}
									]
								},
								"description": "Use this API to delete a Zoom account's SIP phone. \n\n **Scopes:** `sip_phone:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n**Prerequisites**: \n* Currently only supported on Cisco and Avaya PBX systems. \n* The user must enable **SIP Phone Integration** by contacting the [Zoom Sales](https://zoom.us/contactsales) team."
							},
							"response": [
								{
									"name": "**Error Code:** `200`<br>Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sip_phones/:phoneId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sip_phones",
												":phoneId"
											],
											"variable": [
												{
													"key": "phoneId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of the SIP Phone. It can be retrieved from the List SIP Phones API."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `204`<br>\nSIP Phone deleted.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sip_phones/:phoneId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sip_phones",
												":phoneId"
											],
											"variable": [
												{
													"key": "phoneId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of the SIP Phone. It can be retrieved from the List SIP Phones API."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "**Error Code:** `300`The SIP phone with this phoneId was not found on this account.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sip_phones/:phoneId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sip_phones",
												":phoneId"
											],
											"variable": [
												{
													"key": "phoneId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of the SIP Phone. It can be retrieved from the List SIP Phones API."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "List SIP phones",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/sip_phones?page_number=1&search_key=culpa velit reprehenderit&page_size=-14804147&next_page_token=culpa velit reprehenderit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sip_phones"
							],
							"query": [
								{
									"key": "page_number",
									"value": "1",
									"description": "\n**Deprecated** - This field has been deprecated and we will stop supporting it completely in a future release. Please use \"next_page_token\" for pagination instead of this field.\n\nThe page number of the current page in the returned records."
								},
								{
									"key": "search_key",
									"value": "culpa velit reprehenderit",
									"description": "User name or email address of a user. If this parameter is provided, only the SIP phone system integration enabled for that specific user will be returned. Otherwise, all SIP phones on an account will be returned."
								},
								{
									"key": "page_size",
									"value": "-14804147",
									"description": "The number of records returned within a single API call."
								},
								{
									"key": "next_page_token",
									"value": "culpa velit reprehenderit",
									"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
								}
							]
						},
						"description": "Zoom’s Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to list SIP phones on an account.<br><br>\n**Prerequisites**:\n* Currently only supported on Cisco and Avaya PBX systems. \n* User must enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.<br> **Scope:** `sip_phone:read:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nSIP Phones listed successfully.\n\n**Error Code:** `200`<br>\nPermission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sip_phones?page_number=1&search_key=culpa velit reprehenderit&page_size=-14804147&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sip_phones"
									],
									"query": [
										{
											"key": "page_number",
											"value": "1"
										},
										{
											"key": "search_key",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "page_size",
											"value": "-14804147"
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"page_count\": 1,\n \"page_number\": 1,\n \"page_size\": 1,\n \"total_records\": 1,\n \"phones\": [\n  {\n   \"id\": \"123456\",\n   \"user_email\": \"example@example.com\",\n   \"domain\": \"example.com\",\n   \"register_server\": \"192.0.2.1\",\n   \"transport_protocol\": \"UDP\",\n   \"proxy_server\": \"192.0.2.2\",\n   \"register_server2\": \"192.0.2.3\",\n   \"transport_protocol2\": \"UDP\",\n   \"proxy_server2\": \"192.0.2.4\",\n   \"register_server3\": \"192.0.2.5\",\n   \"transport_protocol3\": \"UDP\",\n   \"proxy_server3\": \"192.0.2.6\",\n   \"registration_expire_time\": 60,\n   \"user_name\": \"1008\",\n   \"password\": \"apassword1\",\n   \"authorization_name\": \"testname\",\n   \"voice_mail\": \"4000\"\n  }\n ]\n}"
						},
						{
							"name": "**HTTP Status Code:** `400`<br> Bad Request\n\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sip_phones?page_number=1&search_key=culpa velit reprehenderit&page_size=-14804147&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sip_phones"
									],
									"query": [
										{
											"key": "page_number",
											"value": "1"
										},
										{
											"key": "search_key",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "page_size",
											"value": "-14804147"
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Enable SIP phone",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "domain",
									"value": "minim fugiat sit lab",
									"description": "(Required) The name or IP address of your provider’s SIP domain. (example: CDC.WEB).",
									"type": "text"
								},
								{
									"key": "register_server",
									"value": "enim in ad",
									"description": "(Required) IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
									"type": "text"
								},
								{
									"key": "proxy_server",
									"value": "eiusmod culpa nulla sit non",
									"description": "(Required) IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.",
									"type": "text"
								},
								{
									"key": "user_name",
									"value": "est ipsum eiusmod ea",
									"description": "(Required) The phone number associated with the user in the SIP account.",
									"type": "text"
								},
								{
									"key": "password",
									"value": "dolore dolore",
									"description": "(Required) The password generated for the user in the SIP account.",
									"type": "text"
								},
								{
									"key": "authorization_name",
									"value": "commodo mollit sint qui labore",
									"description": "(Required) Authorization name of the user registered for SIP Phone.",
									"type": "text"
								},
								{
									"key": "user_email",
									"value": "X63BFIGYooaz@WN.iv",
									"description": "(Required) The email address of the user to associate with the SIP Phone. Can add `.win`, `.mac`, `.android`, `.ipad`, `.iphone`, `.linux`, `.pc`, `.mobile`, `.pad` at the end of the email (for example, `example@example.com.mac`) to add accounts for different platforms for the same user.",
									"type": "text"
								},
								{
									"key": "voice_mail",
									"value": "ut",
									"description": "(Required) The number to dial for checking voicemail.",
									"type": "text"
								},
								{
									"key": "transport_protocol",
									"value": "AUTO",
									"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
									"type": "text"
								},
								{
									"key": "register_server2",
									"value": "anim in ut id",
									"description": "IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
									"type": "text"
								},
								{
									"key": "transport_protocol2",
									"value": "TCP",
									"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
									"type": "text"
								},
								{
									"key": "proxy_server2",
									"value": "non",
									"description": "IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.",
									"type": "text"
								},
								{
									"key": "register_server3",
									"value": "quis",
									"description": "IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
									"type": "text"
								},
								{
									"key": "transport_protocol3",
									"value": "UDP",
									"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
									"type": "text"
								},
								{
									"key": "proxy_server3",
									"value": "irure",
									"description": "IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.",
									"type": "text"
								},
								{
									"key": "registration_expire_time",
									"value": "60",
									"description": "The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/sip_phones",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sip_phones"
							]
						},
						"description": "Zoom’s Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to enable a user to use SIP phone.<br><br>\n**Prerequisites**:\n* Currently only supported on Cisco and Avaya PBX systems. \n* The account owner or account admin must first enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.<br> **Scope:** `sip_phone:write:admin`\n<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `201`<br>\nSIP Phone Created.\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "domain",
											"value": "minim fugiat sit lab",
											"description": "(Required) The name or IP address of your provider’s SIP domain. (example: CDC.WEB).",
											"type": "text"
										},
										{
											"key": "register_server",
											"value": "enim in ad",
											"description": "(Required) IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
											"type": "text"
										},
										{
											"key": "proxy_server",
											"value": "eiusmod culpa nulla sit non",
											"description": "(Required) IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.",
											"type": "text"
										},
										{
											"key": "user_name",
											"value": "est ipsum eiusmod ea",
											"description": "(Required) The phone number associated with the user in the SIP account.",
											"type": "text"
										},
										{
											"key": "password",
											"value": "dolore dolore",
											"description": "(Required) The password generated for the user in the SIP account.",
											"type": "text"
										},
										{
											"key": "authorization_name",
											"value": "commodo mollit sint qui labore",
											"description": "(Required) Authorization name of the user registered for SIP Phone.",
											"type": "text"
										},
										{
											"key": "user_email",
											"value": "X63BFIGYooaz@WN.iv",
											"description": "(Required) The email address of the user to associate with the SIP Phone. Can add `.win`, `.mac`, `.android`, `.ipad`, `.iphone`, `.linux`, `.pc`, `.mobile`, `.pad` at the end of the email (for example, `example@example.com.mac`) to add accounts for different platforms for the same user.",
											"type": "text"
										},
										{
											"key": "voice_mail",
											"value": "ut",
											"description": "(Required) The number to dial for checking voicemail.",
											"type": "text"
										},
										{
											"key": "transport_protocol",
											"value": "AUTO",
											"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
											"type": "text"
										},
										{
											"key": "register_server2",
											"value": "anim in ut id",
											"description": "IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
											"type": "text"
										},
										{
											"key": "transport_protocol2",
											"value": "TCP",
											"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
											"type": "text"
										},
										{
											"key": "proxy_server2",
											"value": "non",
											"description": "IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.",
											"type": "text"
										},
										{
											"key": "register_server3",
											"value": "quis",
											"description": "IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
											"type": "text"
										},
										{
											"key": "transport_protocol3",
											"value": "UDP",
											"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
											"type": "text"
										},
										{
											"key": "proxy_server3",
											"value": "irure",
											"description": "IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.",
											"type": "text"
										},
										{
											"key": "registration_expire_time",
											"value": "60",
											"description": "The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/sip_phones",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sip_phones"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `400`<br>\nBad request.<br>\n**Error Code:** `200`<br> Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.<br>\n**Error Code:** `300`<br>SIP Phone with the same email already exists.\n\n\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "domain",
											"value": "minim fugiat sit lab",
											"description": "(Required) The name or IP address of your provider’s SIP domain. (example: CDC.WEB).",
											"type": "text"
										},
										{
											"key": "register_server",
											"value": "enim in ad",
											"description": "(Required) IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
											"type": "text"
										},
										{
											"key": "proxy_server",
											"value": "eiusmod culpa nulla sit non",
											"description": "(Required) IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.",
											"type": "text"
										},
										{
											"key": "user_name",
											"value": "est ipsum eiusmod ea",
											"description": "(Required) The phone number associated with the user in the SIP account.",
											"type": "text"
										},
										{
											"key": "password",
											"value": "dolore dolore",
											"description": "(Required) The password generated for the user in the SIP account.",
											"type": "text"
										},
										{
											"key": "authorization_name",
											"value": "commodo mollit sint qui labore",
											"description": "(Required) Authorization name of the user registered for SIP Phone.",
											"type": "text"
										},
										{
											"key": "user_email",
											"value": "X63BFIGYooaz@WN.iv",
											"description": "(Required) The email address of the user to associate with the SIP Phone. Can add `.win`, `.mac`, `.android`, `.ipad`, `.iphone`, `.linux`, `.pc`, `.mobile`, `.pad` at the end of the email (for example, `example@example.com.mac`) to add accounts for different platforms for the same user.",
											"type": "text"
										},
										{
											"key": "voice_mail",
											"value": "ut",
											"description": "(Required) The number to dial for checking voicemail.",
											"type": "text"
										},
										{
											"key": "transport_protocol",
											"value": "AUTO",
											"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
											"type": "text"
										},
										{
											"key": "register_server2",
											"value": "anim in ut id",
											"description": "IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
											"type": "text"
										},
										{
											"key": "transport_protocol2",
											"value": "TCP",
											"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
											"type": "text"
										},
										{
											"key": "proxy_server2",
											"value": "non",
											"description": "IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.",
											"type": "text"
										},
										{
											"key": "register_server3",
											"value": "quis",
											"description": "IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
											"type": "text"
										},
										{
											"key": "transport_protocol3",
											"value": "UDP",
											"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
											"type": "text"
										},
										{
											"key": "proxy_server3",
											"value": "irure",
											"description": "IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.",
											"type": "text"
										},
										{
											"key": "registration_expire_time",
											"value": "60",
											"description": "The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/sip_phones",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sip_phones"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `1001`<br> User {userId} not exist or not belong to this account.\n\n\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "domain",
											"value": "minim fugiat sit lab",
											"description": "(Required) The name or IP address of your provider’s SIP domain. (example: CDC.WEB).",
											"type": "text"
										},
										{
											"key": "register_server",
											"value": "enim in ad",
											"description": "(Required) IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
											"type": "text"
										},
										{
											"key": "proxy_server",
											"value": "eiusmod culpa nulla sit non",
											"description": "(Required) IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.",
											"type": "text"
										},
										{
											"key": "user_name",
											"value": "est ipsum eiusmod ea",
											"description": "(Required) The phone number associated with the user in the SIP account.",
											"type": "text"
										},
										{
											"key": "password",
											"value": "dolore dolore",
											"description": "(Required) The password generated for the user in the SIP account.",
											"type": "text"
										},
										{
											"key": "authorization_name",
											"value": "commodo mollit sint qui labore",
											"description": "(Required) Authorization name of the user registered for SIP Phone.",
											"type": "text"
										},
										{
											"key": "user_email",
											"value": "X63BFIGYooaz@WN.iv",
											"description": "(Required) The email address of the user to associate with the SIP Phone. Can add `.win`, `.mac`, `.android`, `.ipad`, `.iphone`, `.linux`, `.pc`, `.mobile`, `.pad` at the end of the email (for example, `example@example.com.mac`) to add accounts for different platforms for the same user.",
											"type": "text"
										},
										{
											"key": "voice_mail",
											"value": "ut",
											"description": "(Required) The number to dial for checking voicemail.",
											"type": "text"
										},
										{
											"key": "transport_protocol",
											"value": "AUTO",
											"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
											"type": "text"
										},
										{
											"key": "register_server2",
											"value": "anim in ut id",
											"description": "IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
											"type": "text"
										},
										{
											"key": "transport_protocol2",
											"value": "TCP",
											"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
											"type": "text"
										},
										{
											"key": "proxy_server2",
											"value": "non",
											"description": "IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.",
											"type": "text"
										},
										{
											"key": "register_server3",
											"value": "quis",
											"description": "IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.",
											"type": "text"
										},
										{
											"key": "transport_protocol3",
											"value": "UDP",
											"description": "Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`. (This can only be one of UDP,TCP,TLS,AUTO)",
											"type": "text"
										},
										{
											"key": "proxy_server3",
											"value": "irure",
											"description": "IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.",
											"type": "text"
										},
										{
											"key": "registration_expire_time",
											"value": "60",
											"description": "The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/sip_phones",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sip_phones"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "rooms",
			"item": [
				{
					"name": "account profile",
					"item": [
						{
							"name": "Get Zoom Room account profile",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/rooms/account_profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										"account_profile"
									]
								},
								"description": "Get details on the account profile of a Zoom Room. This information can only by accessed either by the Zoom Room Account Owner or a user with Zoom Rooms admin permission. To get information on an individual Room Profile, use [Get Zoom Room Profile API](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms/getzrprofile) instead.\n\n**Prerequisites:**<br>\n* Zoom account owner or Zoom Rooms admin permissions<br>\n\n**Scopes:** `room:read:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nZoom Room Account Profile returned successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/account_profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"account_profile"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"basic\": {\n  \"support_email\": \"example@example.com\",\n  \"support_phone\": \"15550100\",\n  \"room_passcode\": \"12234\",\n  \"required_code_to_ext\": true\n }\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\nAccess restricted.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/account_profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"account_profile"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update Zoom Room account profile",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "basic",
											"value": "{\"support_email\":\"6UB-3a@AsFGBgKiClMtEiubzWiysNpKltHu.vmba\",\"support_phone\":\"dolor ullamco esse\",\"room_passcode\":\"qui dolor\",\"required_code_to_ext\":false}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rooms/account_profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										"account_profile"
									]
								},
								"description": "Update information on the account profile of a Zoom Room. This information can only by accessed either by the Zoom Room Account Owner or a user with Zoom Rooms admin permission. To update information on an individual Room Profile, use [Update Zoom Room Profile API](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms/updatezrprofile) instead.\n\n**Prerequisites:**<br>\n* Zoom account owner or Zoom Rooms admin permissions<br>\n\n**Scopes:** `room:write:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204` **No Content**<br>\nProfile updated successfully.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "basic",
													"value": "{\"support_email\":\"6UB-3a@AsFGBgKiClMtEiubzWiysNpKltHu.vmba\",\"support_phone\":\"dolor ullamco esse\",\"room_passcode\":\"qui dolor\",\"required_code_to_ext\":false}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/account_profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"account_profile"
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br><br>\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\nAccess restricted.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "basic",
													"value": "{\"support_email\":\"6UB-3a@AsFGBgKiClMtEiubzWiysNpKltHu.vmba\",\"support_phone\":\"dolor ullamco esse\",\"room_passcode\":\"qui dolor\",\"required_code_to_ext\":false}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/account_profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"account_profile"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "account settings",
					"item": [
						{
							"name": "Get Zoom Room account settings",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/rooms/account_settings?setting_type=meeting",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										"account_settings"
									],
									"query": [
										{
											"key": "setting_type",
											"value": "meeting",
											"description": "(Required) The type of setting that you would like to retrieve.<br> `alert`: Alert Settings applied on the Zoom Rooms Account.<br>\n`meeting`: Meeting settings of the Zoom Rooms Account. <br>\n`signage`: View digital signage settings of the Zoom Rooms Account."
										}
									]
								},
								"description": "Get details on Account Settings of a Zoom Room. With this API, you can view either the **Account Meeting Settings** or the **Alert Settings** (Client Alert Settings and Notfication Settings) of the Zoom Rooms account. By default, only **Account Meeting Settings** are returned. To view only **Alert Settings**, specify `alert` as the value of the `setting_type` query parameter.<br><br>\n**Prerequisites:**<br>\n* Zoom Room licenses\n* Owner or Admin privileges on the Zoom Account.<br>\n**Scopes:** `room:read:admin`<br><br> \n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nZR Account Settings returned successfully.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/account_settings?setting_type=meeting",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"account_settings"
											],
											"query": [
												{
													"key": "setting_type",
													"value": "meeting"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"client_alert\": {\n  \"detect_microphone_error_alert\": true,\n  \"detect_bluetooth_microphone_error_alert\": true,\n  \"detect_speaker_error_alert\": true,\n  \"detect_bluetooth_speaker_error_alert\": true,\n  \"detect_camera_error_alert\": true\n },\n \"notification\": {\n  \"audio_not_meet_usability_threshold\": false,\n  \"battery_low_and_not_charging\": false,\n  \"controller_scheduling_disconnected\": false,\n  \"cpu_usage_high_detected\": false,\n  \"network_unstable_detected\": false,\n  \"zoom_room_offline\": false,\n  \"sip_registration_failed\": false,\n  \"mic_speaker_camera_disconnected\": false,\n  \"zoom_room_display_disconnected\": false\n }\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\nAccess restricted.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/account_settings?setting_type=meeting",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"account_settings"
											],
											"query": [
												{
													"key": "setting_type",
													"value": "meeting"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update Zoom Room account settings",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "zoom_rooms",
											"value": "{\"upcoming_meeting_alert\":true,\"show_alert_before_meeting\":true,\"start_airplay_manually\":true,\"weekly_system_restart\":false,\"display_meeting_list\":true,\"display_top_banner\":false,\"display_feedback_survey\":true,\"auto_direct_sharing\":false,\"transform_meeting_to_private\":true,\"hide_id_for_private_meeting\":true,\"auto_start_scheduled_meeting\":true,\"auto_stop_scheduled_meeting\":false,\"audio_device_daily_auto_test\":true,\"support_join_3rd_party_meeting\":false,\"email_address_prompt_before_recording\":false,\"secure_connection_channel\":false,\"encrypt_shared_screen_content\":true,\"allow_multiple_content_sharing\":false,\"show_non_video_participants\":true,\"show_call_history_in_room\":false,\"make_room_alternative_host\":true,\"show_contact_list_on_controller\":false,\"count_attendees_number_in_room\":true,\"send_whiteboard_to_internal_contact_only\":true}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rooms/account_settings?setting_type=meeting",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										"account_settings"
									],
									"query": [
										{
											"key": "setting_type",
											"value": "meeting",
											"description": "(Required) The type of setting that you would like to update.<br> `alert`: Alert Settings applied on the Zoom Rooms Account.<br>\n`meeting`: Meeting settings of the Zoom Rooms Account.<br>\n`signage`: View digital signage settings of the Zoom Rooms Account."
										}
									]
								},
								"description": "Update account settings applied for Zoom Rooms in a Zoom account. With this API, you can update either the **Account Meeting Settings** or the **Alert Settings** (Client Alert Settings and Notfication Settings) of the Zoom Rooms account by specifying the required setting type in the `setting_type` parameter. To update only **Alert Settings**, specify `alert` as the value of the `setting_type` query parameter and to update only **Account Meeting Settings**, specify `meeting` as the value of the `setting_type` query parameter.<br><br>\n**Prerequisites:**<br>\n* Zoom Room licenses\n* Owner or Admin privileges on the Zoom Account.<br>\n**Scopes:** `room:write:admin`<br> \n\n  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204` **No Content**<br>\nSettings updated successfully.\n",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "zoom_rooms",
													"value": "{\"upcoming_meeting_alert\":true,\"show_alert_before_meeting\":true,\"start_airplay_manually\":true,\"weekly_system_restart\":false,\"display_meeting_list\":true,\"display_top_banner\":false,\"display_feedback_survey\":true,\"auto_direct_sharing\":false,\"transform_meeting_to_private\":true,\"hide_id_for_private_meeting\":true,\"auto_start_scheduled_meeting\":true,\"auto_stop_scheduled_meeting\":false,\"audio_device_daily_auto_test\":true,\"support_join_3rd_party_meeting\":false,\"email_address_prompt_before_recording\":false,\"secure_connection_channel\":false,\"encrypt_shared_screen_content\":true,\"allow_multiple_content_sharing\":false,\"show_non_video_participants\":true,\"show_call_history_in_room\":false,\"make_room_alternative_host\":true,\"show_contact_list_on_controller\":false,\"count_attendees_number_in_room\":true,\"send_whiteboard_to_internal_contact_only\":true}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/account_settings?setting_type=meeting",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"account_settings"
											],
											"query": [
												{
													"key": "setting_type",
													"value": "meeting"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br><br>\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\nAccess restricted.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "zoom_rooms",
													"value": "{\"upcoming_meeting_alert\":true,\"show_alert_before_meeting\":true,\"start_airplay_manually\":true,\"weekly_system_restart\":false,\"display_meeting_list\":true,\"display_top_banner\":false,\"display_feedback_survey\":true,\"auto_direct_sharing\":false,\"transform_meeting_to_private\":true,\"hide_id_for_private_meeting\":true,\"auto_start_scheduled_meeting\":true,\"auto_stop_scheduled_meeting\":false,\"audio_device_daily_auto_test\":true,\"support_join_3rd_party_meeting\":false,\"email_address_prompt_before_recording\":false,\"secure_connection_channel\":false,\"encrypt_shared_screen_content\":true,\"allow_multiple_content_sharing\":false,\"show_non_video_participants\":true,\"show_call_history_in_room\":false,\"make_room_alternative_host\":true,\"show_contact_list_on_controller\":false,\"count_attendees_number_in_room\":true,\"send_whiteboard_to_internal_contact_only\":true}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/account_settings?setting_type=meeting",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"account_settings"
											],
											"query": [
												{
													"key": "setting_type",
													"value": "meeting"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "locations",
					"item": [
						{
							"name": "{location Id}",
							"item": [
								{
									"name": "settings",
									"item": [
										{
											"name": "Get location settings",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/:locationId/settings?setting_type=meeting",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														":locationId",
														"settings"
													],
													"query": [
														{
															"key": "setting_type",
															"value": "meeting",
															"description": "(Required) The type of setting that you would like to retrieve.<br> `alert`: Alert Settings applied on the Zoom Rooms Account.<br>\n`meeting`: Meeting settings of the Zoom Rooms Account.<br>\n`signage`: Digital signage settings of the Zoom Rooms Account."
														}
													],
													"variable": [
														{
															"key": "locationId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique identifier of the location type. This can be retrieved using the [List Zoom Room Location API](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) (Id property in the response)."
														}
													]
												},
												"description": "Get information on meeting or alert settings applied to Zoom Rooms located in a specific location. By default, only **Meeting Settings** are returned. To view only **Alert Settings**, specify `alert` as the value of the `setting_type` query parameter.<br><br>\n**Prerequisites:**<br>\n* Zoom Room licenses\n* Owner or Admin privileges on the Zoom Account.<br>\n**Scopes:** `room:read:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200` **OK**<br>\nZoom Room location settings returned successfully.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rooms/locations/:locationId/settings?setting_type=meeting",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rooms",
																"locations",
																":locationId",
																"settings"
															],
															"query": [
																{
																	"key": "setting_type",
																	"value": "meeting"
																}
															],
															"variable": [
																{
																	"key": "locationId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the location type. This can be retrieved using the [List Zoom Room Location API](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) (Id property in the response)."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"client_alert\": {\n  \"detect_microphone_error_alert\": true,\n  \"detect_bluetooth_microphone_error_alert\": true,\n  \"detect_speaker_error_alert\": true,\n  \"detect_bluetooth_speaker_error_alert\": true,\n  \"detect_camera_error_alert\": true\n },\n \"notification\": {\n  \"audio_not_meet_usability_threshold\": false,\n  \"battery_low_and_not_charging\": false,\n  \"controller_scheduling_disconnected\": false,\n  \"cpu_usage_high_detected\": false,\n  \"network_unstable_detected\": false,\n  \"zoom_room_offline\": false,\n  \"sip_registration_failed\": false,\n  \"mic_speaker_camera_disconnected\": false,\n  \"zoom_room_display_disconnected\": false\n }\n}"
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\nAccess Restricted.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rooms/locations/:locationId/settings?setting_type=meeting",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rooms",
																"locations",
																":locationId",
																"settings"
															],
															"query": [
																{
																	"key": "setting_type",
																	"value": "meeting"
																}
															],
															"variable": [
																{
																	"key": "locationId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the location type. This can be retrieved using the [List Zoom Room Location API](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) (Id property in the response)."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found**<br>\n\n**Error Code:** `4801`<br>\nLocation not found: {locationId}\n\n",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rooms/locations/:locationId/settings?setting_type=meeting",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rooms",
																"locations",
																":locationId",
																"settings"
															],
															"query": [
																{
																	"key": "setting_type",
																	"value": "meeting"
																}
															],
															"variable": [
																{
																	"key": "locationId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the location type. This can be retrieved using the [List Zoom Room Location API](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) (Id property in the response)."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Update location settings",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "zoom_rooms",
															"value": "{\"upcoming_meeting_alert\":true,\"show_alert_before_meeting\":false,\"start_airplay_mirroring\":false,\"start_airplay_manually\":false,\"weekly_system_restart\":true,\"display_meeting_list\":true,\"display_top_banner\":false,\"display_feedback_survey\":false,\"auto_accept_incoming_call_and_fecc\":false,\"hide_self_view\":false,\"lock_speaker_volume_control\":true,\"start_hdmi_content_share_manualy\":true,\"auto_direct_sharing\":false,\"voice_commands\":true,\"transform_meeting_to_private\":false,\"hide_id_for_private_meeting\":false,\"auto_start_scheduled_meeting\":true,\"auto_stop_scheduled_meeting\":true,\"audio_device_daily_auto_test\":false,\"support_join_3rd_party_meeting\":false,\"encrypt_shared_screen_content\":true,\"allow_multiple_content_sharing\":true,\"show_non_video_participants\":false,\"show_call_history_in_room\":true,\"show_contact_list_on_controller\":true,\"count_attendees_number_in_room\":false,\"send_whiteboard_to_internal_contact_only\":true}",
															"type": "text"
														},
														{
															"key": "meeting_security",
															"value": "{\"end_to_end_encrypted_meetings\":false,\"encryption_type\":\"enhanced_encryption\"}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/:locationId/settings?setting_type=meeting",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														":locationId",
														"settings"
													],
													"query": [
														{
															"key": "setting_type",
															"value": "meeting",
															"description": "(Required) The type of setting that you would like to update.<br> `alert`: Alert Settings applied on the Zoom Rooms Account.<br>\n`meeting`: Meeting settings of the Zoom Rooms Account.<br>\n`signage`: Digital signage settings."
														}
													],
													"variable": [
														{
															"key": "locationId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique identifier of the location type. This can be retrieved using the [List Zoom Room Location API](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) (Id property in the response)."
														}
													]
												},
												"description": "Update information on either meeting or alert settings applied to Zoom Rooms located in a specific location. To update **Alert Settings**, specify `alert` as the value of the `setting_type` query parameter. Similarly, to update **Meeting Settings**, specify `meeting` as the value of the `setting_type` query parameter.<br><br>\n**Prerequisites:**<br>\n* Zoom Room licenses\n* Owner or Admin privileges on the Zoom Account.<br>\n**Scopes:** `room:write:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `204` **No Content**<br>\nLocation settings updated successfully.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "zoom_rooms",
																	"value": "{\"upcoming_meeting_alert\":true,\"show_alert_before_meeting\":false,\"start_airplay_mirroring\":false,\"start_airplay_manually\":false,\"weekly_system_restart\":true,\"display_meeting_list\":true,\"display_top_banner\":false,\"display_feedback_survey\":false,\"auto_accept_incoming_call_and_fecc\":false,\"hide_self_view\":false,\"lock_speaker_volume_control\":true,\"start_hdmi_content_share_manualy\":true,\"auto_direct_sharing\":false,\"voice_commands\":true,\"transform_meeting_to_private\":false,\"hide_id_for_private_meeting\":false,\"auto_start_scheduled_meeting\":true,\"auto_stop_scheduled_meeting\":true,\"audio_device_daily_auto_test\":false,\"support_join_3rd_party_meeting\":false,\"encrypt_shared_screen_content\":true,\"allow_multiple_content_sharing\":true,\"show_non_video_participants\":false,\"show_call_history_in_room\":true,\"show_contact_list_on_controller\":true,\"count_attendees_number_in_room\":false,\"send_whiteboard_to_internal_contact_only\":true}",
																	"type": "text"
																},
																{
																	"key": "meeting_security",
																	"value": "{\"end_to_end_encrypted_meetings\":false,\"encryption_type\":\"enhanced_encryption\"}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/rooms/locations/:locationId/settings?setting_type=meeting",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rooms",
																"locations",
																":locationId",
																"settings"
															],
															"query": [
																{
																	"key": "setting_type",
																	"value": "meeting"
																}
															],
															"variable": [
																{
																	"key": "locationId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the location type. This can be retrieved using the [List Zoom Room Location API](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) (Id property in the response)."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request**<br><br>\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\nAccess restricted.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "zoom_rooms",
																	"value": "{\"upcoming_meeting_alert\":true,\"show_alert_before_meeting\":false,\"start_airplay_mirroring\":false,\"start_airplay_manually\":false,\"weekly_system_restart\":true,\"display_meeting_list\":true,\"display_top_banner\":false,\"display_feedback_survey\":false,\"auto_accept_incoming_call_and_fecc\":false,\"hide_self_view\":false,\"lock_speaker_volume_control\":true,\"start_hdmi_content_share_manualy\":true,\"auto_direct_sharing\":false,\"voice_commands\":true,\"transform_meeting_to_private\":false,\"hide_id_for_private_meeting\":false,\"auto_start_scheduled_meeting\":true,\"auto_stop_scheduled_meeting\":true,\"audio_device_daily_auto_test\":false,\"support_join_3rd_party_meeting\":false,\"encrypt_shared_screen_content\":true,\"allow_multiple_content_sharing\":true,\"show_non_video_participants\":false,\"show_call_history_in_room\":true,\"show_contact_list_on_controller\":true,\"count_attendees_number_in_room\":false,\"send_whiteboard_to_internal_contact_only\":true}",
																	"type": "text"
																},
																{
																	"key": "meeting_security",
																	"value": "{\"end_to_end_encrypted_meetings\":false,\"encryption_type\":\"enhanced_encryption\"}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/rooms/locations/:locationId/settings?setting_type=meeting",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rooms",
																"locations",
																":locationId",
																"settings"
															],
															"query": [
																{
																	"key": "setting_type",
																	"value": "meeting"
																}
															],
															"variable": [
																{
																	"key": "locationId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the location type. This can be retrieved using the [List Zoom Room Location API](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) (Id property in the response)."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `4801`<br>\nLocation not found: {locationId}",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "zoom_rooms",
																	"value": "{\"upcoming_meeting_alert\":true,\"show_alert_before_meeting\":false,\"start_airplay_mirroring\":false,\"start_airplay_manually\":false,\"weekly_system_restart\":true,\"display_meeting_list\":true,\"display_top_banner\":false,\"display_feedback_survey\":false,\"auto_accept_incoming_call_and_fecc\":false,\"hide_self_view\":false,\"lock_speaker_volume_control\":true,\"start_hdmi_content_share_manualy\":true,\"auto_direct_sharing\":false,\"voice_commands\":true,\"transform_meeting_to_private\":false,\"hide_id_for_private_meeting\":false,\"auto_start_scheduled_meeting\":true,\"auto_stop_scheduled_meeting\":true,\"audio_device_daily_auto_test\":false,\"support_join_3rd_party_meeting\":false,\"encrypt_shared_screen_content\":true,\"allow_multiple_content_sharing\":true,\"show_non_video_participants\":false,\"show_call_history_in_room\":true,\"show_contact_list_on_controller\":true,\"count_attendees_number_in_room\":false,\"send_whiteboard_to_internal_contact_only\":true}",
																	"type": "text"
																},
																{
																	"key": "meeting_security",
																	"value": "{\"end_to_end_encrypted_meetings\":false,\"encryption_type\":\"enhanced_encryption\"}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/rooms/locations/:locationId/settings?setting_type=meeting",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rooms",
																"locations",
																":locationId",
																"settings"
															],
															"query": [
																{
																	"key": "setting_type",
																	"value": "meeting"
																}
															],
															"variable": [
																{
																	"key": "locationId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the location type. This can be retrieved using the [List Zoom Room Location API](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) (Id property in the response)."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get Zoom Room location profile",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/rooms/locations/:locationId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"locations",
												":locationId"
											],
											"variable": [
												{
													"key": "locationId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique identifier of the location type. This can be retrieved using the [List Zoom Room Location API](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) (Id property in the response)."
												}
											]
										},
										"description": "Each location type of the [Zoom Rooms location hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) has a profile page that includes information such as name of the location, address, support email, etc. Use this API to retrieve information about a specific Zoom Rooms location type such as information about the city where the Zoom Rooms is located.\n\n**Prerequisite:**<br>\n* Account owner or admin permission\n* Zoom Rooms version 4.0 or higher<br>\n**Scopes:** `room:read:admin`<br> \n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` **OK**<br>\nZoom Rooms Location Profile returned successfully.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/:locationId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														":locationId"
													],
													"variable": [
														{
															"key": "locationId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique identifier of the location type. This can be retrieved using the [List Zoom Room Location API](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) (Id property in the response)."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"basic\": {\n  \"name\": \"Kathmandu\",\n  \"description\": \"This Zoom Rooms is located in Kathmandu.\",\n  \"timezone\": \"Asia/Kathmandu\",\n  \"support_email\": \"example@example.com\",\n  \"support_phone\": \"15550100\",\n  \"room_passcode\": \"12234\",\n  \"required_code_to_ext\": true\n }\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\nAccess restricted.<br>\n\n\n\n\n\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/:locationId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														":locationId"
													],
													"variable": [
														{
															"key": "locationId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique identifier of the location type. This can be retrieved using the [List Zoom Room Location API](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) (Id property in the response)."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `4801`<br>\nLocation not found: {locationId}.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/:locationId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														":locationId"
													],
													"variable": [
														{
															"key": "locationId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique identifier of the location type. This can be retrieved using the [List Zoom Room Location API](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) (Id property in the response)."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update Zoom Room location profile",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "basic",
													"value": "{\"name\":\"laborum reprehenderit\",\"description \":\"nostrud mollit in\",\"timezone\":\"Duis sint\",\"address\":\"anim laboris velit ex sed\",\"support_email\":\"B3VqJiJ9oT@lYAoLgKeePLkkhZKQiaHVypJtCyhT.metl\",\"support_phone\":\"ex aliquip adipisicing eiusmod\",\"room_passcode\":\"exerci\",\"required_code_to_ext\":false}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/locations/:locationId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"locations",
												":locationId"
											],
											"variable": [
												{
													"key": "locationId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of the location. This can be retrieved from the [List Zoom Room Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API."
												}
											]
										},
										"description": "Each location type of the [Zoom Rooms location hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) has a profile page that includes information such as name of the location, address, support email, etc. Use this API to update information about a specific Zoom Rooms location type such as information about the city where the Zoom Rooms is located.\n\n**Prerequisite:**<br>\n* Account owner or admin permission\n* Zoom Rooms version 4.0 or higher<br>\n**Scopes:** `room:write:admin`<br> \n\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "basic",
															"value": "{\"name\":\"laborum reprehenderit\",\"description \":\"nostrud mollit in\",\"timezone\":\"Duis sint\",\"address\":\"anim laboris velit ex sed\",\"support_email\":\"B3VqJiJ9oT@lYAoLgKeePLkkhZKQiaHVypJtCyhT.metl\",\"support_phone\":\"ex aliquip adipisicing eiusmod\",\"room_passcode\":\"exerci\",\"required_code_to_ext\":false}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/:locationId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														":locationId"
													],
													"variable": [
														{
															"key": "locationId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique Identifier of the location. This can be retrieved from the [List Zoom Room Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "Change the assigned parent location",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "parent_location_id",
													"value": "cupidatat ut",
													"description": "Location ID of the new Parent Location under which you the child location will be positioned. This can be retrieved from the [List Zoom Room Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/locations/:locationId/location",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"locations",
												":locationId",
												"location"
											],
											"variable": [
												{
													"key": "locationId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) "
												}
											]
										},
										"description": "An account owner of a Zoom account can establish a [Zoom Rooms Location Hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) to better organize Zoom Rooms spread accross various location. The location can be structured in a hierarchy with Country being the top-level location, followed by city, campus, building, and floor. The location in the lower level in the hierarchy is considered as a child of the location that is a level above in the hierarchy. Use this API to change the parent location of a child location. <br><br> For instance, if the location hierarchy is structured in a way where there are two campuses (Campus 1, and Campus 2) in a City and Campus 1 consists of a building named Building 1 with a floor where Zoom Rooms are located, and you would like to rearrange the structure so that Building 1 along with its child locations (floor and Zoom Rooms) are relocated directly under Campus 2 instead of Campus 1, you must provide the location ID of Building 1 in the path parameter of this request and the location ID of Campus 2 as the value of `parent_location_id` in the  request body.<br><br>\n**Prerequisite:**<br>\n* Account owner or admin permission\n* Zoom Rooms version 4.0 or higher<br>\n**Scopes:** `room:write:admin`<br><br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` **No Content**<br>\nLocation assigned successfully.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "parent_location_id",
															"value": "cupidatat ut",
															"description": "Location ID of the new Parent Location under which you the child location will be positioned. This can be retrieved from the [List Zoom Room Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/:locationId/location",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														":locationId",
														"location"
													],
													"variable": [
														{
															"key": "locationId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br><br>\n**Error Code:** `200`<br> Zoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\n**Error Code:** `300`<br> Invalid parent location id {parent_location_id}",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "parent_location_id",
															"value": "cupidatat ut",
															"description": "Location ID of the new Parent Location under which you the child location will be positioned. This can be retrieved from the [List Zoom Room Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/:locationId/location",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														":locationId",
														"location"
													],
													"variable": [
														{
															"key": "locationId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `4801`<br> Location not found:{parent_location_id}.\n",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "parent_location_id",
															"value": "cupidatat ut",
															"description": "Location ID of the new Parent Location under which you the child location will be positioned. This can be retrieved from the [List Zoom Room Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/:locationId/location",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														":locationId",
														"location"
													],
													"variable": [
														{
															"key": "locationId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "structure",
							"item": [
								{
									"name": "Get Zoom Room location structure",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/rooms/locations/structure",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"locations",
												"structure"
											]
										},
										"description": "Get the [location hierarchial structure(s)](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) applied on the Zoom Rooms in an account.<br><br>\n**Prerequisites:**<br>\n* Zoom Rooms version 4.0 or higher\n* Account owner or admin permissions<br>\n**Scopes:** `room:read:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` **OK**<br>\nZoom Rooms location structure returned successfully.<br>\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/structure",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														"structure"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"structures\": [\n  \"country\",\n  \"state\",\n  \"city\",\n  \"campus\",\n  \"building\",\n  \"floor\",\n  \"room\"\n ]\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/structure",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														"structure"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update Zoom Rooms location structure",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "structures",
													"value": "[\"occaecat do\",\"id sed\"]",
													"description": "Location Structure. The value can be either one or a combination of the following strings separated by comma:\n`country`, `state`, `city`, `campus`, `building`, `floor`",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/locations/structure",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"locations",
												"structure"
											]
										},
										"description": "Update the [location hierarchial structure(s)](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) applied on the Zoom Rooms in an account.<br><br>\n**Prerequisites:**<br>\n* Zoom Rooms version 4.0 or higher\n* Account owner or admin permissions<br>\n**Scopes:** `room:write:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` **No Content**<br>\nLocation Structure updated successfully.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "structures",
															"value": "[\"voluptate pariatur dolore cupidatat nisi\",\"Ut\"]",
															"description": "Location Structure. The value can be either one or a combination of the following strings separated by comma:\n`country`, `state`, `city`, `campus`, `building`, `floor`",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/structure",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														"structure"
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `2100`<br>\nThis sub account has no sip trunk plan",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "structures",
															"value": "[\"voluptate pariatur dolore cupidatat nisi\",\"Ut\"]",
															"description": "Location Structure. The value can be either one or a combination of the following strings separated by comma:\n`country`, `state`, `city`, `campus`, `building`, `floor`",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/structure",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														"structure"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `2001` This account does not exist or does not belong to this master account.<br>This account does not exist or does not belong to you.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "structures",
															"value": "[\"voluptate pariatur dolore cupidatat nisi\",\"Ut\"]",
															"description": "Location Structure. The value can be either one or a combination of the following strings separated by comma:\n`country`, `state`, `city`, `campus`, `building`, `floor`",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/locations/structure",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														"locations",
														"structure"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "List Zoom Room locations",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/rooms/locations?parent_location_id=culpa velit reprehenderit&type=culpa velit reprehenderit&page_size=30&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										"locations"
									],
									"query": [
										{
											"key": "parent_location_id",
											"value": "culpa velit reprehenderit",
											"description": "A unique identifier of the parent location. For instance, if a Zoom Room is located in Floor 1 of Building A, the location of Building A will be the parent location of Floor 1. Use this parameter to filter the response by a specific location hierarchy level."
										},
										{
											"key": "type",
											"value": "culpa velit reprehenderit",
											"description": "Use this field to filter the response by the type of location. The value can be one of the following:\n`country`, `states`, `city`, `campus`, `building`, `floor`. "
										},
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										}
									]
								},
								"description": "A Zoom account owner or a Zoom Room administrator can establish a [location hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) to help manage Zoom Rooms that are spread among a variety of locations. Use this API to list the different location types used for Zoom Rooms in an account.<br><br>\n**Prerequisites:**\n* Account owner or admin permissions.\n* Zoom Rooms Version 4.0 or higher<br><br>\n**Scopes:** `room:read:admin`<br> \n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nZoom Room locations listed successfully.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/locations?parent_location_id=culpa velit reprehenderit&type=culpa velit reprehenderit&page_size=30&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"locations"
											],
											"query": [
												{
													"key": "parent_location_id",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "type",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"{\\n  \\\"page_size\\\": 30,\\n  \\\"next_page_token\\\": \\\"\\\",\\n  \\\"locations\\\": [\\n    {\\n      \\\"id\\\": \\\"AAAAAAAAAA\\\",\\n      \\\"name\\\": \\\"Country/Region1\\\",\\n      \\\"parent_location_id\\\": \\\"I-qsfdUbbbbg\\\",\\n      \\\"type\\\": \\\"country\\\"\\n    },\\n    {\\n      \\\"id\\\": \\\"BBBBBBBB\\\",\\n      \\\"name\\\": \\\"State1\\\",\\n      \\\"parent_location_id\\\": \\\"AAAAAAAAAA\\\",\\n      \\\"type\\\": \\\"state\\\"\\n    },\\n    {\\n      \\\"id\\\": \\\"ccccddddd,\\n      \\\"name\\\": \\\"City1\\\",\\n      \\\"parent_location_id\\\": \\\"BBBBBBBB\\\",\\n      \\\"type\\\": \\\"city\\\"\\n    },\\n    {\\n      \\\"id\\\": \\\"fgaajfjfhgjgjgjg\\\",\\n      \\\"name\\\": \\\"Campus1\\\",\\n      \\\"parent_location_id\\\": \\\"ccccddddd,\\n      \\\"type\\\": \\\"campus\\\"\\n    },\\n    {\\n      \\\"id\\\": \\\"YQGK12344\\\",\\n      \\\"name\\\": \\\"Building1\\\",\\n      \\\"parent_location_id\\\": \\\"fgaajfjfhgjgjgjg\\\",\\n      \\\"type\\\": \\\"building\\\"\\n    },\\n    {\\n      \\\"id\\\": \\\"uUbbbbbbbb\\\",\\n      \\\"name\\\": \\\"Floor1\\\",\\n      \\\"parent_location_id\\\": \\\"YQGK12344\\\",\\n      \\\"type\\\": \\\"floor\\\"\\n    }\\n  ]\\n}\""
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\n**Error Code:** `300`<br>\nLocation type not exist.<br>\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/locations?parent_location_id=culpa velit reprehenderit&type=culpa velit reprehenderit&page_size=30&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"locations"
											],
											"query": [
												{
													"key": "parent_location_id",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "type",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br>\n\n**Error Code:** `4801`<br>\n Location not found:{parent_location_id}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/locations?parent_location_id=culpa velit reprehenderit&type=culpa velit reprehenderit&page_size=30&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"locations"
											],
											"query": [
												{
													"key": "parent_location_id",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "type",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add a location",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "voluptat",
											"description": "Name of the location. The name must be unique and shouldn't have already been used in the same account.",
											"type": "text"
										},
										{
											"key": "parent_location_id",
											"value": "do",
											"description": "The location ID of the location that is a level higher from the location that is being added.<br><br> For example, to add a City named \"City 1\" as the child location under a State named \"State 1\", you must provide the location ID of \"State 1\". This can be retrieved using the [List Zoom Room Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rooms/locations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										"locations"
									]
								},
								"description": "Add a location to the [location hierarchial structure(s)](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) of Zoom Rooms in an account.\n\n**Prerequisites:**\n* Account owner or admin permissions.\n* Zoom Rooms Version 4.0 or higher<br><br>\n**Scopes:** `room:write:admin`<br> \n\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nLocation added successfully.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "name",
													"value": "voluptat",
													"description": "Name of the location. The name must be unique and shouldn't have already been used in the same account.",
													"type": "text"
												},
												{
													"key": "parent_location_id",
													"value": "do",
													"description": "The location ID of the location that is a level higher from the location that is being added.<br><br> For example, to add a City named \"City 1\" as the child location under a State named \"State 1\", you must provide the location ID of \"State 1\". This can be retrieved using the [List Zoom Room Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/locations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"locations"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"sedo534pis\",\n \"name\": \"San Jose City\",\n \"type\": \"City\",\n \"parent_location_id\": \"gdrgre54t5th\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br><br>\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br><br>\n**Error Code:** `300`<br>\nLocation name already exists. Try a different location n",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "name",
													"value": "voluptat",
													"description": "Name of the location. The name must be unique and shouldn't have already been used in the same account.",
													"type": "text"
												},
												{
													"key": "parent_location_id",
													"value": "do",
													"description": "The location ID of the location that is a level higher from the location that is being added.<br><br> For example, to add a City named \"City 1\" as the child location under a State named \"State 1\", you must provide the location ID of \"State 1\". This can be retrieved using the [List Zoom Room Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/locations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"locations"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `4801`<br>\nLocation not exist {parent_location_id}",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "name",
													"value": "voluptat",
													"description": "Name of the location. The name must be unique and shouldn't have already been used in the same account.",
													"type": "text"
												},
												{
													"key": "parent_location_id",
													"value": "do",
													"description": "The location ID of the location that is a level higher from the location that is being added.<br><br> For example, to add a City named \"City 1\" as the child location under a State named \"State 1\", you must provide the location ID of \"State 1\". This can be retrieved using the [List Zoom Room Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/locations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												"locations"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "{room Id}",
					"item": [
						{
							"name": "settings",
							"item": [
								{
									"name": "Get Zoom Room settings",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId/settings?setting_type=meeting",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId",
												"settings"
											],
											"query": [
												{
													"key": "setting_type",
													"value": "meeting",
													"description": "(Required) The type of setting that you would like to retrieve.<br> `alert`: Alert Settings applied on the Zoom Rooms Account.<br>\n`meeting`: Meeting settings of the Zoom Rooms Account."
												}
											],
											"variable": [
												{
													"key": "roomId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique identifier of the Zoom Room."
												}
											]
										},
										"description": "Get information on meeting or alert settings applied to a specific Zoom Room. By default, only **Meeting Settings** are returned. To view only **Alert Settings**, specify `alert` as the value of the `setting_type` query parameter.<br>\n**Prerequisites:**<br>\n* Zoom Room licenses\n* Owner or Admin privileges on the Zoom Account.<br>\n**Scopes:** `room:read:admin`\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br> "
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` **OK**<br>\nZoom Room settings returned successfully.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/settings?setting_type=meeting",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"settings"
													],
													"query": [
														{
															"key": "setting_type",
															"value": "meeting"
														}
													],
													"variable": [
														{
															"key": "roomId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique identifier of the Zoom Room."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"zoom_rooms\": {\n  \"upcoming_meeting_alert\": true,\n  \"show_alert_before_meeting\": false,\n  \"start_airplay_manually\": true,\n  \"weekly_system_restart\": false,\n  \"display_meeting_list\": false,\n  \"display_top_banner\": false,\n  \"display_feedback_survey\": true,\n  \"auto_direct_sharing\": false,\n  \"transform_meeting_to_private\": false,\n  \"hide_id_for_private_meeting\": false,\n  \"auto_start_scheduled_meeting\": true,\n  \"auto_stop_scheduled_meeting\": true,\n  \"hide_share_instruction\": true,\n  \"audio_device_daily_auto_test\": true,\n  \"support_join_3rd_party_meeting\": true,\n  \"encrypt_shared_screen_content\": false,\n  \"allow_multiple_content_sharing\": true,\n  \"show_non_video_participants\": false,\n  \"show_call_history_in_room\": true,\n  \"show_contact_list_on_controller\": true,\n  \"count_attendees_number_in_room\": true,\n  \"send_whiteboard_to_internal_contact_only\": true\n }\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\nAccess restricted.\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/settings?setting_type=meeting",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"settings"
													],
													"query": [
														{
															"key": "setting_type",
															"value": "meeting"
														}
													],
													"variable": [
														{
															"key": "roomId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique identifier of the Zoom Room."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br>\n\n**Error Code:** `1012`<br>\nRoom not found:{roomId}.\n\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/settings?setting_type=meeting",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"settings"
													],
													"query": [
														{
															"key": "setting_type",
															"value": "meeting"
														}
													],
													"variable": [
														{
															"key": "roomId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique identifier of the Zoom Room."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update Zoom Room settings",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "zoom_rooms",
													"value": "{\"upcoming_meeting_alert\":true,\"show_alert_before_meeting\":false,\"start_airplay_mirroring\":false,\"start_airplay_manually\":false,\"weekly_system_restart\":true,\"display_meeting_list\":true,\"display_top_banner\":false,\"display_feedback_survey\":false,\"auto_direct_sharing\":true,\"transform_meeting_to_private\":true,\"hide_id_for_private_meeting\":false,\"auto_start_scheduled_meeting\":true,\"auto_stop_scheduled_meeting\":true,\"hide_share_instruction\":false,\"audio_device_daily_auto_test\":true,\"support_join_3rd_party_meeting\":false,\"encrypt_shared_screen_content\":true,\"allow_multiple_content_sharing\":false,\"show_non_video_participants\":true,\"show_call_history_in_room\":false,\"show_contact_list_on_controller\":false,\"count_attendees_number_in_room\":false,\"send_whiteboard_to_internal_contact_only\":false}",
													"type": "text"
												},
												{
													"key": "meeting_security",
													"value": "{\"end_to_end_encrypted_meetings\":true,\"encryption_type\":\"e2ee\"}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId/settings?setting_type=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId",
												"settings"
											],
											"query": [
												{
													"key": "setting_type",
													"value": "culpa velit reprehenderit",
													"description": "The type of setting that you would like to update.<br> `alert`: Alert Settings applied on the Zoom Room.<br>\n`meeting`: Meeting settings of the Zoom Room.<br>\n`signage`: Digital signage settings applied on the Zoom Room."
												}
											],
											"variable": [
												{
													"key": "roomId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of the Zoom Room."
												}
											]
										},
										"description": "Update either meeting or alert settings applied to a specific Zoom Room. To update **Alert Settings**, specify `alert` as the value of the `setting_type` query parameter. To update **Meeting Settings**, specify `meeting` as the value of the `setting_type` query parameter.<br>\n**Prerequisites:**<br>\n* Zoom Room licenses\n* Owner or Admin privileges on the Zoom Account.<br>\n**Scopes:** `room:write:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` **No Content**<br>\nSettings updated successfully. ",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "zoom_rooms",
															"value": "{\"upcoming_meeting_alert\":true,\"show_alert_before_meeting\":false,\"start_airplay_mirroring\":false,\"start_airplay_manually\":false,\"weekly_system_restart\":true,\"display_meeting_list\":true,\"display_top_banner\":false,\"display_feedback_survey\":false,\"auto_direct_sharing\":true,\"transform_meeting_to_private\":true,\"hide_id_for_private_meeting\":false,\"auto_start_scheduled_meeting\":true,\"auto_stop_scheduled_meeting\":true,\"hide_share_instruction\":false,\"audio_device_daily_auto_test\":true,\"support_join_3rd_party_meeting\":false,\"encrypt_shared_screen_content\":true,\"allow_multiple_content_sharing\":false,\"show_non_video_participants\":true,\"show_call_history_in_room\":false,\"show_contact_list_on_controller\":false,\"count_attendees_number_in_room\":false,\"send_whiteboard_to_internal_contact_only\":false}",
															"type": "text"
														},
														{
															"key": "meeting_security",
															"value": "{\"end_to_end_encrypted_meetings\":true,\"encryption_type\":\"e2ee\"}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/settings?setting_type=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"settings"
													],
													"query": [
														{
															"key": "setting_type",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "roomId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique Identifier of the Zoom Room."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br><br>\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\nAccess restricted.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "zoom_rooms",
															"value": "{\"upcoming_meeting_alert\":true,\"show_alert_before_meeting\":false,\"start_airplay_mirroring\":false,\"start_airplay_manually\":false,\"weekly_system_restart\":true,\"display_meeting_list\":true,\"display_top_banner\":false,\"display_feedback_survey\":false,\"auto_direct_sharing\":true,\"transform_meeting_to_private\":true,\"hide_id_for_private_meeting\":false,\"auto_start_scheduled_meeting\":true,\"auto_stop_scheduled_meeting\":true,\"hide_share_instruction\":false,\"audio_device_daily_auto_test\":true,\"support_join_3rd_party_meeting\":false,\"encrypt_shared_screen_content\":true,\"allow_multiple_content_sharing\":false,\"show_non_video_participants\":true,\"show_call_history_in_room\":false,\"show_contact_list_on_controller\":false,\"count_attendees_number_in_room\":false,\"send_whiteboard_to_internal_contact_only\":false}",
															"type": "text"
														},
														{
															"key": "meeting_security",
															"value": "{\"end_to_end_encrypted_meetings\":true,\"encryption_type\":\"e2ee\"}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/settings?setting_type=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"settings"
													],
													"query": [
														{
															"key": "setting_type",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "roomId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique Identifier of the Zoom Room."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "devices",
							"item": [
								{
									"name": "List Zoom Room devices",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId/devices",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId",
												"devices"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of the Zoom Room. This can be retrieved from the response of [List Zoom Rooms](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms/listzoomrooms) API."
												}
											]
										},
										"description": "List information about the devices that are being used for a specific [Zoom Room](https://support.zoom.us/hc/en-us/articles/207483343-Getting-Started-with-Zoom-Rooms) in an account.\n\n**Prerequisites:**<br>\n* Pro or a higher plan with [Zoom Room](https://zoom.us/zoomrooms) license.<br>\n* Account owner or admin permissions.\n**Scopes**: `room:read:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` **OK**\nDevices listed successfully.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/devices",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"devices"
													],
													"variable": [
														{
															"key": "roomId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique Identifier of the Zoom Room. This can be retrieved from the response of [List Zoom Rooms](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms/listzoomrooms) API."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"devices\": [\n  {\n   \"id\": \"sajhdfshf24324\",\n   \"room_name\": \"MyAwesomeZoomRoom\",\n   \"device_type\": \"Zoom Rooms Computer\",\n   \"app_version\": \"4.4.1 (1242.0623)\",\n   \"device_system\": \"Win 10\",\n   \"status\": \"Online\"\n  },\n  {\n   \"id\": \"32dhgdfg2were\",\n   \"room_name\": \"MyAwesomeZoomRoom\",\n   \"device_type\": \"Zoom Rooms Controller\",\n   \"app_version\": \"4.3.6 (265.0307)\",\n   \"device_system\": \"iPad 12.3.1\",\n   \"status\": \"Online\"\n  }\n ]\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/devices",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"devices"
													],
													"variable": [
														{
															"key": "roomId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique Identifier of the Zoom Room. This can be retrieved from the response of [List Zoom Rooms](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms/listzoomrooms) API."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Change Zoom Rooms app version",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "upgrade",
													"description": "Specify one of the following values for this field:\n\n`upgrade`: Upgrade to the latest Zoom Rooms App Version.<br>\n`downgrade`: Downgrade the Zoom Rooms App Version.<br>\n`cancel`: Cancel an ongoing upgrade or downgrade process. (This can only be one of upgrade,downgrade,cancel)",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId/devices/:deviceId/app_version",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId",
												"devices",
												":deviceId",
												"app_version"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of the Zoom Room."
												},
												{
													"key": "deviceId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of the Mac or the Windows device. The value of this field can be retrieved from the [List Zoom Room Devices API](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms/listzrdevices)."
												}
											]
										},
										"description": "Use this API to [upgrade or downgrade](https://support.zoom.us/hc/en-us/articles/204675449-Upgrade-or-Downgrade-Zoom-Rooms-Software) the version of your installed Zoom Rooms app on your Mac or Windows device. \n\n**Scopes:** `room:write:admin` \n\n**Prerequisites:** \n* A Pro or a higher account with Zoom Rooms. \n* The Zoom Rooms software must be installed on a Mac or a Windows device. This API does not support other devices."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` **No Content** <br>\nRequest processed successfully.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "action",
															"value": "upgrade",
															"description": "Specify one of the following values for this field:\n\n`upgrade`: Upgrade to the latest Zoom Rooms App Version.<br>\n`downgrade`: Downgrade the Zoom Rooms App Version.<br>\n`cancel`: Cancel an ongoing upgrade or downgrade process. (This can only be one of upgrade,downgrade,cancel)",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/devices/:deviceId/app_version",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"devices",
														":deviceId",
														"app_version"
													],
													"variable": [
														{
															"key": "roomId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique Identifier of the Zoom Room."
														},
														{
															"key": "deviceId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique Identifier of the Mac or the Windows device. The value of this field can be retrieved from the [List Zoom Room Devices API](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms/listzrdevices)."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `8001` <br> Cannot process this upgrade request. The Zoom Rooms Software in this device is either already up to date or is currently being updated.  <br>  <br> \n**Error Code:** `8002` <br> Ca",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "action",
															"value": "upgrade",
															"description": "Specify one of the following values for this field:\n\n`upgrade`: Upgrade to the latest Zoom Rooms App Version.<br>\n`downgrade`: Downgrade the Zoom Rooms App Version.<br>\n`cancel`: Cancel an ongoing upgrade or downgrade process. (This can only be one of upgrade,downgrade,cancel)",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/rooms/:roomId/devices/:deviceId/app_version",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rooms",
														":roomId",
														"devices",
														":deviceId",
														"app_version"
													],
													"variable": [
														{
															"key": "roomId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique Identifier of the Zoom Room."
														},
														{
															"key": "deviceId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique Identifier of the Mac or the Windows device. The value of this field can be retrieved from the [List Zoom Room Devices API](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms/listzrdevices)."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get Zoom Room profile",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/rooms/:roomId?regenerate_activation_code=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										":roomId"
									],
									"query": [
										{
											"key": "regenerate_activation_code",
											"value": "false",
											"description": "Whether to regenerate an activation code for a Zoom Room. This value defaults to `false`."
										}
									],
									"variable": [
										{
											"key": "roomId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Unique Identifier of the Zoom Room. This can be retrieved from the response of [List Zoom Rooms](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms/listzoomrooms) API."
										}
									]
								},
								"description": "\nZoom Rooms is a software-based room system that provides an integrated experience for audio conferencing, wireless screen sharing and video conferencing. Use this API to get detailed information on a specific Zoom Room in a Zoom account.\n\n**Prerequisites:**<br>\n* Pro or a higher plan with [Zoom Room](https://zoom.us/zoomrooms) license.<br>\n**Scopes**: `room:read:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nZoom Room profile returned successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId?regenerate_activation_code=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId"
											],
											"query": [
												{
													"key": "regenerate_activation_code",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "roomId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of the Zoom Room. This can be retrieved from the response of [List Zoom Rooms](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms/listzoomrooms) API."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"basic\": {\n  \"name\": \"MytestbRoom\",\n  \"activation_code\": \"12345\",\n  \"support_email\": \"example@example.com\",\n  \"support_phone\": \"15550100\",\n  \"room_passcode\": \"1234\",\n  \"required_code_to_ext\": true,\n  \"hide_room_in_contacts\": false\n }\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n\n**Error Code:** `200`<br>\n* Zoom Room subscription not found. Try again after purchasing a Zoom Room subscription.\n* Access restricted.\n\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId?regenerate_activation_code=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId"
											],
											"query": [
												{
													"key": "regenerate_activation_code",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "roomId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of the Zoom Room. This can be retrieved from the response of [List Zoom Rooms](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms/listzoomrooms) API."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br>\n\n**Error Code:** `1012`<br>\nRoom not found:{roomId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId?regenerate_activation_code=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId"
											],
											"query": [
												{
													"key": "regenerate_activation_code",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "roomId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of the Zoom Room. This can be retrieved from the response of [List Zoom Rooms](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms/listzoomrooms) API."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a Zoom Room",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/rooms/:roomId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										":roomId"
									],
									"variable": [
										{
											"key": "roomId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Unique Identifier of a Zoom Room."
										}
									]
								},
								"description": "[Remove](https://support.zoom.us/hc/en-us/articles/360033432032-Zoom-Room-Device-Profiles#h_e55b2092-c418-4b02-819f-44de51448900) a specific Zoom Room profile from a Zoom account.<br><br>\n**Prerequisites:**<br>\n* Pro or a higher plan with [Zoom Room](https://zoom.us/zoomrooms) license.<br>\n**Scopes**: `room:write:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204` **No Content** <br>\nZoom Room deleted successfully.\n",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of a Zoom Room."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request** <br><br>\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\nAccess restricted.<br>\n\n\n\n",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of a Zoom Room."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found** <br><br>\n**Error Code:** `1012`<br>\nRoom not found:{roomId}",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of a Zoom Room."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a Zoom Room profile",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "basic",
											"value": "{\"name\":\"aute culpa sint dolore ullamco\",\"support_email\":\"xlbquJqLPzxh@xuqjfiFhPRrZVcGoLEmfnKwCw.lm\",\"support_phone\":\"in laboris\",\"room_passcode\":\"t\",\"required_code_to_ext\":true,\"hide_room_in_contacts\":false}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rooms/:roomId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										":roomId"
									],
									"variable": [
										{
											"key": "roomId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Unique Identifier of a Zoom Room."
										}
									]
								},
								"description": "Update basic information on a specific Zoom Room in a Zoom account.<br>\n\n**Prerequisites:**<br>\n* Pro or a higher plan with [Zoom Room](https://zoom.us/zoomrooms) license.<br>\n**Scopes**: `room:write:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204` **No Content**<br>\nRoom Profile information updated successfully.\n",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "basic",
													"value": "{\"name\":\"aute culpa sint dolore ullamco\",\"support_email\":\"xlbquJqLPzxh@xuqjfiFhPRrZVcGoLEmfnKwCw.lm\",\"support_phone\":\"in laboris\",\"room_passcode\":\"t\",\"required_code_to_ext\":true,\"hide_room_in_contacts\":false}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of a Zoom Room."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br><br>\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\nAccess restricted.<br><br>\n\n",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "basic",
													"value": "{\"name\":\"aute culpa sint dolore ullamco\",\"support_email\":\"xlbquJqLPzxh@xuqjfiFhPRrZVcGoLEmfnKwCw.lm\",\"support_phone\":\"in laboris\",\"room_passcode\":\"t\",\"required_code_to_ext\":true,\"hide_room_in_contacts\":false}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of a Zoom Room."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1012`<br>\nRoom not found:{roomId}\n",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "basic",
													"value": "{\"name\":\"aute culpa sint dolore ullamco\",\"support_email\":\"xlbquJqLPzxh@xuqjfiFhPRrZVcGoLEmfnKwCw.lm\",\"support_phone\":\"in laboris\",\"room_passcode\":\"t\",\"required_code_to_ext\":true,\"hide_room_in_contacts\":false}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of a Zoom Room."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Change a Zoom Room's location",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "location_id",
											"value": "ut d",
											"description": "Location ID of the location where Zoom Room is to be assigned. This can be retrieved from the `id` property in the response of [List Zoom Rooms Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rooms/:roomId/location",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										":roomId",
										"location"
									],
									"variable": [
										{
											"key": "roomId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Unique Identifier of the Zoom Room."
										}
									]
								},
								"description": "An account owner of a Zoom account can establish a [Zoom Rooms Location Hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) to better organize Zoom Rooms spread accress various location. The location can be structured in a hierarchy with Country being the top-level location, followed by city, campus, building, and floor. Use this API to assign a new location for a Zoom Room. Note that the Zoom Room can be assigned only to the lowest level location available in the hierarchy.\n**Prerequisite:**<br>\n* Account owner or admin permission\n* Zoom Rooms version 4.0 or higher<br>\n**Scopes:** `room:write:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204` **No Content**<br>\nLocation of the Zoom Room changed successfully.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "location_id",
													"value": "ut d",
													"description": "Location ID of the location where Zoom Room is to be assigned. This can be retrieved from the `id` property in the response of [List Zoom Rooms Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId/location",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId",
												"location"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of the Zoom Room."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `200`<br>\nZoom Room subscription not found. Try again after purchasing a Zoom Room subscription.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "location_id",
													"value": "ut d",
													"description": "Location ID of the location where Zoom Room is to be assigned. This can be retrieved from the `id` property in the response of [List Zoom Rooms Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId/location",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId",
												"location"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of the Zoom Room."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `4801`<br>\nLocation not found: {location_id}",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "location_id",
													"value": "ut d",
													"description": "Location ID of the location where Zoom Room is to be assigned. This can be retrieved from the `id` property in the response of [List Zoom Rooms Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/rooms/:roomId/location",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rooms",
												":roomId",
												"location"
											],
											"variable": [
												{
													"key": "roomId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of the Zoom Room."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "List Zoom Rooms",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rooms?status=InMeeting&type=ZoomRoom&unassigned_rooms=false&page_size=30&next_page_token=culpa velit reprehenderit&location_id=culpa velit reprehenderit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rooms"
							],
							"query": [
								{
									"key": "status",
									"value": "InMeeting",
									"description": "The status of the Zoom Room."
								},
								{
									"key": "type",
									"value": "ZoomRoom",
									"description": "Type of the Zoom Rooms."
								},
								{
									"key": "unassigned_rooms",
									"value": "false",
									"description": "Use this query parameter with a value of `true` if you would like to see Zoom Rooms in your account that have not been assigned to anyone yet."
								},
								{
									"key": "page_size",
									"value": "30",
									"description": "The number of records returned within a single API call."
								},
								{
									"key": "next_page_token",
									"value": "culpa velit reprehenderit",
									"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
								},
								{
									"key": "location_id",
									"value": "culpa velit reprehenderit",
									"description": "Parent location ID of the Zoom Room."
								}
							]
						},
						"description": "Zoom Rooms is a software-based room system that provides an integrated experience for audio conferencing, wireless screen sharing and video conferencing. Use this API to list all the existing [Zoom Rooms](https://support.zoom.us/hc/en-us/articles/207483343-Getting-Started-with-Zoom-Rooms) in a Zoom account.<br><br>\n**Prerequisites:**<br>\n* Pro or a higher plan with [Zoom Room](https://zoom.us/zoomrooms) license.<br>\n**Scopes**: `room:read:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nA list of Zoom Rooms returned successfully.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/rooms?status=InMeeting&type=ZoomRoom&unassigned_rooms=false&page_size=30&next_page_token=culpa velit reprehenderit&location_id=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms"
									],
									"query": [
										{
											"key": "status",
											"value": "InMeeting"
										},
										{
											"key": "type",
											"value": "ZoomRoom"
										},
										{
											"key": "unassigned_rooms",
											"value": "false"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "location_id",
											"value": "culpa velit reprehenderit"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"page_size\": 30,\n \"rooms\": [\n  {\n   \"id\": \"387434ryewr334\",\n   \"name\": \"testZoomRooms\",\n   \"activation_code\": \"1200\",\n   \"status\": \"Available\"\n  },\n  {\n   \"id\": \"4ryewr33sjfkds\",\n   \"name\": \"MyZoomRooms\",\n   \"activation_code\": \"eu34355empor\",\n   \"status\": \"Offline\"\n  }\n ]\n}"
						}
					]
				},
				{
					"name": "Add a Zoom Room",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "ullamco laborum magna dolor",
									"description": "(Required) Name of the Zoom Room.",
									"type": "text"
								},
								{
									"key": "type",
									"value": "ZoomRoom",
									"description": "(Required) Type of the Zoom Room.  (This can only be one of ZoomRoom,SchedulingDisplayOnly,DigitalSignageOnly)",
									"type": "text"
								},
								{
									"key": "location_id",
									"value": "irure ex anim",
									"description": "**Optional**<br>Location ID of the lowest level location in the [location hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) where the Zoom Room is to be added. For instance if the structure of the location hierarchy is set up as “country, states, city, campus, building, floor”, a room can only be added under the floor level location. \n\nThis ID can be retrieved from the [List Zoom Room Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/rooms",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rooms"
							]
						},
						"description": "Use this API to [add a Zoom Room](https://support.zoom.us/hc/en-us/articles/202822279-Add-Zoom-Rooms-on-Web-Portal) to a Zoom account.<br><br>\n**Prerequisites:**<br>\n* Pro or a higher plan with [Zoom Room](https://zoom.us/zoomrooms) license.<br>\n**Scopes**: `room:write:admin`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `201` **Created**<br>\nZoom Room added successfully.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "ullamco laborum magna dolor",
											"description": "(Required) Name of the Zoom Room.",
											"type": "text"
										},
										{
											"key": "type",
											"value": "ZoomRoom",
											"description": "(Required) Type of the Zoom Room.  (This can only be one of ZoomRoom,SchedulingDisplayOnly,DigitalSignageOnly)",
											"type": "text"
										},
										{
											"key": "location_id",
											"value": "irure ex anim",
											"description": "**Optional**<br>Location ID of the lowest level location in the [location hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) where the Zoom Room is to be added. For instance if the structure of the location hierarchy is set up as “country, states, city, campus, building, floor”, a room can only be added under the floor level location. \n\nThis ID can be retrieved from the [List Zoom Room Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rooms",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"abcdefgg\",\n \"name\": \"Cool ZoomRoom\",\n \"type\": \"SchedulingDisplayOnly\",\n \"location_id\": \"434gfg0is\",\n \"room_id\": \"dhsfd8287rgf\"\n}"
						},
						{
							"name": "**HTTP Status Code:** `400` **Bad Request**<br><br>\n**Error Code:** `200`<br> Zoom Room subscription not found. Try again after purchasing a Zoom Room subscription.<br>\nAt least one normal Zoom Rooms required.<br><br>\n**Error Code:** `300`<br>\nInvalid par",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "ullamco laborum magna dolor",
											"description": "(Required) Name of the Zoom Room.",
											"type": "text"
										},
										{
											"key": "type",
											"value": "ZoomRoom",
											"description": "(Required) Type of the Zoom Room.  (This can only be one of ZoomRoom,SchedulingDisplayOnly,DigitalSignageOnly)",
											"type": "text"
										},
										{
											"key": "location_id",
											"value": "irure ex anim",
											"description": "**Optional**<br>Location ID of the lowest level location in the [location hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) where the Zoom Room is to be added. For instance if the structure of the location hierarchy is set up as “country, states, city, campus, building, floor”, a room can only be added under the floor level location. \n\nThis ID can be retrieved from the [List Zoom Room Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rooms",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n\n**Error Code:** `4801`<br>\nLocation not found:{location_id}",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "ullamco laborum magna dolor",
											"description": "(Required) Name of the Zoom Room.",
											"type": "text"
										},
										{
											"key": "type",
											"value": "ZoomRoom",
											"description": "(Required) Type of the Zoom Room.  (This can only be one of ZoomRoom,SchedulingDisplayOnly,DigitalSignageOnly)",
											"type": "text"
										},
										{
											"key": "location_id",
											"value": "irure ex anim",
											"description": "**Optional**<br>Location ID of the lowest level location in the [location hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) where the Zoom Room is to be added. For instance if the structure of the location hierarchy is set up as “country, states, city, campus, building, floor”, a room can only be added under the floor level location. \n\nThis ID can be retrieved from the [List Zoom Room Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rooms",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `429` **Too Many Requests**<br>\n\n**Error Code:** `132`<br>\nToo many concurrent requests. Try again later.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "ullamco laborum magna dolor",
											"description": "(Required) Name of the Zoom Room.",
											"type": "text"
										},
										{
											"key": "type",
											"value": "ZoomRoom",
											"description": "(Required) Type of the Zoom Room.  (This can only be one of ZoomRoom,SchedulingDisplayOnly,DigitalSignageOnly)",
											"type": "text"
										},
										{
											"key": "location_id",
											"value": "irure ex anim",
											"description": "**Optional**<br>Location ID of the lowest level location in the [location hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) where the Zoom Room is to be added. For instance if the structure of the location hierarchy is set up as “country, states, city, campus, building, floor”, a room can only be added under the floor level location. \n\nThis ID can be retrieved from the [List Zoom Room Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rooms",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Check-in or check-out of a Zoom Room",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "method",
									"value": "minim id cillum Ut",
									"description": "The value of this field can be one of the following:<br>\n* zoomroom.check_in\n* zoomroom.check_out",
									"type": "text"
								},
								{
									"key": "params",
									"value": "{\"event_id\":\"in et\",\"change_key\":\"ea incididunt dolor non\",\"calendar_id\":\"velit\",\"resource_email\":\"AMKjnfGU9Zdi3RA@AcBElqQBHNQcNPfkvY.ysh\"}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/rooms/:id/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rooms",
								":id",
								"events"
							],
							"variable": [
								{
									"key": "id",
									"value": "culpa velit reprehenderit",
									"description": "(Required) Room ID"
								}
							]
						},
						"description": "The Zoom Rooms check-in feature helps maximize your room utilization. Use this API to either **check in** and confirm that you are utilizing the room reservation or to **check out** of the room so that the room gets released from the scheduled meeting and will be made available for others to use. Learn more from the [Using the Zoom Rooms check-in feature](https://support.zoom.us/hc/en-us/articles/360001147163-Using-the-Zoom-Rooms-check-in-feature) guide. \n\n**Prerequisites:**\n* [Zoom Rooms](https://support.zoom.us/hc/en-us/articles/207483343-Getting-started-with-Zoom-Rooms#:~:text=Zoom%20Rooms%20is%20a%20software,or%20from%20their%20mobile%20device) must have been set up for use for the account and must be online. \n* You must have access to the Calendar Integration APIs (either Microsoft Exchange or Google Calendar APIs) to get calendar information associated with the Room.\n\n**Scope:** `room:write:admin`"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `202` **Accepted**<br>\nRequest processed successfully.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "method",
											"value": "minim id cillum Ut",
											"description": "The value of this field can be one of the following:<br>\n* zoomroom.check_in\n* zoomroom.check_out",
											"type": "text"
										},
										{
											"key": "params",
											"value": "{\"event_id\":\"in et\",\"change_key\":\"ea incididunt dolor non\",\"calendar_id\":\"velit\",\"resource_email\":\"AMKjnfGU9Zdi3RA@AcBElqQBHNQcNPfkvY.ysh\"}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rooms/:id/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										":id",
										"events"
									],
									"variable": [
										{
											"key": "id",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Room ID"
										}
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						},
						{
							"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `300`<br>\n* Zoom Room is offline. Please ensure that the Zoom Room is online before checking in or checking out.\n* Invalid parameters.\n\n\n",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "method",
											"value": "minim id cillum Ut",
											"description": "The value of this field can be one of the following:<br>\n* zoomroom.check_in\n* zoomroom.check_out",
											"type": "text"
										},
										{
											"key": "params",
											"value": "{\"event_id\":\"in et\",\"change_key\":\"ea incididunt dolor non\",\"calendar_id\":\"velit\",\"resource_email\":\"AMKjnfGU9Zdi3RA@AcBElqQBHNQcNPfkvY.ysh\"}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rooms/:id/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										":id",
										"events"
									],
									"variable": [
										{
											"key": "id",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Room ID"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `1012` <br>\nRoom does not exist: {roomId}.\n\n\n",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "method",
											"value": "minim id cillum Ut",
											"description": "The value of this field can be one of the following:<br>\n* zoomroom.check_in\n* zoomroom.check_out",
											"type": "text"
										},
										{
											"key": "params",
											"value": "{\"event_id\":\"in et\",\"change_key\":\"ea incididunt dolor non\",\"calendar_id\":\"velit\",\"resource_email\":\"AMKjnfGU9Zdi3RA@AcBElqQBHNQcNPfkvY.ysh\"}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rooms/:id/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										":id",
										"events"
									],
									"variable": [
										{
											"key": "id",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Room ID"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "List digital signage contents",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rooms/digital_signage?type=culpa velit reprehenderit&folder_id=culpa velit reprehenderit&page_size=30&next_page_token=culpa velit reprehenderit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rooms",
								"digital_signage"
							],
							"query": [
								{
									"key": "type",
									"value": "culpa velit reprehenderit",
									"description": "Specify the type of digital signane resource. The value can be one of the following:\n* `content`: Returns information about content files.\n* `folder`: Returns information about the folder where the content files are located."
								},
								{
									"key": "folder_id",
									"value": "culpa velit reprehenderit",
									"description": "Unique identifier of the folder where the content is located. Provide this field if you would like to filter the response by contents that are only available in a specific folder."
								},
								{
									"key": "page_size",
									"value": "30",
									"description": "The number of records returned within a single API call."
								},
								{
									"key": "next_page_token",
									"value": "culpa velit reprehenderit",
									"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
								}
							]
						},
						"description": "Use this API to return information about a Zoom account's [Zoom Rooms digital signage content](https://support.zoom.us/hc/en-us/articles/360000030683-Zoom-Rooms-digital-signage). You can also view this content in the **Room Management** section's [**Digital Signage Content**](https://zoom.us/digitalsignage#/) tab in the Zoom web portal. \n\n**Scopes:** `room:read:admin` \n\n**Prerequisites:** \n* A Pro or a higher account with Zoom Rooms. \n* Existing content in the **Digital Signage Content** tab."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200` **OK**<br>\nList returned.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/rooms/digital_signage?type=culpa velit reprehenderit&folder_id=culpa velit reprehenderit&page_size=30&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										"digital_signage"
									],
									"query": [
										{
											"key": "type",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "folder_id",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"total_records\": 2,\n \"page_size\": 30,\n \"next_page_token\": \"\",\n \"contents\": [\n  {\n   \"id\": \"sWbbbb535LQ\",\n   \"name\": \"Marketing_Folder\"\n  },\n  {\n   \"id\": \"9N333khdhfgiafg\",\n   \"name\": \"BackgroundImage.png\"\n  }\n ]\n}"
						},
						{
							"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n* Zoom Room subscription was not found. Try again after purchasing a Zoom Room subscription.\n* Access restricted.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/rooms/digital_signage?type=culpa velit reprehenderit&folder_id=culpa velit reprehenderit&page_size=30&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										"digital_signage"
									],
									"query": [
										{
											"key": "type",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "folder_id",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Update E911 digital signage",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "method",
									"value": "zoomroom.emergency_alert_displayed",
									"type": "text"
								},
								{
									"key": "params",
									"value": "{\"content\":\"non laborum Ut eiusmod\",\"target_ids\":[\"enim\"],\"target_type\":\"account\"}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/rooms/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rooms",
								"events"
							]
						},
						"description": "Display or hide E911 emergency alert text content from [Zoom Rooms digital signage](https://support.zoom.us/hc/en-us/articles/360000030683-Zoom-Rooms-digital-signage).\n\n**Scope:** `room:write:admin`\n\n**Prerequisites:**<br>\n* [Zoom Rooms](https://zoom.us/zoomrooms/software) 5.3.0 or higher\n* Zoom Rooms digital signage must be [enabled](https://support.zoom.us/hc/en-us/articles/360000030683-Zoom-Rooms-Digital-Signage#h_767fbb33-82a8-45a8-8392-a1bfa9687edd)\n"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `202` <br>",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "method",
											"value": "zoomroom.emergency_alert_displayed",
											"type": "text"
										},
										{
											"key": "params",
											"value": "{\"content\":\"non laborum Ut eiusmod\",\"target_ids\":[\"enim\"],\"target_type\":\"account\"}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rooms/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										"events"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"event_id\": \"6354hgfsdj34\"\n}"
						},
						{
							"name": "**HTTP Status Code:** `400` <br>\n\n**Error Code:** `200` <br> Access restricted. <br><br>\n**Error Code:** `300`\nEvent id is required.<br>\nInvalid value submitted for Target Ids. Provide a valid Target Id associated with the Target type.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "method",
											"value": "zoomroom.emergency_alert_displayed",
											"type": "text"
										},
										{
											"key": "params",
											"value": "{\"content\":\"non laborum Ut eiusmod\",\"target_ids\":[\"enim\"],\"target_type\":\"account\"}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rooms/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rooms",
										"events"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "chat",
			"item": [
				{
					"name": "users",
					"item": [
						{
							"name": "{user Id}",
							"item": [
								{
									"name": "messages",
									"item": [
										{
											"name": "{message Id}",
											"item": [
												{
													"name": "Update a message",
													"request": {
														"auth": {
															"type": "oauth2"
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "multipart/form-data"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "message",
																	"value": "consectetur et irure",
																	"description": "The edited message.",
																	"type": "text"
																},
																{
																	"key": "to_contact",
																	"value": "ad esse fugiat ex",
																	"description": "The email address of the contact to whom the message was sent.<br>\nYou must provide either `to_contact` or `to_channel` parameter in the API request.",
																	"type": "text"
																},
																{
																	"key": "to_channel",
																	"value": "minim",
																	"description": "The Channel ID of the channel where you sent the message.<br>You must provide either `to_contact` or `to_channel` parameter in the API request.\n Channel ID can be retrieved from List User's Channels API. ",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/chat/users/:userId/messages/:messageId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"chat",
																"users",
																":userId",
																"messages",
																":messageId"
															],
															"variable": [
																{
																	"key": "messageId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Message ID: Unique Identifier of the message."
																},
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														},
														"description": "Use this API to edit a chat message that you previously sent to either a contact or a channel in Zoom by providing the ID of the message as the value of the `messageId` parameter. You can get the ID from the **List User's Chat Messages** API. Additionally, as a query parameter, you must provide either the contact's **email address** of the contact or the **Channel ID** of the channel where the message was sent.\n\nFor user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\n<p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note:</b> For an <b>account-level</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>, this API can only be used on behalf of a user who is assigned with a <a href=\"https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit.\"> role</a> that has the <b>Edit</b> permission for <b>Chat Messages</b>.</p>\n\n**Scope:** `chat_message:write`,`chat_message:write:admin`\t<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
													},
													"response": [
														{
															"name": "**HTTP Status Code:** `204`<br>\nMessage updated successfully.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "formdata",
																	"formdata": [
																		{
																			"key": "message",
																			"value": "consectetur et irure",
																			"description": "The edited message.",
																			"type": "text"
																		},
																		{
																			"key": "to_contact",
																			"value": "ad esse fugiat ex",
																			"description": "The email address of the contact to whom the message was sent.<br>\nYou must provide either `to_contact` or `to_channel` parameter in the API request.",
																			"type": "text"
																		},
																		{
																			"key": "to_channel",
																			"value": "minim",
																			"description": "The Channel ID of the channel where you sent the message.<br>You must provide either `to_contact` or `to_channel` parameter in the API request.\n Channel ID can be retrieved from List User's Channels API. ",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/messages/:messageId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"messages",
																		":messageId"
																	],
																	"variable": [
																		{
																			"key": "messageId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Message ID: Unique Identifier of the message."
																		},
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "No Content",
															"code": 204,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "**HTTP Status Code:** `400`<br>\nBar request<br>\n**Error Code:** `200`<br>\nOnly the sender of this message can make updates.<br>\n**Error Code:** `300`<br>\nMessage does not exist: $messageId <br> Must provide either contact or channel parameter.\n",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "formdata",
																	"formdata": [
																		{
																			"key": "message",
																			"value": "consectetur et irure",
																			"description": "The edited message.",
																			"type": "text"
																		},
																		{
																			"key": "to_contact",
																			"value": "ad esse fugiat ex",
																			"description": "The email address of the contact to whom the message was sent.<br>\nYou must provide either `to_contact` or `to_channel` parameter in the API request.",
																			"type": "text"
																		},
																		{
																			"key": "to_channel",
																			"value": "minim",
																			"description": "The Channel ID of the channel where you sent the message.<br>You must provide either `to_contact` or `to_channel` parameter in the API request.\n Channel ID can be retrieved from List User's Channels API. ",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/messages/:messageId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"messages",
																		":messageId"
																	],
																	"variable": [
																		{
																			"key": "messageId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Message ID: Unique Identifier of the message."
																		},
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "**HTTP Status Code:** `404`<br>\n**Error Code**: `1001`<br>\nUser does not exist: $to_contact.<br>\n**Error Code**: `4130`<br>\nChannel does not exist: $to_channel.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "formdata",
																	"formdata": [
																		{
																			"key": "message",
																			"value": "consectetur et irure",
																			"description": "The edited message.",
																			"type": "text"
																		},
																		{
																			"key": "to_contact",
																			"value": "ad esse fugiat ex",
																			"description": "The email address of the contact to whom the message was sent.<br>\nYou must provide either `to_contact` or `to_channel` parameter in the API request.",
																			"type": "text"
																		},
																		{
																			"key": "to_channel",
																			"value": "minim",
																			"description": "The Channel ID of the channel where you sent the message.<br>You must provide either `to_contact` or `to_channel` parameter in the API request.\n Channel ID can be retrieved from List User's Channels API. ",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/messages/:messageId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"messages",
																		":messageId"
																	],
																	"variable": [
																		{
																			"key": "messageId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Message ID: Unique Identifier of the message."
																		},
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Delete a message",
													"request": {
														"auth": {
															"type": "oauth2"
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/chat/users/:userId/messages/:messageId?to_contact=culpa velit reprehenderit&to_channel=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"chat",
																"users",
																":userId",
																"messages",
																":messageId"
															],
															"query": [
																{
																	"key": "to_contact",
																	"value": "culpa velit reprehenderit",
																	"description": "The userId or email address of a chat contact to whom you previously sent the message.\n\nNote: You must provide either `to_contact` or `to_channel` as a query parameter to delete a message that was previously sent to either an individual or a chat channel respectively. "
																},
																{
																	"key": "to_channel",
																	"value": "culpa velit reprehenderit",
																	"description": "The channel Id of the channel where you would like to send the message.\n\nYou must provide either `to_contact` or `to_channel` as a query parameter to delete a message that was previously sent to either an individual or a chat channel "
																}
															],
															"variable": [
																{
																	"key": "messageId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Message ID"
																},
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														},
														"description": "Delete a chat message that you previously sent to a contact or a channel. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nIn the query parameter, you must provide either of the following:\n\n* `to_contact`: The email address of the contact to whom you sent the message. Use this parameter to delete a message sent to an individual contact in Zoom.\n* `to_channel`: The channel ID of the channel where you sent the message. Use this parameter to delete a message sent to a channel in Zoom.\n\n\n\n**Scopes:** `chat_message:write`, `chat_message:write:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n<p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note:</b> For an <b>account-level</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>, this API can only be used on behalf of a user who is assigned with a <a href=\"https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit.\"> role</a> that has the <b>Edit</b> permission for <b>Chat Messages</b>.</p>"
													},
													"response": [
														{
															"name": "**HTTP Status Code:** `204`<br>\nMessage deleted.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/messages/:messageId?to_contact=culpa velit reprehenderit&to_channel=culpa velit reprehenderit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"messages",
																		":messageId"
																	],
																	"query": [
																		{
																			"key": "to_contact",
																			"value": "culpa velit reprehenderit"
																		},
																		{
																			"key": "to_channel",
																			"value": "culpa velit reprehenderit"
																		}
																	],
																	"variable": [
																		{
																			"key": "messageId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Message ID"
																		},
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "No Content",
															"code": 204,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "**HTTP Status Code:** `400`<br>\nBad request.<br>\n**Error Code:** `200`<br>\nThe contact or the channel parameter provided is invalid.<br>\nOnly the sender of this message can make updates.<br>\n**Error Code:** `300`<br>Channel does not exist: $messageId<br>M",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/messages/:messageId?to_contact=culpa velit reprehenderit&to_channel=culpa velit reprehenderit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"messages",
																		":messageId"
																	],
																	"query": [
																		{
																			"key": "to_contact",
																			"value": "culpa velit reprehenderit"
																		},
																		{
																			"key": "to_channel",
																			"value": "culpa velit reprehenderit"
																		}
																	],
																	"variable": [
																		{
																			"key": "messageId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Message ID"
																		},
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "**HTTP Status Code:** `404`<br>\n**Error Code**: `1001`<br>\nUser does not exist: $to_contact.<br>\n**Error Code**: `4130`<br>\nChannel does not exist: $to_channel.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/messages/:messageId?to_contact=culpa velit reprehenderit&to_channel=culpa velit reprehenderit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"messages",
																		":messageId"
																	],
																	"query": [
																		{
																			"key": "to_contact",
																			"value": "culpa velit reprehenderit"
																		},
																		{
																			"key": "to_channel",
																			"value": "culpa velit reprehenderit"
																		}
																	],
																	"variable": [
																		{
																			"key": "messageId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Message ID"
																		},
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Get a message",
													"request": {
														"auth": {
															"type": "oauth2"
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/chat/users/:userId/messages/:messageId?to_contact=culpa velit reprehenderit&to_channel=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"chat",
																"users",
																":userId",
																"messages",
																":messageId"
															],
															"query": [
																{
																	"key": "to_contact",
																	"value": "culpa velit reprehenderit",
																	"description": "The `userId` or email address of a Zoom Chat contact to whom you sent the message.\\n\\n**Note:** You must use this query parameter to delete a message sent to a Zoom Chat contact. "
																},
																{
																	"key": "to_channel",
																	"value": "culpa velit reprehenderit",
																	"description": "The `channelId` of the Zoom Chat channel where sent the message.\\n\\n**Note:** You must use this query parameter to delete a message sent to Zoom Chat channel."
																}
															],
															"variable": [
																{
																	"key": "messageId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Message ID"
																},
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														},
														"description": "Get a chat message previously sent to a contact or a channel. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nYou must provide one of the following query parameters:<br>\n* `to_contact` — The email address of the Zoom contact to whom you sent the message.\n* `to_channel` — The ID of the Zoom channel where you sent the message.\n\n**Scopes:** `chat_message:read`, `chat_message:read:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n<p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note:</b> For an <b>account-level</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>, you can only use this API for a user assigned <a href=\"https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit.\">the <b>Edit</b> permission for the <b>Chat message</b> role setting</a>.</p>"
													},
													"response": [
														{
															"name": "**HTTP Status Code:** `204`<br>\nGet message successfully.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/messages/:messageId?to_contact=culpa velit reprehenderit&to_channel=culpa velit reprehenderit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"messages",
																		":messageId"
																	],
																	"query": [
																		{
																			"key": "to_contact",
																			"value": "culpa velit reprehenderit"
																		},
																		{
																			"key": "to_channel",
																			"value": "culpa velit reprehenderit"
																		}
																	],
																	"variable": [
																		{
																			"key": "messageId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Message ID"
																		},
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "No Content",
															"code": 204,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"id\": \"{4C6A11E6-0145-430F-BC4D-937886AE559D}\",\n \"message\": \"reply_file\",\n \"sender\": \"jemsa@example.com\",\n \"date_time\": \"2021-05-31T07:34:50Z\",\n \"timestamp\": 1622446490991,\n \"reply_main_message_id\": \"{52400403-DA96-4D7B-9E05-C1C399FF0725}\",\n \"reply_main_message_timestamp\": 1622446481695,\n \"reactions\": [\n  {\n   \"emoji\": \"U+ 00000023-0000fe0f\",\n   \"total_count\": 1\n  }\n ]\n}"
														},
														{
															"name": "**HTTP Status Code:** `400`<br>\nBad request.<br>\n**Error Code:** `200`<br>\nThe contact or the channel parameter provided is invalid.<br>\nOnly the sender of this message can get it.<br>\n**Error Code:** `300`<br>Channel does not exist: $messageId<br>Must pr",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/messages/:messageId?to_contact=culpa velit reprehenderit&to_channel=culpa velit reprehenderit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"messages",
																		":messageId"
																	],
																	"query": [
																		{
																			"key": "to_contact",
																			"value": "culpa velit reprehenderit"
																		},
																		{
																			"key": "to_channel",
																			"value": "culpa velit reprehenderit"
																		}
																	],
																	"variable": [
																		{
																			"key": "messageId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Message ID"
																		},
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "**HTTP Status Code:** `404`<br>\n**Error Code**: `1001`<br>\nUser does not exist: $to_contact.<br>\n**Error Code**: `4130`<br>\nChannel does not exist: $to_channel.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/messages/:messageId?to_contact=culpa velit reprehenderit&to_channel=culpa velit reprehenderit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"messages",
																		":messageId"
																	],
																	"query": [
																		{
																			"key": "to_contact",
																			"value": "culpa velit reprehenderit"
																		},
																		{
																			"key": "to_channel",
																			"value": "culpa velit reprehenderit"
																		}
																	],
																	"variable": [
																		{
																			"key": "messageId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Message ID"
																		},
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Mark message read or unread",
													"request": {
														"auth": {
															"type": "oauth2"
														},
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "multipart/form-data"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "timestamp",
																	"value": "-65626649",
																	"description": "The marking message's timestamp.",
																	"type": "text"
																},
																{
																	"key": "to_contact",
																	"value": "aliquip sed labore",
																	"description": "The email address of the contact to whom the message was sent.<br>\nYou must provide either a `to_contact` or `to_channel` parameter in the API request.",
																	"type": "text"
																},
																{
																	"key": "to_channel",
																	"value": "ut culpa incididunt",
																	"description": "The Channel ID of the channel where you sent the message.<br>You must provide either a `to_contact` or `to_channel` parameter in the API request.\n You can retrieve the Channel ID using the [List User's Channels API](https://marketplace.zoom.us/docs/api-reference/zoom-api/chat-channels/getchannels). ",
																	"type": "text"
																},
																{
																	"key": "action",
																	"value": "incididunt et ex veniam",
																	"description": "Values include <br>`read` or `unread`.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/chat/users/:userId/messages/:messageId/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"chat",
																"users",
																":userId",
																"messages",
																":messageId",
																"status"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the user."
																},
																{
																	"key": "messageId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the message."
																}
															]
														},
														"description": "Use this API to mark a chat message as read or unread. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter. \n\n**Note:** \n\nFor an [account-level OAuth app](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app), this API can only be used on behalf of a [user assigned to a role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management) with the \"**Edit**\" permission for **Chat Messages**. \n\n**Scopes:** `chat_message:write`, `chat_message:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
													},
													"response": [
														{
															"name": "**HTTP Status Code:** `204`<br>\nMessage marked successfully.",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "formdata",
																	"formdata": [
																		{
																			"key": "timestamp",
																			"value": "-65626649",
																			"description": "The marking message's timestamp.",
																			"type": "text"
																		},
																		{
																			"key": "to_contact",
																			"value": "aliquip sed labore",
																			"description": "The email address of the contact to whom the message was sent.<br>\nYou must provide either a `to_contact` or `to_channel` parameter in the API request.",
																			"type": "text"
																		},
																		{
																			"key": "to_channel",
																			"value": "ut culpa incididunt",
																			"description": "The Channel ID of the channel where you sent the message.<br>You must provide either a `to_contact` or `to_channel` parameter in the API request.\n You can retrieve the Channel ID using the [List User's Channels API](https://marketplace.zoom.us/docs/api-reference/zoom-api/chat-channels/getchannels). ",
																			"type": "text"
																		},
																		{
																			"key": "action",
																			"value": "incididunt et ex veniam",
																			"description": "Values include <br>`read` or `unread`.",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/messages/:messageId/status",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"messages",
																		":messageId",
																		"status"
																	],
																	"variable": [
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Unique identifier of the user."
																		},
																		{
																			"key": "messageId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Unique identifier of the message."
																		}
																	]
																}
															},
															"status": "No Content",
															"code": 204,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "**HTTP Status Code:** `400`<br>\nBar request<br>\n**Error Code:** `300`<br>\nMessage does not exist: $messageId <br> Must provide either contact or channel parameter.\n",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "formdata",
																	"formdata": [
																		{
																			"key": "timestamp",
																			"value": "-65626649",
																			"description": "The marking message's timestamp.",
																			"type": "text"
																		},
																		{
																			"key": "to_contact",
																			"value": "aliquip sed labore",
																			"description": "The email address of the contact to whom the message was sent.<br>\nYou must provide either a `to_contact` or `to_channel` parameter in the API request.",
																			"type": "text"
																		},
																		{
																			"key": "to_channel",
																			"value": "ut culpa incididunt",
																			"description": "The Channel ID of the channel where you sent the message.<br>You must provide either a `to_contact` or `to_channel` parameter in the API request.\n You can retrieve the Channel ID using the [List User's Channels API](https://marketplace.zoom.us/docs/api-reference/zoom-api/chat-channels/getchannels). ",
																			"type": "text"
																		},
																		{
																			"key": "action",
																			"value": "incididunt et ex veniam",
																			"description": "Values include <br>`read` or `unread`.",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/messages/:messageId/status",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"messages",
																		":messageId",
																		"status"
																	],
																	"variable": [
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Unique identifier of the user."
																		},
																		{
																			"key": "messageId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Unique identifier of the message."
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "**HTTP Status Code:** `404`<br>\n**Error Code**: `1001`<br>\nUser does not exist: $to_contact.<br>\n**Error Code**: `4130`<br>\nChannel does not exist: $to_channel.",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "formdata",
																	"formdata": [
																		{
																			"key": "timestamp",
																			"value": "-65626649",
																			"description": "The marking message's timestamp.",
																			"type": "text"
																		},
																		{
																			"key": "to_contact",
																			"value": "aliquip sed labore",
																			"description": "The email address of the contact to whom the message was sent.<br>\nYou must provide either a `to_contact` or `to_channel` parameter in the API request.",
																			"type": "text"
																		},
																		{
																			"key": "to_channel",
																			"value": "ut culpa incididunt",
																			"description": "The Channel ID of the channel where you sent the message.<br>You must provide either a `to_contact` or `to_channel` parameter in the API request.\n You can retrieve the Channel ID using the [List User's Channels API](https://marketplace.zoom.us/docs/api-reference/zoom-api/chat-channels/getchannels). ",
																			"type": "text"
																		},
																		{
																			"key": "action",
																			"value": "incididunt et ex veniam",
																			"description": "Values include <br>`read` or `unread`.",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/messages/:messageId/status",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"messages",
																		":messageId",
																		"status"
																	],
																	"variable": [
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Unique identifier of the user."
																		},
																		{
																			"key": "messageId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Unique identifier of the message."
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "React to a chat message",
													"request": {
														"auth": {
															"type": "oauth2"
														},
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "multipart/form-data"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "to_contact",
																	"value": "consectetur ut",
																	"description": "The email address of the contact to whom the message was sent. You must provide either the `to_contact` or the `to_channel` parameter in the API request.\n\nTo get a channel's ID, use the [List User's Channels API](https://marketplace.zoom.us/docs/api-reference/zoom-api/chat-channels/getchannels).",
																	"type": "text"
																},
																{
																	"key": "to_channel",
																	"value": "nisi dolore esse",
																	"description": "The channel's ID where you sent the message. You must provide either the `to_contact` or the `to_channel` parameter in the API request.\n\nTo get a channel's ID, use the [List User's Channels API](https://marketplace.zoom.us/docs/api-reference/zoom-api/chat-channels/getchannels).",
																	"type": "text"
																},
																{
																	"key": "action",
																	"value": "add",
																	"description": "The action to perform with the message:\n* `add` — Add an emoji reaction.\n* `remove` — Remove an emoji reaction. (This can only be one of add,remove)",
																	"type": "text"
																},
																{
																	"key": "emoji",
																	"value": "Lorem nostrud",
																	"description": "The emoji's unicode value, in `UTF-32` format. For more information, read the [Emojipedia](https://emojipedia.org/emoji-modifier-sequence/) documentation.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/chat/users/:userId/messages/:messageId/emoji_reactions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"chat",
																"users",
																":userId",
																"messages",
																":messageId",
																"emoji_reactions"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The user's unique ID."
																},
																{
																	"key": "messageId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The message's unique ID."
																}
															]
														},
														"description": "Use this API to react (add or remove) to a chat message with an emoji.\n\nFor an **account-level** [OAuth app](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app), this API can only be used on behalf of a user who is assigned with a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit.) that has the **Edit** permission for **Chat Messages**.\n\n**Scopes:** `chat_message:write`, `chat_message:write:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
													},
													"response": [
														{
															"name": "**HTTP Status Code:** `204`<br>\nMessage reacted successfully.",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "formdata",
																	"formdata": [
																		{
																			"key": "to_contact",
																			"value": "consectetur ut",
																			"description": "The email address of the contact to whom the message was sent. You must provide either the `to_contact` or the `to_channel` parameter in the API request.\n\nTo get a channel's ID, use the [List User's Channels API](https://marketplace.zoom.us/docs/api-reference/zoom-api/chat-channels/getchannels).",
																			"type": "text"
																		},
																		{
																			"key": "to_channel",
																			"value": "nisi dolore esse",
																			"description": "The channel's ID where you sent the message. You must provide either the `to_contact` or the `to_channel` parameter in the API request.\n\nTo get a channel's ID, use the [List User's Channels API](https://marketplace.zoom.us/docs/api-reference/zoom-api/chat-channels/getchannels).",
																			"type": "text"
																		},
																		{
																			"key": "action",
																			"value": "add",
																			"description": "The action to perform with the message:\n* `add` — Add an emoji reaction.\n* `remove` — Remove an emoji reaction. (This can only be one of add,remove)",
																			"type": "text"
																		},
																		{
																			"key": "emoji",
																			"value": "Lorem nostrud",
																			"description": "The emoji's unicode value, in `UTF-32` format. For more information, read the [Emojipedia](https://emojipedia.org/emoji-modifier-sequence/) documentation.",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/messages/:messageId/emoji_reactions",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"messages",
																		":messageId",
																		"emoji_reactions"
																	],
																	"variable": [
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) The user's unique ID."
																		},
																		{
																			"key": "messageId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) The message's unique ID."
																		}
																	]
																}
															},
															"status": "No Content",
															"code": 204,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `300`<br>\nMessage does not exist: $messageId <br> Must provide either contact or channel parameter.\n",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "formdata",
																	"formdata": [
																		{
																			"key": "to_contact",
																			"value": "consectetur ut",
																			"description": "The email address of the contact to whom the message was sent. You must provide either the `to_contact` or the `to_channel` parameter in the API request.\n\nTo get a channel's ID, use the [List User's Channels API](https://marketplace.zoom.us/docs/api-reference/zoom-api/chat-channels/getchannels).",
																			"type": "text"
																		},
																		{
																			"key": "to_channel",
																			"value": "nisi dolore esse",
																			"description": "The channel's ID where you sent the message. You must provide either the `to_contact` or the `to_channel` parameter in the API request.\n\nTo get a channel's ID, use the [List User's Channels API](https://marketplace.zoom.us/docs/api-reference/zoom-api/chat-channels/getchannels).",
																			"type": "text"
																		},
																		{
																			"key": "action",
																			"value": "add",
																			"description": "The action to perform with the message:\n* `add` — Add an emoji reaction.\n* `remove` — Remove an emoji reaction. (This can only be one of add,remove)",
																			"type": "text"
																		},
																		{
																			"key": "emoji",
																			"value": "Lorem nostrud",
																			"description": "The emoji's unicode value, in `UTF-32` format. For more information, read the [Emojipedia](https://emojipedia.org/emoji-modifier-sequence/) documentation.",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/messages/:messageId/emoji_reactions",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"messages",
																		":messageId",
																		"emoji_reactions"
																	],
																	"variable": [
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) The user's unique ID."
																		},
																		{
																			"key": "messageId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) The message's unique ID."
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "**HTTP Status Code:** `404`<br>\n**Error Code**: `1001`<br>\nUser does not exist: $to_contact.<br>\n**Error Code**: `4130`<br>\nChannel does not exist: $to_channel.",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "formdata",
																	"formdata": [
																		{
																			"key": "to_contact",
																			"value": "consectetur ut",
																			"description": "The email address of the contact to whom the message was sent. You must provide either the `to_contact` or the `to_channel` parameter in the API request.\n\nTo get a channel's ID, use the [List User's Channels API](https://marketplace.zoom.us/docs/api-reference/zoom-api/chat-channels/getchannels).",
																			"type": "text"
																		},
																		{
																			"key": "to_channel",
																			"value": "nisi dolore esse",
																			"description": "The channel's ID where you sent the message. You must provide either the `to_contact` or the `to_channel` parameter in the API request.\n\nTo get a channel's ID, use the [List User's Channels API](https://marketplace.zoom.us/docs/api-reference/zoom-api/chat-channels/getchannels).",
																			"type": "text"
																		},
																		{
																			"key": "action",
																			"value": "add",
																			"description": "The action to perform with the message:\n* `add` — Add an emoji reaction.\n* `remove` — Remove an emoji reaction. (This can only be one of add,remove)",
																			"type": "text"
																		},
																		{
																			"key": "emoji",
																			"value": "Lorem nostrud",
																			"description": "The emoji's unicode value, in `UTF-32` format. For more information, read the [Emojipedia](https://emojipedia.org/emoji-modifier-sequence/) documentation.",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/messages/:messageId/emoji_reactions",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"messages",
																		":messageId",
																		"emoji_reactions"
																	],
																	"variable": [
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) The user's unique ID."
																		},
																		{
																			"key": "messageId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) The message's unique ID."
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "Send a chat message",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "message",
															"value": "exercitation pariatur elit mollit",
															"description": "(Required) The message to be sent.",
															"type": "text"
														},
														{
															"key": "to_contact",
															"value": "dolore eiusmod enim reprehenderit",
															"description": "The email address of the contact to whom you would like to send the message.",
															"type": "text"
														},
														{
															"key": "to_channel",
															"value": "magna Duis",
															"description": "The Channel Id of the channel where you would like to send a message.",
															"type": "text"
														},
														{
															"key": "reply_main_message_id",
															"value": "Duis aliquip eiusmod",
															"description": "The reply message's ID. This field only returns if the message is a reply message.",
															"type": "text"
														},
														{
															"key": "at_items",
															"value": "[{\"start_position\":-4704981,\"end_position\":-19588063,\"at_type\":2,\"at_contact\":\"amet commodo esse Lorem\"},{\"start_position\":99267558,\"end_position\":2108432,\"at_type\":2,\"at_contact\":\"nostrud in esse mollit\"}]",
															"description": "[Chat mentions](https://support.zoom.us/hc/en-us/articles/360037567431-Using-chat-mentions-and-slash-commands) object. Use this object to include mentions in the message that will be sent to  a channel. ",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/chat/users/:userId/messages",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"chat",
														"users",
														":userId",
														"messages"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) "
														}
													]
												},
												"description": "Send chat messages on Zoom to either an individual user who is in your contact list or to a [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) of which you are a member. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nTo send a message to a contact, provide the contact's email address in the `to_contact` field. To send a message to a channel, provide the channel's ID in `to_channel` parameter\n\n**Scopes:** `chat_message:write`, `chat_message:write:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n <p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note:</b> For an <b>account-level</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>, this API can only be used on behalf of a user who is assigned with a <a href=\"https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit.\"> role</a> that has the <b>Edit</b> permission for <b>Chat Messages</b>.</p>"
											},
											"response": [
												{
													"name": "**Status Code:** `201`<br>\nMessage sent.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "message",
																	"value": "ad in amet magna",
																	"description": "(Required) The message to be sent.",
																	"type": "text"
																},
																{
																	"key": "to_contact",
																	"value": "labore nisi proident",
																	"description": "The email address of the contact to whom you would like to send the message.",
																	"type": "text"
																},
																{
																	"key": "to_channel",
																	"value": "et non amet",
																	"description": "The Channel Id of the channel where you would like to send a message.",
																	"type": "text"
																},
																{
																	"key": "reply_main_message_id",
																	"value": "cupidatat ex officia deserunt",
																	"description": "The reply message's ID. This field only returns if the message is a reply message.",
																	"type": "text"
																},
																{
																	"key": "at_items",
																	"value": "[{\"start_position\":51410378,\"end_position\":25928668,\"at_type\":1,\"at_contact\":\"dolor non quis enim nulla\"},{\"start_position\":-12272987,\"end_position\":99547215,\"at_type\":1,\"at_contact\":\"ex Excepteur occaecat mollit\"}]",
																	"description": "[Chat mentions](https://support.zoom.us/hc/en-us/articles/360037567431-Using-chat-mentions-and-slash-commands) object. Use this object to include mentions in the message that will be sent to  a channel. ",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/chat/users/:userId/messages",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"chat",
																"users",
																":userId",
																"messages"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"id\": \"ex35785hgdfjgt\"\n}"
												},
												{
													"name": "**HTTP Status Code:** `400`<br>\nBad request.<br>\n**Error Code:** `5301`<br>\nMessage sending failed.<br>\n**Error Code:** `5402`<br>\nThis only supports replies to a main message.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "message",
																	"value": "ad in amet magna",
																	"description": "(Required) The message to be sent.",
																	"type": "text"
																},
																{
																	"key": "to_contact",
																	"value": "labore nisi proident",
																	"description": "The email address of the contact to whom you would like to send the message.",
																	"type": "text"
																},
																{
																	"key": "to_channel",
																	"value": "et non amet",
																	"description": "The Channel Id of the channel where you would like to send a message.",
																	"type": "text"
																},
																{
																	"key": "reply_main_message_id",
																	"value": "cupidatat ex officia deserunt",
																	"description": "The reply message's ID. This field only returns if the message is a reply message.",
																	"type": "text"
																},
																{
																	"key": "at_items",
																	"value": "[{\"start_position\":51410378,\"end_position\":25928668,\"at_type\":1,\"at_contact\":\"dolor non quis enim nulla\"},{\"start_position\":-12272987,\"end_position\":99547215,\"at_type\":1,\"at_contact\":\"ex Excepteur occaecat mollit\"}]",
																	"description": "[Chat mentions](https://support.zoom.us/hc/en-us/articles/360037567431-Using-chat-mentions-and-slash-commands) object. Use this object to include mentions in the message that will be sent to  a channel. ",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/chat/users/:userId/messages",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"chat",
																"users",
																":userId",
																"messages"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code**: `1001`<br>\nUser does not exist: $to_contact.<br>\n**Error Code**: `4130`<br>\nChannel does not exist: $to_channel.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "message",
																	"value": "ad in amet magna",
																	"description": "(Required) The message to be sent.",
																	"type": "text"
																},
																{
																	"key": "to_contact",
																	"value": "labore nisi proident",
																	"description": "The email address of the contact to whom you would like to send the message.",
																	"type": "text"
																},
																{
																	"key": "to_channel",
																	"value": "et non amet",
																	"description": "The Channel Id of the channel where you would like to send a message.",
																	"type": "text"
																},
																{
																	"key": "reply_main_message_id",
																	"value": "cupidatat ex officia deserunt",
																	"description": "The reply message's ID. This field only returns if the message is a reply message.",
																	"type": "text"
																},
																{
																	"key": "at_items",
																	"value": "[{\"start_position\":51410378,\"end_position\":25928668,\"at_type\":1,\"at_contact\":\"dolor non quis enim nulla\"},{\"start_position\":-12272987,\"end_position\":99547215,\"at_type\":1,\"at_contact\":\"ex Excepteur occaecat mollit\"}]",
																	"description": "[Chat mentions](https://support.zoom.us/hc/en-us/articles/360037567431-Using-chat-mentions-and-slash-commands) object. Use this object to include mentions in the message that will be sent to  a channel. ",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/chat/users/:userId/messages",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"chat",
																"users",
																":userId",
																"messages"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "List user's chat messages",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/chat/users/:userId/messages?to_contact=culpa velit reprehenderit&to_channel=culpa velit reprehenderit&date=1948-05-09&page_size=10&next_page_token=culpa velit reprehenderit&include_deleted_and_edited_message=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"chat",
														"users",
														":userId",
														"messages"
													],
													"query": [
														{
															"key": "to_contact",
															"value": "culpa velit reprehenderit",
															"description": "The email address of a chat contact with whom the current user chatted. Messages that were sent and/or received between the user and the contact is displayed.\n\nNote: You must provide either `contact` or `channel` as a query parameter to retrieve messages either from an individual or a chat channel. "
														},
														{
															"key": "to_channel",
															"value": "culpa velit reprehenderit",
															"description": "The channel Id of a channel inside which the current user had chat conversations. Messages that were sent and/or received between the user and the channel is displayed.\n\nNote: You must provide either `contact` or `channel` as a query parameter to retrieve messages either from an individual or a chat channel. "
														},
														{
															"key": "date",
															"value": "1948-05-09",
															"description": "The query date for which you would like to get the chat messages. This value defaults to the current date."
														},
														{
															"key": "page_size",
															"value": "10",
															"description": "The number of records returned with a single API call. "
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit",
															"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
														},
														{
															"key": "include_deleted_and_edited_message",
															"value": "culpa velit reprehenderit",
															"description": "**Optional** <br>\nSet the value of this field to `true` to include edited and deleted messages in the response."
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) "
														}
													]
												},
												"description": "Use this API to list the current user's chat messages between the user and an individual contact or a chat channel. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nIn the query parameter, you must provide one of the following:\n\n* `to_contact`: The email address of the contact with whom the user conversed by sending or receiving messages.\n* `to_channel`: The channel ID of the channel to or from which the user has sent and/or received messages.\n\n<p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note:</b> For an <b>account-level</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>, this API can only be used on behalf of a user who is assigned with a <a href=\"https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit.\">role</a> that has the <b>View</b> or <b>Edit</b> permission for <b>Chat Messages</b>.</p>\n\n**Scopes:** `chat_message:read`, `chat_message:read:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
											},
											"response": [
												{
													"name": "**HTTP Status Code:**`200`<br>\nList of chat messages returned.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/chat/users/:userId/messages?to_contact=culpa velit reprehenderit&to_channel=culpa velit reprehenderit&date=1948-05-09&page_size=10&next_page_token=culpa velit reprehenderit&include_deleted_and_edited_message=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"chat",
																"users",
																":userId",
																"messages"
															],
															"query": [
																{
																	"key": "to_contact",
																	"value": "culpa velit reprehenderit"
																},
																{
																	"key": "to_channel",
																	"value": "culpa velit reprehenderit"
																},
																{
																	"key": "date",
																	"value": "1948-05-09"
																},
																{
																	"key": "page_size",
																	"value": "10"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																},
																{
																	"key": "include_deleted_and_edited_message",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"date\": \"2019-09-17\",\n \"page_size\": 10,\n \"next_page_token\": \"\",\n \"messages\": [\n  {\n   \"id\": \"F3CbafdljsfjkdfgBA7\",\n   \"message\": \"And you?\",\n   \"sender\": \"myemail@someemailaddr.com\",\n   \"date_time\": \"2019-09-17T20:25:21Z\",\n   \"timestamp\": 1568751921626\n  },\n  {\n   \"id\": \"B0DbfdgdfhAAfgf237000\",\n   \"message\": \"I am good\",\n   \"sender\": \"myemail@someemailaddr.com\",\n   \"date_time\": \"2019-09-17T20:25:17Z\",\n   \"timestamp\": 1568751917976\n  },\n  {\n   \"id\": \"C9Bbdfgd4sad301\",\n   \"message\": \"How are you\",\n   \"sender\": \"myfriendsemail@someemailaddr.us\",\n   \"date_time\": \"2019-09-17T20:24:13Z\",\n   \"timestamp\": 1568751853297\n  },\n  {\n   \"id\": \"769fgdgdfgfd4566F7B96665\",\n   \"message\": \"hello\",\n   \"sender\": \"myfriendsemail@someemailaddr.us\",\n   \"date_time\": \"2019-09-17T20:22:26Z\",\n   \"timestamp\": 1568751746769\n  }\n ]\n}"
												},
												{
													"name": "**HTTP Status Code:** `400`<br> Bad request.<br>\n**Error Code:** `200`<br>Unauthorized request. You do not have permission to access this user's chat messages.<br>\n**Error Code:** `300` <br>The next page token is invalid or expired.<br>\n**Error Code:** `3",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/chat/users/:userId/messages?to_contact=culpa velit reprehenderit&to_channel=culpa velit reprehenderit&date=1948-05-09&page_size=10&next_page_token=culpa velit reprehenderit&include_deleted_and_edited_message=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"chat",
																"users",
																":userId",
																"messages"
															],
															"query": [
																{
																	"key": "to_contact",
																	"value": "culpa velit reprehenderit"
																},
																{
																	"key": "to_channel",
																	"value": "culpa velit reprehenderit"
																},
																{
																	"key": "date",
																	"value": "1948-05-09"
																},
																{
																	"key": "page_size",
																	"value": "10"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																},
																{
																	"key": "include_deleted_and_edited_message",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code**: `1001`<br>\nUser does not exist: $to_contact.<br>\n**Error Code**: `4130`<br>\nChannel does not exist: $to_channel.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/chat/users/:userId/messages?to_contact=culpa velit reprehenderit&to_channel=culpa velit reprehenderit&date=1948-05-09&page_size=10&next_page_token=culpa velit reprehenderit&include_deleted_and_edited_message=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"chat",
																"users",
																":userId",
																"messages"
															],
															"query": [
																{
																	"key": "to_contact",
																	"value": "culpa velit reprehenderit"
																},
																{
																	"key": "to_channel",
																	"value": "culpa velit reprehenderit"
																},
																{
																	"key": "date",
																	"value": "1948-05-09"
																},
																{
																	"key": "page_size",
																	"value": "10"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																},
																{
																	"key": "include_deleted_and_edited_message",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "channels",
									"item": [
										{
											"name": "{channel Id}",
											"item": [
												{
													"name": "members",
													"item": [
														{
															"name": "List channel members",
															"request": {
																"auth": {
																	"type": "oauth2"
																},
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/channels/:channelId/members?page_size=30&next_page_token=culpa velit reprehenderit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"channels",
																		":channelId",
																		"members"
																	],
																	"query": [
																		{
																			"key": "page_size",
																			"value": "30",
																			"description": "The number of records returned with a single API call."
																		},
																		{
																			"key": "next_page_token",
																			"value": "culpa velit reprehenderit",
																			"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
																		}
																	],
																	"variable": [
																		{
																			"key": "channelId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Channel Id."
																		},
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Unique identifier of the user who is the owner of this channel."
																		}
																	]
																},
																"description": "Use this API to list all members of a channel. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\n**Scopes:** `chat_channel:read:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n<p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note:</b> For an<b> account-level</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>, this API can only be used on behalf of a user who is assigned with a <a href=\"https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit.\"> role</a> that has the <b>View</b> or <b>Edit</b> permission for <b>Chat Channels</b>.</p>"
															},
															"response": [
																{
																	"name": "**HTTP Status Code:** `200`<br>\nList of channel members returned.\n\n",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"description": "Added as a part of security scheme: oauth2",
																				"key": "Authorization",
																				"value": "<token>"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/chat/users/:userId/channels/:channelId/members?page_size=30&next_page_token=culpa velit reprehenderit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"chat",
																				"users",
																				":userId",
																				"channels",
																				":channelId",
																				"members"
																			],
																			"query": [
																				{
																					"key": "page_size",
																					"value": "30"
																				},
																				{
																					"key": "next_page_token",
																					"value": "culpa velit reprehenderit"
																				}
																			],
																			"variable": [
																				{
																					"key": "channelId",
																					"value": "culpa velit reprehenderit",
																					"description": "(Required) Channel Id."
																				},
																				{
																					"key": "userId",
																					"value": "culpa velit reprehenderit",
																					"description": "(Required) Unique identifier of the user who is the owner of this channel."
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"total_records\": 2,\n \"page_size\": 30,\n \"next_page_token\": \"\",\n \"members\": [\n  {\n   \"id\": \"laboris3764763ull\",\n   \"email\": \"example@example.com\",\n   \"first_name\": \"Harry\",\n   \"last_name\": \"King\",\n   \"name\": \"King_H\",\n   \"role\": \"admin\"\n  },\n  {\n   \"id\": \"eul21dfabore\",\n   \"email\": \"example@example.com\",\n   \"first_name\": \"Alisha\",\n   \"last_name\": \"Sapkota\",\n   \"name\": \"Alisha_S\",\n   \"role\": \"member\"\n  }\n ]\n}"
																},
																{
																	"name": "**HTTP Status Code:** `400`<br> Bad Request<br>\n**Error Code:** `200`<br>\nUnauthorized request. You do not have permission to view channel members on this user's behalf..<br>\n**Error Code:** `300`<br>\nThe next page token is either invalid or has expired.",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"description": "Added as a part of security scheme: oauth2",
																				"key": "Authorization",
																				"value": "<token>"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/chat/users/:userId/channels/:channelId/members?page_size=30&next_page_token=culpa velit reprehenderit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"chat",
																				"users",
																				":userId",
																				"channels",
																				":channelId",
																				"members"
																			],
																			"query": [
																				{
																					"key": "page_size",
																					"value": "30"
																				},
																				{
																					"key": "next_page_token",
																					"value": "culpa velit reprehenderit"
																				}
																			],
																			"variable": [
																				{
																					"key": "channelId",
																					"value": "culpa velit reprehenderit",
																					"description": "(Required) Channel Id."
																				},
																				{
																					"key": "userId",
																					"value": "culpa velit reprehenderit",
																					"description": "(Required) Unique identifier of the user who is the owner of this channel."
																				}
																			]
																		}
																	},
																	"status": "Bad Request",
																	"code": 400,
																	"_postman_previewlanguage": "text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														},
														{
															"name": "Invite channel members",
															"request": {
																"auth": {
																	"type": "oauth2"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "multipart/form-data"
																	}
																],
																"body": {
																	"mode": "formdata",
																	"formdata": [
																		{
																			"key": "members",
																			"value": "[{\"email\":\"5Qk94FvFtu@GlBbdqUFo.sen\"},{\"email\":\"qcnsWruWFq@vS.pinc\"}]",
																			"description": "Members of a channel. You can invite up to a max number of 5 members with a single API call.",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/channels/:channelId/members",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"channels",
																		":channelId",
																		"members"
																	],
																	"variable": [
																		{
																			"key": "channelId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Channel ID: Unique Identifier of the channel."
																		},
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Unique identifier of the user who is the owner of this channel."
																		}
																	]
																},
																"description": "Use this API to invite members that are in a user's contact list to a channel. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\n**Scopes:** `chat_channel:write:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n<p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note:</b> For an <b>account-level</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>, this API can only be used on behalf of a user who is assigned with a <a href=\"https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit.\"> role</a> that has the <b>Edit</b> permission for <b>Chat Channels</b>.</p>"
															},
															"response": [
																{
																	"name": "**HTTP Status Code:** `201`<br>\nMembers invited to the channel.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"description": "Added as a part of security scheme: oauth2",
																				"key": "Authorization",
																				"value": "<token>"
																			}
																		],
																		"body": {
																			"mode": "formdata",
																			"formdata": [
																				{
																					"key": "members",
																					"value": "[{\"email\":\"UN8YpLsBT-Ek2n@zWCvJVdvVKOotc.ei\"},{\"email\":\"GpRM5tVx-a@C.ur\"}]",
																					"description": "Members of a channel. You can invite up to a max number of 5 members with a single API call.",
																					"type": "text"
																				}
																			]
																		},
																		"url": {
																			"raw": "{{baseUrl}}/chat/users/:userId/channels/:channelId/members",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"chat",
																				"users",
																				":userId",
																				"channels",
																				":channelId",
																				"members"
																			],
																			"variable": [
																				{
																					"key": "channelId",
																					"value": "culpa velit reprehenderit",
																					"description": "(Required) Channel ID: Unique Identifier of the channel."
																				},
																				{
																					"key": "userId",
																					"value": "culpa velit reprehenderit",
																					"description": "(Required) Unique identifier of the user who is the owner of this channel."
																				}
																			]
																		}
																	},
																	"status": "Created",
																	"code": 201,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"ids\": [\n  \"abc4545fdgfdhg\",\n  \"lgfdkhg123456\"\n ],\n \"added_at\": \"2019-09-27T00:14:46Z\"\n}"
																},
																{
																	"name": "**Status Code:** `400`<br>\nBad request.<br>\n**Error Code:** `5301`<br>\nRequest to invite channel members failed.<br>\n**Error Code:** `200`<br>\nUnauthorized request. You do not have permission to invite channel members on this user's behalf.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"description": "Added as a part of security scheme: oauth2",
																				"key": "Authorization",
																				"value": "<token>"
																			}
																		],
																		"body": {
																			"mode": "formdata",
																			"formdata": [
																				{
																					"key": "members",
																					"value": "[{\"email\":\"UN8YpLsBT-Ek2n@zWCvJVdvVKOotc.ei\"},{\"email\":\"GpRM5tVx-a@C.ur\"}]",
																					"description": "Members of a channel. You can invite up to a max number of 5 members with a single API call.",
																					"type": "text"
																				}
																			]
																		},
																		"url": {
																			"raw": "{{baseUrl}}/chat/users/:userId/channels/:channelId/members",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"chat",
																				"users",
																				":userId",
																				"channels",
																				":channelId",
																				"members"
																			],
																			"variable": [
																				{
																					"key": "channelId",
																					"value": "culpa velit reprehenderit",
																					"description": "(Required) Channel ID: Unique Identifier of the channel."
																				},
																				{
																					"key": "userId",
																					"value": "culpa velit reprehenderit",
																					"description": "(Required) Unique identifier of the user who is the owner of this channel."
																				}
																			]
																		}
																	},
																	"status": "Bad Request",
																	"code": 400,
																	"_postman_previewlanguage": "text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														},
														{
															"name": "Remove a member",
															"request": {
																"auth": {
																	"type": "oauth2"
																},
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/channels/:channelId/members/:memberId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"channels",
																		":channelId",
																		"members",
																		":memberId"
																	],
																	"variable": [
																		{
																			"key": "channelId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Unique Identifier of the Channel from where you would like to remove a member. This can be retrieved from the [List Channels API](https://marketplace.zoom.us/docs/api-reference/zoom-api/chat-channels/getchannels)."
																		},
																		{
																			"key": "memberId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Email address of the member whom you would like to be remove from the channel."
																		},
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Unique identifier of the channel owner."
																		}
																	]
																},
																"description": " A [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) can have one or multiple members. Use this API to remove a member from a chat channel. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\n**Scopes:** `chat_channel:write:admin`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` <br>\n \n \n<p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note: </b> For an<b> account-level</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>, this API can only be used on behalf of a user who is assigned with a <b><a href=\"https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit.\"> role</a> that has Edit permission for Chat Channels</b>.</p>"
															},
															"response": [
																{
																	"name": "**HTTP Status Code:** `204` **No Content**<br>\nMember removed.\n\n\n",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"description": "Added as a part of security scheme: oauth2",
																				"key": "Authorization",
																				"value": "<token>"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/chat/users/:userId/channels/:channelId/members/:memberId",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"chat",
																				"users",
																				":userId",
																				"channels",
																				":channelId",
																				"members",
																				":memberId"
																			],
																			"variable": [
																				{
																					"key": "channelId",
																					"value": "culpa velit reprehenderit",
																					"description": "(Required) Unique Identifier of the Channel from where you would like to remove a member. This can be retrieved from the [List Channels API](https://marketplace.zoom.us/docs/api-reference/zoom-api/chat-channels/getchannels)."
																				},
																				{
																					"key": "memberId",
																					"value": "culpa velit reprehenderit",
																					"description": "(Required) Email address of the member whom you would like to be remove from the channel."
																				},
																				{
																					"key": "userId",
																					"value": "culpa velit reprehenderit",
																					"description": "(Required) Unique identifier of the channel owner."
																				}
																			]
																		}
																	},
																	"status": "No Content",
																	"code": 204,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																},
																{
																	"name": "**HTTP Status Code:** `400` <br>\nBad Request<br>\n**Error Code:** `200`<br>\nUnauthorized request. You do not have permission to remove channel members on this user's behalf.<br>\n**Error Code:** `5301`<br>\nUnable to remove channel member.\n\n",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"description": "Added as a part of security scheme: oauth2",
																				"key": "Authorization",
																				"value": "<token>"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/chat/users/:userId/channels/:channelId/members/:memberId",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"chat",
																				"users",
																				":userId",
																				"channels",
																				":channelId",
																				"members",
																				":memberId"
																			],
																			"variable": [
																				{
																					"key": "channelId",
																					"value": "culpa velit reprehenderit",
																					"description": "(Required) Unique Identifier of the Channel from where you would like to remove a member. This can be retrieved from the [List Channels API](https://marketplace.zoom.us/docs/api-reference/zoom-api/chat-channels/getchannels)."
																				},
																				{
																					"key": "memberId",
																					"value": "culpa velit reprehenderit",
																					"description": "(Required) Email address of the member whom you would like to be remove from the channel."
																				},
																				{
																					"key": "userId",
																					"value": "culpa velit reprehenderit",
																					"description": "(Required) Unique identifier of the channel owner."
																				}
																			]
																		}
																	},
																	"status": "Bad Request",
																	"code": 400,
																	"_postman_previewlanguage": "text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														}
													]
												},
												{
													"name": "Get a channel",
													"request": {
														"auth": {
															"type": "oauth2"
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/chat/users/:userId/channels/:channelId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"chat",
																"users",
																":userId",
																"channels",
																":channelId"
															],
															"variable": [
																{
																	"key": "channelId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Channel ID: Unique Identifier of a channel."
																},
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the user who is the owner of the channel."
																}
															]
														},
														"description": "Use this API to get information about a specific channel. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nZoom chat [channels](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) allow users to communicate via chat in private or public groups.\n\n**Scopes:** `chat_channel:read:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n<p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note:</b> For an <b>account-level</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>, this API can only be used on behalf of a user who is assigned with a <a href=\"https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit.\"> role</a>  that has the <b>View</b> or <b>Edit</b> permission for <b>Chat Channels</b>.</p>"
													},
													"response": [
														{
															"name": "**HTTP Status Code:** `200`<br>\nChannel returned.<br>\n\n\n\n",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/channels/:channelId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"channels",
																		":channelId"
																	],
																	"variable": [
																		{
																			"key": "channelId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Channel ID: Unique Identifier of a channel."
																		},
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Unique identifier of the user who is the owner of the channel."
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"id\": \"ut1234sgfsdf\",\n \"name\": \"Leah\",\n \"type\": 1\n}"
														},
														{
															"name": "**HTTP Status Code:** `400`<br>\nBad Request<br>\n**Error Code:** `200`<br>\nUnauthorized request. You do not have permission to access this user's channel information.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/channels/:channelId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"channels",
																		":channelId"
																	],
																	"variable": [
																		{
																			"key": "channelId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Channel ID: Unique Identifier of a channel."
																		},
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Unique identifier of the user who is the owner of the channel."
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "**Status Code:** `404`<br>\nNot found.<br>\n**Error Code:** `4130`<br>\nChannel does not exist: $channelId.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/channels/:channelId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"channels",
																		":channelId"
																	],
																	"variable": [
																		{
																			"key": "channelId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Channel ID: Unique Identifier of a channel."
																		},
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Unique identifier of the user who is the owner of the channel."
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Update a channel",
													"request": {
														"auth": {
															"type": "oauth2"
														},
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "multipart/form-data"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "name",
																	"value": "officia non",
																	"description": "(Required) A new name for the channel.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/chat/users/:userId/channels/:channelId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"chat",
																"users",
																":userId",
																"channels",
																":channelId"
															],
															"variable": [
																{
																	"key": "channelId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Channel Id."
																},
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique Identifier of the Zoom user who is the owner of the channel."
																}
															]
														},
														"description": "Use this API to update the name of a specific channel created by a user. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nZoom chat channels allow users to communicate via chat in private or public channels.\n\n**Scopes:** `chat_channel:write:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n<p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note:</b> For an <b>account-level</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>, this API can only be used on behalf of a user who is assigned with a <a href=\"https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit.\"> role</a> that has the <b>Edit</b> permission for <b>Chat Channel</b>.</p>"
													},
													"response": [
														{
															"name": "**Status Code:** `204`\nChannel updated.",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/channels/:channelId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"channels",
																		":channelId"
																	],
																	"variable": [
																		{
																			"key": "channelId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Channel Id."
																		},
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Unique Identifier of the Zoom user who is the owner of the channel."
																		}
																	]
																}
															},
															"status": "No Content",
															"code": 204,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														},
														{
															"name": "**Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `200`<br>\nUnauthorized request. You do not have permission to update a channel for this user.<br>\n**Error Code:** `5301`<br>\nRequest to update a channel failed.",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/channels/:channelId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"channels",
																		":channelId"
																	],
																	"variable": [
																		{
																			"key": "channelId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Channel Id."
																		},
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Unique Identifier of the Zoom user who is the owner of the channel."
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Delete a channel",
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/chat/users/:userId/channels/:channelId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"chat",
																"users",
																":userId",
																"channels",
																":channelId"
															],
															"variable": [
																{
																	"key": "channelId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Channel ID: Unique Identifier of a channel."
																},
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														},
														"description": "Use this API to delete a specific channel. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nZoom chat [channels](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) allow users to communicate via chat in private or public groups.\n\n**Scopes:** `chat_channel:write:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n<p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note:</b> This API only supports a <b>user-managed</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>.</p>"
													},
													"response": [
														{
															"name": "**HTTP Status Code:** `204`<br>\nChannel deleted.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/channels/:channelId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"channels",
																		":channelId"
																	],
																	"variable": [
																		{
																			"key": "channelId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Channel ID: Unique Identifier of a channel."
																		},
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "No Content",
															"code": 204,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														},
														{
															"name": "**HTTP Status Code:** `400`<br> Bad request.<br>\n**Error Code:** `200`<br>\nUnauthorized request. You do not have permission to delete this user's channel.<br>\n**Error Code:** `5301`<br> Request to delete a channel failed.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/chat/users/:userId/channels/:channelId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"chat",
																		"users",
																		":userId",
																		"channels",
																		":channelId"
																	],
																	"variable": [
																		{
																			"key": "channelId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) Channel ID: Unique Identifier of a channel."
																		},
																		{
																			"key": "userId",
																			"value": "culpa velit reprehenderit",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "List user's channels",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/chat/users/:userId/channels?page_size=10&next_page_token=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"chat",
														"users",
														":userId",
														"channels"
													],
													"query": [
														{
															"key": "page_size",
															"value": "10",
															"description": "The number of records returned from a single API call."
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit",
															"description": "The next page token is used to paginate through large result sets. The expiration period for this token is 15 minutes."
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique identifier of the user."
														}
													]
												},
												"description": "Use this API to list a user's chat channels. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nZoom chat [channels](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) allow users to communicate via chat in private or public groups.\n\n**Scopes:** `chat_channel:read` or `chat_channel:read:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n<p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note:</b> This API supports both user-managed apps and account-level apps. However, in an <b>account-level</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>, to list channels of another user in the same Zoom account, the user calling this API must have a <a href=\"https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit.\">role</a> that has the <b>View</b> or <b>Edit</b> permission for the <b>Chat channels</b> feature.</p>"
											},
											"response": [
												{
													"name": "**Status Code**: `200` <br>\nUser's channels returned.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/chat/users/:userId/channels?page_size=10&next_page_token=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"chat",
																"users",
																":userId",
																"channels"
															],
															"query": [
																{
																	"key": "page_size",
																	"value": "10"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the user."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"total_records\": 2,\n \"page_size\": 10,\n \"channels\": [\n  {\n   \"id\": \"ullamdsfjhgdsn663isi\",\n   \"name\": \"Happiness Channel\",\n   \"type\": 2\n  },\n  {\n   \"id\": \"dsfdfrgtre23324663isi\",\n   \"name\": \"Sales team\",\n   \"type\": 2\n  }\n ]\n}"
												},
												{
													"name": "**HTTP Status Code:** `400` <br>\nBad request.<br>\n**Error Code**: `300`<br>\nThe next page token is either invalid or has expired.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/chat/users/:userId/channels?page_size=10&next_page_token=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"chat",
																"users",
																":userId",
																"channels"
															],
															"query": [
																{
																	"key": "page_size",
																	"value": "10"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the user."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Create a channel",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"value": "Lorem commodo aute",
															"description": "Name of the channel.",
															"type": "text"
														},
														{
															"key": "type",
															"value": "1",
															"description": "Type of the channel. The value can be one of the following:<br>\n`1`: Private channel. In this type of channel, members must be invited to join a channel.<br>\n`2`: Private channel with members that belong to one Zoom account. Members in this channel should be invited and the members should be from the same organization.<br>\n`3`: Public channel. Anyone can search for this channel and join the channel.<br>\n`4`: New chat. This is an instant channel which can be created by adding members to a new chat.  (This can only be one of 1,2,3)",
															"type": "text"
														},
														{
															"key": "members",
															"value": "[{\"email\":\"46o4zeIi9@FQNwkLvq.qs\"},{\"email\":\"MrLz7zSg0Pk@mNBRNAdrmBktXrBVfLkotyOHV.lq\"}]",
															"description": "Member(s) to include in the channel. A max of 5 members can be added to the channel at once with this API.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/chat/users/:userId/channels",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"chat",
														"users",
														":userId",
														"channels"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique identifier of the user."
														}
													]
												},
												"description": "Use this API to create a channel for a user. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nZoom chat channels allow users to communicate via chat in private or public groups.\n\n**Scopes:** `chat_channel:write` or `chat_channel:write:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n<p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note:</b> This API supports both user-managed apps and account-level apps. However, in an <b>account-level</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>, to create a channel on behalf of another user in the same Zoom account, the user calling this API must have a <a href=\"https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit.\">role</a> that has the <b>Edit</b> permission for the <b>Chat channels</b> feature.</p>"
											},
											"response": [
												{
													"name": "**Status Code**: `201` <br>\nChannel created.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "name",
																	"value": "ipsum aliqua",
																	"description": "Name of the channel.",
																	"type": "text"
																},
																{
																	"key": "type",
																	"value": "1",
																	"description": "Type of the channel. The value can be one of the following:<br>\n`1`: Private channel. In this type of channel, members must be invited to join a channel.<br>\n`2`: Private channel with members that belong to one Zoom account. Members in this channel should be invited and the members should be from the same organization.<br>\n`3`: Public channel. Anyone can search for this channel and join the channel.<br>\n`4`: New chat. This is an instant channel which can be created by adding members to a new chat.  (This can only be one of 1,2,3)",
																	"type": "text"
																},
																{
																	"key": "members",
																	"value": "[{\"email\":\"I4Q3LUgd@bsmRVnlWGRxl.qvi\"},{\"email\":\"swgd@ZpTCXnIxssTLD.vhr\"}]",
																	"description": "Member(s) to include in the channel. A max of 5 members can be added to the channel at once with this API.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/chat/users/:userId/channels",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"chat",
																"users",
																":userId",
																"channels"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the user."
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"id\": \"id8977ullamco\",\n \"name\": \"Happy Channel\",\n \"type\": 1,\n \"jid\": \"nisi73624365536st\"\n}"
												},
												{
													"name": "**HTTP Status Code:** `400`<br>\nNot found.<br>\n**Error Code**: `5301`<br>\nRequest to create a channel failed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "name",
																	"value": "ipsum aliqua",
																	"description": "Name of the channel.",
																	"type": "text"
																},
																{
																	"key": "type",
																	"value": "1",
																	"description": "Type of the channel. The value can be one of the following:<br>\n`1`: Private channel. In this type of channel, members must be invited to join a channel.<br>\n`2`: Private channel with members that belong to one Zoom account. Members in this channel should be invited and the members should be from the same organization.<br>\n`3`: Public channel. Anyone can search for this channel and join the channel.<br>\n`4`: New chat. This is an instant channel which can be created by adding members to a new chat.  (This can only be one of 1,2,3)",
																	"type": "text"
																},
																{
																	"key": "members",
																	"value": "[{\"email\":\"I4Q3LUgd@bsmRVnlWGRxl.qvi\"},{\"email\":\"swgd@ZpTCXnIxssTLD.vhr\"}]",
																	"description": "Member(s) to include in the channel. A max of 5 members can be added to the channel at once with this API.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/chat/users/:userId/channels",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"chat",
																"users",
																":userId",
																"channels"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the user."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code**: `1001`<br>\nUser does not exist: $userId.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "name",
																	"value": "ipsum aliqua",
																	"description": "Name of the channel.",
																	"type": "text"
																},
																{
																	"key": "type",
																	"value": "1",
																	"description": "Type of the channel. The value can be one of the following:<br>\n`1`: Private channel. In this type of channel, members must be invited to join a channel.<br>\n`2`: Private channel with members that belong to one Zoom account. Members in this channel should be invited and the members should be from the same organization.<br>\n`3`: Public channel. Anyone can search for this channel and join the channel.<br>\n`4`: New chat. This is an instant channel which can be created by adding members to a new chat.  (This can only be one of 1,2,3)",
																	"type": "text"
																},
																{
																	"key": "members",
																	"value": "[{\"email\":\"I4Q3LUgd@bsmRVnlWGRxl.qvi\"},{\"email\":\"swgd@ZpTCXnIxssTLD.vhr\"}]",
																	"description": "Member(s) to include in the channel. A max of 5 members can be added to the channel at once with this API.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/chat/users/:userId/channels",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"chat",
																"users",
																":userId",
																"channels"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the user."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "me/contacts",
							"item": [
								{
									"name": "List user's contacts",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/chat/users/me/contacts?type=company&page_size=10&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"chat",
												"users",
												"me",
												"contacts"
											],
											"query": [
												{
													"key": "type",
													"value": "company",
													"description": "The type of contact. The value can be one of the following:\n`company`: Contacts from the user's organization.\n`external`: External contacts. "
												},
												{
													"key": "page_size",
													"value": "10",
													"description": "The number of records returned with a single API call."
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit",
													"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
												}
											]
										},
										"description": "A user under an organization’s Zoom account has internal users listed under Company Contacts in the Zoom Client. A Zoom user can also add another Zoom user as a [contact](https://support.zoom.us/hc/en-us/articles/115004055706-Managing-Contacts). Call this API to list all the contacts of a Zoom user. Zoom contacts are categorized into \"company contacts\" and \"external contacts\". You must specify the contact type in the `type` query parameter. If you do not specify, by default, the type will be set as company contact.\n\n<p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note: </b> This API only supports <b>user-managed</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>.</p><br>\n\n**Scope**: `chat_contact:read`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>List of user's contacts returned.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/chat/users/me/contacts?type=company&page_size=10&next_page_token=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"chat",
														"users",
														"me",
														"contacts"
													],
													"query": [
														{
															"key": "type",
															"value": "company"
														},
														{
															"key": "page_size",
															"value": "10"
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"page_size\": 10,\n \"next_page_token\": \"shdjksA4\",\n \"contacts\": [\n  {\n   \"id\": \"44ABCDEfgjWHABBxw\",\n   \"email\": \"example@example.com\",\n   \"first_name\": \"Brandon\",\n   \"last_name\": \"Ghimire\"\n  }\n ]\n}"
										},
										{
											"name": "**Error Code:** `300`<br>\nThe next page token is invalid or has expired.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/chat/users/me/contacts?type=company&page_size=10&next_page_token=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"chat",
														"users",
														"me",
														"contacts"
													],
													"query": [
														{
															"key": "type",
															"value": "company"
														},
														{
															"key": "page_size",
															"value": "10"
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit"
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get user's contact details",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/chat/users/me/contacts/:contactId?query_presence_status=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"chat",
												"users",
												"me",
												"contacts",
												":contactId"
											],
											"query": [
												{
													"key": "query_presence_status",
													"value": "true",
													"description": "The presence status of the contact. \nInclude this query parameter with a value of `true` to get the presence status of the contact in the response."
												}
											],
											"variable": [
												{
													"key": "contactId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user's contact Id or email address. The contact can be either a company contact or an external contact."
												}
											]
										},
										"description": "A user under an organization’s Zoom account has internal users listed under Company Contacts in the Zoom Client. A Zoom user can also add another Zoom user as a [contact](https://support.zoom.us/hc/en-us/articles/115004055706-Managing-Contacts). Call this API to get information on a specific contact of the Zoom user.\n\n<p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note: </b>This API only supports <b>user-managed</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>.</p><br>\n\n**Scope**: `chat_contact:read`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nContact information returned.\n\n\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/chat/users/me/contacts/:contactId?query_presence_status=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"chat",
														"users",
														"me",
														"contacts",
														":contactId"
													],
													"query": [
														{
															"key": "query_presence_status",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "contactId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user's contact Id or email address. The contact can be either a company contact or an external contact."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"u487547sic45ing\",\n \"email\": \"example@example.com\",\n \"first_name\": \"John\",\n \"last_name\": \"Doe\",\n \"presence_status\": \"Offline\",\n \"phone_number\": \"15550100\",\n \"phone_numbers\": [\n  {\n   \"country\": \"US\",\n   \"code\": \"+1\",\n   \"number\": \"15550102\",\n   \"verified\": true,\n   \"label\": \"Mobile\"\n  }\n ],\n \"direct_numbers\": [\n  111111,\n  222222\n ],\n \"extension_number\": \"010\"\n}"
										},
										{
											"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `5301`<br>\nRequest to get the presence status of the chat contact failed.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/chat/users/me/contacts/:contactId?query_presence_status=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"chat",
														"users",
														"me",
														"contacts",
														":contactId"
													],
													"query": [
														{
															"key": "query_presence_status",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "contactId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user's contact Id or email address. The contact can be either a company contact or an external contact."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\n**Error Code**: `1001`<br>\nUser does not exist: $contactId",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/chat/users/me/contacts/:contactId?query_presence_status=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"chat",
														"users",
														"me",
														"contacts",
														":contactId"
													],
													"query": [
														{
															"key": "query_presence_status",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "contactId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user's contact Id or email address. The contact can be either a company contact or an external contact."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "channels/{channel Id}",
					"item": [
						{
							"name": "members",
							"item": [
								{
									"name": "me",
									"item": [
										{
											"name": "Join a channel",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/chat/channels/:channelId/members/me",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"chat",
														"channels",
														":channelId",
														"members",
														"me"
													],
													"variable": [
														{
															"key": "channelId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Channel Id."
														}
													]
												},
												"description": "A [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) can have one or multiple members. Use this API to join a channel that is open for anyone in the same organization to join. You cannot use this API to join private channels that only allows invited members to be a part of it.\n\n<p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note: </b>This API only supports <b>user-managed</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>.</p><br>\n\n**Scope:** `chat_channel:write`<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `201`\nSuccessfully joined the channel.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/chat/channels/:channelId/members/me",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"chat",
																"channels",
																":channelId",
																"members",
																"me"
															],
															"variable": [
																{
																	"key": "channelId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Channel Id."
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"id\": \"lbborum-12fiasf-abaa\",\n \"added_at\": \"2018-12-11T15:06:32.633Z\"\n}"
												},
												{
													"name": "**HTTP Status Code:** `400`<br> Bad request.<br>\n**Error Code:** `5301`<br> Request to join the channel failed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/chat/channels/:channelId/members/me",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"chat",
																"channels",
																":channelId",
																"members",
																"me"
															],
															"variable": [
																{
																	"key": "channelId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Channel Id."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Leave a channel",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/chat/channels/:channelId/members/me",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"chat",
														"channels",
														":channelId",
														"members",
														"me"
													],
													"variable": [
														{
															"key": "channelId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Channel ID: Unique Identifier of a channel."
														}
													]
												},
												"description": "If you're no longer interested in being a member of an existing channel, you can leave the channel at any time. Use this API to leave a specific channel. After leaving the channel, you can no longer access information from that channel.\n\n<p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note: </b>This API only supports <b>user-managed</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>.</p><br>\n\n**Scope:** `chat_channel:write`<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `204`<br>\nLeft channel successfully.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/chat/channels/:channelId/members/me",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"chat",
																"channels",
																":channelId",
																"members",
																"me"
															],
															"variable": [
																{
																	"key": "channelId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Channel ID: Unique Identifier of a channel."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "**HTTP Status Code:** `400`<br> Bad Request.<br>\n**Error Code:** `5301`<br> Request to leave the channel failed.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/chat/channels/:channelId/members/me",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"chat",
																"channels",
																":channelId",
																"members",
																"me"
															],
															"variable": [
																{
																	"key": "channelId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Channel ID: Unique Identifier of a channel."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Remove a member",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/chat/channels/:channelId/members/:memberId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"chat",
												"channels",
												":channelId",
												"members",
												":memberId"
											],
											"variable": [
												{
													"key": "channelId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of the Channel from where you would like to remove a member. This can be retrieved from the [List Channels API](https://marketplace.zoom.us/docs/api-reference/zoom-api/chat-channels/getchannels)."
												},
												{
													"key": "memberId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Email address of the member whom you would like to be remove from the channel."
												}
											]
										},
										"description": " A [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) can have one or multiple members. Use this API to remove a member from a chat channel.<br><br>\n **Scopes:** `chat_channel:write`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n \n <p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note: </b> This API only supports <b>user-managed</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>.</p><br>\n\n\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` **No Content**<br>\nMember removed.\n\n\n",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/chat/channels/:channelId/members/:memberId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"chat",
														"channels",
														":channelId",
														"members",
														":memberId"
													],
													"variable": [
														{
															"key": "channelId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique Identifier of the Channel from where you would like to remove a member. This can be retrieved from the [List Channels API](https://marketplace.zoom.us/docs/api-reference/zoom-api/chat-channels/getchannels)."
														},
														{
															"key": "memberId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Email address of the member whom you would like to be remove from the channel."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "**HTTP Status Code:** `400` <br>\nBad Request<br>\n**Error Code:** `200`<br>\nUnauthorized request. You do not have permission to remove channel members on this user's behalf.<br>\n**Error Code:** `5301`<br>\nUnable to remove channel member.\n\n",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/chat/channels/:channelId/members/:memberId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"chat",
														"channels",
														":channelId",
														"members",
														":memberId"
													],
													"variable": [
														{
															"key": "channelId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique Identifier of the Channel from where you would like to remove a member. This can be retrieved from the [List Channels API](https://marketplace.zoom.us/docs/api-reference/zoom-api/chat-channels/getchannels)."
														},
														{
															"key": "memberId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Email address of the member whom you would like to be remove from the channel."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get a channel",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/chat/channels/:channelId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chat",
										"channels",
										":channelId"
									],
									"variable": [
										{
											"key": "channelId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Channel ID: Unique Identifier of a channel."
										}
									]
								},
								"description": "Zoom chat [channels](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) allow users to communicate via chat in private or public groups. Use this API to get information about a specific channel. \n\n**Scope:** `chat_channel:read`\t<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n<p style=\"background-color:#e1f5fe; color:#000000; padding:8px\"> <b>Note: </b> This API supports only <b>user-managed</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth apps</a>. If you use an Account-Level OAuth Access token, you can only retrieve the channel information for the authorized user. You can't retrieve the channel information of other account users. Use the <a href=\"https://marketplace.zoom.us/docs/api-reference/zoom-api/chat-channels-account-level/getchannel\">Account-Level Get Channel Info API</a> to retrieve the channel information of other account users.</p><br>\n\n\n "
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nChannel returned.<br>\n\n\n\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/chat/channels/:channelId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"chat",
												"channels",
												":channelId"
											],
											"variable": [
												{
													"key": "channelId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Channel ID: Unique Identifier of a channel."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"cabc1234567defghijkl01234\",\n \"jid\": \"cabc1234567defghijkl01234@conference.xmpp.zoom.us\",\n \"name\": \"common2\",\n \"type\": 5,\n \"channel_settings\": {\n  \"new_members_can_see_previous_messages_files\": true,\n  \"allow_to_add_external_users\": 1,\n  \"posting_permissions\": 1\n }\n}"
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad Request<br>\n**Error Code:** `200`<br>\nUnauthorized request. You do not have permission to access this user's channel information.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/chat/channels/:channelId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"chat",
												"channels",
												":channelId"
											],
											"variable": [
												{
													"key": "channelId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Channel ID: Unique Identifier of a channel."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Status Code:** `404`<br>\nNot found.<br>\n**Error Code:** `4130`<br>\nChannel does not exist: $channelId.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/chat/channels/:channelId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"chat",
												"channels",
												":channelId"
											],
											"variable": [
												{
													"key": "channelId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Channel ID: Unique Identifier of a channel."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a channel",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "officia non",
											"description": "(Required) A new name for the channel.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/chat/channels/:channelId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chat",
										"channels",
										":channelId"
									],
									"variable": [
										{
											"key": "channelId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Channel Id."
										}
									]
								},
								"description": "Zoom chat channels allow users to communicate via chat in private or public channels. Use this API to update the name of a specific channel that you created. \n\n**Scope:** `chat_channel:write`\t<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n<p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note: </b> This API only supports <b>user-managed</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>.</p><br>\n\n"
							},
							"response": [
								{
									"name": "**Status Code:** `204`\nChannel updated.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/chat/channels/:channelId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"chat",
												"channels",
												":channelId"
											],
											"variable": [
												{
													"key": "channelId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Channel Id."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "**Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `200`<br>\nUnauthorized request. You do not have permission to update a channel for this user.<br>\n**Error Code:** `5301`<br>\nRequest to update a channel failed.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/chat/channels/:channelId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"chat",
												"channels",
												":channelId"
											],
											"variable": [
												{
													"key": "channelId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Channel Id."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a channel",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/chat/channels/:channelId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chat",
										"channels",
										":channelId"
									],
									"variable": [
										{
											"key": "channelId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Channel ID: Unique Identifier of a channel."
										}
									]
								},
								"description": "Zoom chat [channels](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) allow users to communicate via chat in private or public groups. Use this API to delete a specific channel. \n\n**Scope:** `chat_channel:write`<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n<p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note: </b> This API only supports <b>user-managed</b> <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app\">OAuth app</a>.</p><br>\n\n\n "
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204`<br>\nChannel deleted.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/chat/channels/:channelId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"chat",
												"channels",
												":channelId"
											],
											"variable": [
												{
													"key": "channelId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Channel ID: Unique Identifier of a channel."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "**HTTP Status Code:** `400`<br> Bad request.<br>\n**Error Code:** `200`<br>\nUnauthorized request. You do not have permission to delete this user's channel.<br>\n**Error Code:** `5301`<br> Request to delete a channel failed.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/chat/channels/:channelId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"chat",
												"channels",
												":channelId"
											],
											"variable": [
												{
													"key": "channelId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Channel ID: Unique Identifier of a channel."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "accounts",
			"item": [
				{
					"name": "{account Id}",
					"item": [
						{
							"name": "settings",
							"item": [
								{
									"name": "virtual backgrounds",
									"item": [
										{
											"name": "Upload virtual background files",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "labore",
															"description": "Provide the file's path here.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/settings/virtual_backgrounds",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"settings",
														"virtual_backgrounds"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique identifier of the account."
														}
													]
												},
												"description": "Use this API to [upload virtual background files](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background#h_01EJF3YFEWGT8YA0ZJ079JEDQE) for all users on the account to use. \n\n\n**Prerequisites:**<br>\n* Virtual background feature must be [enabled](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background#h_2ef28080-fce9-4ac2-b567-dc958afab1b7) on the account.\n<br> **Scope:** `account:write:admin`<br><br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n\n"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `201` **Created** <br>\n",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/settings/virtual_backgrounds",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"settings",
																"virtual_backgrounds"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the account."
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"id\": \"_Tcj7354w6eHw\",\n \"name\": \"u=mdbhhfg3y7&fm=2fdjs0.jpg\",\n \"type\": \"image\",\n \"is_default\": false,\n \"size\": 53434\n}"
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n**Error Code:** `120`<br>\nNo file uploaded. Verify that a file has been uploaded.<br>\nFile size cannot exceed 15M.<br>\nA maximum of 10 files are allowed for a user.<br>\nFile uploads must be in \"jpg/jpeg\", \"",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/settings/virtual_backgrounds",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"settings",
																"virtual_backgrounds"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the account."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found** <br>\n**Error Code:** `2001`<br>\nThis account does not exist or does not belong to you: {accountId}.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/settings/virtual_backgrounds",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"settings",
																"virtual_backgrounds"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the account."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Delete virtual background files",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/settings/virtual_backgrounds?file_ids=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"settings",
														"virtual_backgrounds"
													],
													"query": [
														{
															"key": "file_ids",
															"value": "culpa velit reprehenderit",
															"description": "Provide the id of the file that is to be deleted. To delete multiple files, provide comma separated values for this field."
														}
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) "
														}
													]
												},
												"description": "Delete existing virtual background file(s) from an account. \n\n**Prerequisites:**<br>\n* Virtual background feature must be [enabled](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background#h_2ef28080-fce9-4ac2-b567-dc958afab1b7) on the account.\n<br> **Scope:** `account:write:admin`<br> <br> \n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n\n"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `204` **No Content** <br>\nDeleted.\n",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/settings/virtual_backgrounds?file_ids=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"settings",
																"virtual_backgrounds"
															],
															"query": [
																{
																	"key": "file_ids",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad request** <br>\n**Error Code:** `300`<br>\nInvalid parameter: file_ids.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/settings/virtual_backgrounds?file_ids=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"settings",
																"virtual_backgrounds"
															],
															"query": [
																{
																	"key": "file_ids",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found** <br>\n**Error Code:** `2001`<br>\nThis account does not exist or does not belong to you: {accountId}.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/settings/virtual_backgrounds?file_ids=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"settings",
																"virtual_backgrounds"
															],
															"query": [
																{
																	"key": "file_ids",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get settings",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/settings?option=recording_authentication&custom_query_fields=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"settings"
											],
											"query": [
												{
													"key": "option",
													"value": "recording_authentication",
													"description": "Use the following options to filter the results of the account's information:\n* `meeting_authentication` — View the account's [meeting authentication settings](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars).\n* `recording_authentication` — View the account's [recording authentication settings](https://support.zoom.us/hc/en-us/articles/360037756671-Authentication-Profiles-for-Cloud-Recordings).\n* `security` — View the account's security settings. For example, password requirements for user login or two-factor authentication.<br>\n* `meeting_security` — View the account's meeting security settings."
												},
												{
													"key": "custom_query_fields",
													"value": "culpa velit reprehenderit",
													"description": "The name of the field by which to filter the response. For example, if you provide the `host_video` value for this field, you will get a response similar to the following:\n\n`{ \"schedule_meeting\": { \"host_video\": false    } }` \n\nTo use multiple values, comma-separate each value. For example: `host_video,participant_video`"
												}
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The account's ID."
												}
											]
										},
										"description": "Use this API to get an account's settings information.\n\nTo get the settings of a master account, use `me` as the value for the `accountId` path parameter.\n\n**Scopes:** `account:read:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n**Prerequisites**: \n* The account must be a paid account"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br> Account settings returned.<br>**Error Code:** `200`<br>\nOnly available for Paid account.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/settings?option=recording_authentication&custom_query_fields=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"settings"
													],
													"query": [
														{
															"key": "option",
															"value": "recording_authentication"
														},
														{
															"key": "custom_query_fields",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's ID."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"schedule_meeting\": {\n  \"host_video\": \"boolean\",\n  \"participant_video\": \"boolean\",\n  \"audio_type\": \"string\",\n  \"join_before_host\": \"boolean\",\n  \"use_pmi_for_scheduled_meetings\": \"boolean\",\n  \"use_pmi_for_instant_meetings\": \"boolean\",\n  \"enforce_login\": \"boolean\",\n  \"enforce_login_with_domains\": \"boolean\",\n  \"enforce_login_domains\": \"string\",\n  \"not_store_meeting_topic\": \"boolean\",\n  \"force_pmi_jbh_password\": \"boolean\",\n  \"require_password_for_scheduling_new_meetings\": \"boolean\",\n  \"require_password_for_scheduled_meetings\": \"boolean\",\n  \"require_password_for_instant_meetings\": \"boolean\",\n  \"require_password_for_pmi_meetings\": \"string\"\n },\n \"in_meeting\": {\n  \"e2e_encryption\": \"boolean\",\n  \"chat\": \"boolean\",\n  \"allow_participants_chat_with\": 2,\n  \"allow_users_save_chats\": 2,\n  \"private_chat\": \"boolean\",\n  \"auto_saving_chat\": \"boolean\",\n  \"entry_exit_chime\": \"string\",\n  \"record_play_own_voice\": \"boolean\",\n  \"feedback\": \"boolean\",\n  \"post_meeting_feedback\": \"boolean\",\n  \"co_host\": \"boolean\",\n  \"polling\": \"boolean\",\n  \"attendee_on_hold\": \"boolean\",\n  \"show_meeting_control_toolbar\": \"boolean\",\n  \"allow_show_zoom_windows\": \"boolean\",\n  \"annotation\": \"boolean\",\n  \"whiteboard\": \"boolean\",\n  \"webinar_question_answer\": \"boolean\",\n  \"anonymous_question_answer\": \"boolean\",\n  \"breakout_room\": \"boolean\",\n  \"breakout_room_schedule\": true,\n  \"closed_caption\": \"boolean\",\n  \"far_end_camera_control\": \"boolean\",\n  \"group_hd\": \"boolean\",\n  \"virtual_background\": \"boolean\",\n  \"watermark\": \"boolean\",\n  \"watermark_by_default\": \"boolean\",\n  \"audio_watermark_by_default\": \"boolean\",\n  \"alert_guest_join\": \"boolean\",\n  \"auto_answer\": \"boolean\",\n  \"p2p_connetion\": \"boolean\",\n  \"p2p_ports\": \"boolean\",\n  \"ports_range\": \"string\",\n  \"sending_default_email_invites\": \"boolean\",\n  \"use_html_format_email\": \"boolean\",\n  \"dscp_marking\": \"boolean\",\n  \"dscp_audio\": \"integer\",\n  \"dscp_video\": \"integer\",\n  \"stereo_audio\": \"boolean\",\n  \"original_audio\": \"boolean\",\n  \"screen_sharing\": \"boolean\",\n  \"remote_control\": \"boolean\",\n  \"show_a_join_from_your_browser_link\": true,\n  \"join_from_mobile\": true,\n  \"join_from_desktop\": true,\n  \"allow_live_streaming\": true,\n  \"live_streaming_facebook\": true,\n  \"workplace_by_facebook\": true,\n  \"live_streaming_youtube\": true,\n  \"custom_live_streaming_service\": true,\n  \"custom_service_instructions\": \"specific instructions\",\n  \"webinar_live_streaming\": {\n   \"enable\": true,\n   \"live_streaming_service\": [\n    \"facebook\",\n    \"workplace_by_facebook\",\n    \"youtube\",\n    \"custom_live_streaming_service\"\n   ],\n   \"custom_service_instructions\": \"specific instructions\",\n   \"live_streaming_reminder\": true\n  },\n  \"webinar_chat\": {\n   \"enable\": true,\n   \"allow_panelists_chat_with\": 1,\n   \"allow_attendees_chat_with\": 1,\n   \"default_attendees_chat_with\": 1,\n   \"allow_panelists_send_direct_message\": true,\n   \"allow_users_save_chats\": 1,\n   \"allow_auto_save_local_chat_file\": true\n  },\n  \"closed_captioning\": {\n   \"enable\": true,\n   \"third_party_captioning_service\": false,\n   \"auto_transcribing\": true,\n   \"view_full_transcript\": true,\n   \"save_caption\": true\n  },\n  \"slide_control\": true,\n  \"meeting_survey\": true,\n  \"webinar_polling\": {\n   \"enable\": true,\n   \"advanced_polls\": true\n  },\n  \"webinar_survey\": true\n },\n \"email_notification\": {\n  \"cloud_recording_available_reminder\": \"boolean\",\n  \"recording_available_reminder_schedulers\": true,\n  \"recording_available_reminder_alternative_hosts\": true,\n  \"jbh_reminder\": \"boolean\",\n  \"cancel_meeting_reminder\": \"boolean\",\n  \"low_host_count_reminder\": \"boolean\",\n  \"alternative_host_reminder\": \"boolean\",\n  \"schedule_for_reminder\": \"boolean\"\n },\n \"zoom_rooms\": {\n  \"upcoming_meeting_alert\": \"boolean\",\n  \"start_airplay_manually\": \"boolean\",\n  \"weekly_system_restart\": \"boolean\",\n  \"list_meetings_with_calendar\": \"boolean\",\n  \"zr_post_meeting_feedback\": \"boolean\",\n  \"ultrasonic\": \"boolean\",\n  \"force_private_meeting\": \"boolean\",\n  \"hide_host_information\": \"boolean\",\n  \"cmr_for_instant_meeting\": \"boolean\",\n  \"auto_start_stop_scheduled_meetings\": \"boolean\"\n },\n \"security\": {\n  \"admin_change_name_pic\": \"boolean\",\n  \"import_photos_from_devices\": \"boolean\",\n  \"hide_billing_info\": \"boolean\"\n },\n \"recording\": {\n  \"local_recording\": \"boolean\",\n  \"cloud_recording\": \"boolean\",\n  \"record_speaker_view\": \"boolean\",\n  \"record_gallery_view\": \"boolean\",\n  \"record_audio_file\": \"boolean\",\n  \"save_chat_text\": \"boolean\",\n  \"show_timestamp\": \"boolean\",\n  \"recording_audio_transcript\": \"boolean\",\n  \"auto_recording\": \"string\",\n  \"cloud_recording_download\": \"boolean\",\n  \"cloud_recording_download_host\": \"boolean\",\n  \"account_user_access_recording\": \"boolean\",\n  \"auto_delete_cmr\": \"boolean\",\n  \"auto_delete_cmr_days\": \"integer\"\n },\n \"telephony\": {\n  \"third_party_audio\": \"boolean\",\n  \"audio_conference_info\": \"string\"\n },\n \"tsp\": {\n  \"call_out\": \"boolean\",\n  \"call_out_countries\": [\n   \"string\"\n  ],\n  \"show_international_numbers_link\": \"boolean\",\n  \"display_toll_free_numbers\": \"boolean\"\n },\n \"integration\": {\n  \"google_calendar\": \"boolean\",\n  \"google_drive\": \"boolean\",\n  \"dropbox\": \"boolean\",\n  \"box\": \"boolean\",\n  \"microsoft_one_drive\": \"boolean\",\n  \"kubi\": \"boolean\"\n },\n \"feature\": {\n  \"meeting_capacity\": \"integer\"\n },\n \"other_options\": {\n  \"allow_auto_active_users\": true,\n  \"blur_snapshot\": true,\n  \"display_meetings_scheduled_for_others\": false,\n  \"use_cdn\": \"default\",\n  \"allow_users_contact_support_via_chat\": true,\n  \"meeting_qos_and_mos\": 0,\n  \"show_one_user_meeting_on_dashboard\": true,\n  \"allow_users_enter_and_share_pronouns\": true\n },\n \"audio_conferencing\": {\n  \"toll_free_and_fee_based_toll_call\": {\n   \"enable\": true,\n   \"numbers\": [\n    {\n     \"code\": \"1\",\n     \"country_code\": \"US\",\n     \"country_name\": \"United States\",\n     \"number\": \"+1 5550100\",\n     \"display_number\": \"+1 5550100(Atlanta)\"\n    },\n    {\n     \"code\": \"1\",\n     \"country_code\": \"US\",\n     \"country_name\": \"United States\",\n     \"number\": \"+1 5550101\",\n     \"display_number\": \"+1 5550101(SanJose)\"\n    }\n   ],\n   \"allow_webinar_attendees_dial\": true\n  }\n }\n}"
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `2001`<br>\nAccount does not exist: $subAccountId.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/settings?option=recording_authentication&custom_query_fields=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"settings"
													],
													"query": [
														{
															"key": "option",
															"value": "recording_authentication"
														},
														{
															"key": "custom_query_fields",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update settings",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "schedule_meeting",
													"value": "{\"host_video\":true,\"participant_video\":true,\"audio_type\":\"both\",\"join_before_host\":true,\"jbh_time\":0,\"enforce_login\":false,\"enforce_login_with_domains\":false,\"enforce_login_domains\":\"ea veniam\",\"not_store_meeting_topic\":false,\"force_pmi_jbh_password\":true,\"use_pmi_for_scheduled_meetings\":false,\"use_pmi_for_instant_meetings\":true,\"require_password_for_scheduling_new_meetings\":false,\"require_password_for_scheduled_meetings\":false,\"require_password_for_instant_meetings\":false,\"require_password_for_pmi_meetings\":\"none\",\"meeting_password_requirement\":{\"length\":38034513,\"have_letter\":false,\"have_number\":true,\"have_special_character\":false,\"only_allow_numeric\":true,\"have_upper_and_lower_characters\":false,\"consecutive_characters_length\":8,\"weak_enhance_detection\":false},\"personal_meeting\":false}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "in_meeting",
													"value": "{\"e2e_encryption\":false,\"chat\":true,\"allow_participants_chat_with\":3,\"allow_users_save_chats\":3,\"private_chat\":false,\"auto_saving_chat\":true,\"entry_exit_chime\":\"all\",\"record_play_own_voice\":true,\"feedback\":false,\"post_meeting_feedback\":true,\"co_host\":true,\"polling\":true,\"attendee_on_hold\":false,\"show_meeting_control_toolbar\":true,\"allow_show_zoom_windows\":false,\"annotation\":true,\"whiteboard\":true,\"webinar_question_answer\":false,\"anonymous_question_answer\":false,\"breakout_room\":true,\"breakout_room_schedule\":true,\"closed_caption\":true,\"far_end_camera_control\":true,\"group_hd\":true,\"virtual_background\":true,\"virtual_background_settings\":{\"enable\":true,\"allow_videos\":true,\"allow_upload_custom\":false,\"files\":[{\"id\":\"anim ad ea ut\",\"name\":\"commodo sed\",\"type\":\"esse sint ut laborum\",\"is_default\":false,\"size\":\"dolore ex magna\"},{\"id\":\"culpa esse reprehenderit laboris\",\"name\":\"mollit\",\"type\":\"Duis aute sed\",\"is_default\":false,\"size\":\"sed ut laborum cupidatat\"}]},\"watermark\":true,\"alert_guest_join\":true,\"auto_answer\":true,\"p2p_connetion\":false,\"p2p_ports\":false,\"ports_range\":\"\",\"sending_default_email_invites\":true,\"use_html_format_email\":true,\"dscp_marking\":true,\"dscp_audio\":46,\"dscp_video\":33,\"stereo_audio\":false,\"original_audio\":false,\"screen_sharing\":false,\"remote_control\":true,\"allow_live_streaming\":false,\"live_streaming_facebook\":false,\"workplace_by_facebook\":false,\"live_streaming_youtube\":false,\"custom_live_streaming_service\":true,\"custom_service_instructions\":\"sint mollit consequat\",\"custom_data_center_regions\":true,\"data_center_regions\":\"EU\",\"meeting_reactions\":false,\"show_a_join_from_your_browser_link\":true,\"join_from_mobile\":false,\"join_from_desktop\":true,\"allow_participants_to_rename\":false,\"who_can_share_screen\":\"all\",\"who_can_share_screen_when_someone_is_sharing\":\"all\",\"file_transfer\":false,\"request_permission_to_unmute\":false,\"webinar_live_streaming\":{\"enable\":false,\"live_streaming_service\":[\"youtube\",\"custom_live_streaming_service\"],\"custom_service_instructions\":\"aliquip et qui minim sint\",\"live_streaming_reminder\":false},\"webinar_chat\":{\"enable\":true,\"allow_panelists_chat_with\":1,\"allow_attendees_chat_with\":3,\"default_attendees_chat_with\":2,\"allow_panelists_send_direct_message\":true,\"allow_users_save_chats\":1,\"allow_auto_save_local_chat_file\":true},\"closed_captioning\":{\"enable\":false,\"third_party_captioning_service\":true,\"auto_transcribing\":false,\"view_full_transcript\":false,\"save_caption\":false},\"slide_control\":true,\"meeting_survey\":true,\"webinar_polling\":{\"enable\":true,\"advanced_polls\":true},\"webinar_survey\":true}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "email_notification",
													"value": "{\"cloud_recording_available_reminder\":false,\"recording_available_reminder_schedulers\":false,\"recording_available_reminder_alternative_hosts\":true,\"jbh_reminder\":false,\"cancel_meeting_reminder\":true,\"low_host_count_reminder\":true,\"alternative_host_reminder\":true,\"schedule_for_reminder\":true}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "zoom_rooms",
													"value": "{\"upcoming_meeting_alert\":true,\"start_airplay_manually\":true,\"weekly_system_restart\":false,\"list_meetings_with_calendar\":true,\"zr_post_meeting_feedback\":false,\"ultrasonic\":false,\"force_private_meeting\":false,\"hide_host_information\":true,\"cmr_for_instant_meeting\":false,\"auto_start_stop_scheduled_meetings\":true}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "security",
													"value": "{\"admin_change_name_pic\":true,\"import_photos_from_devices\":true,\"hide_billing_info\":false,\"password_requirement\":{\"minimum_password_length\":11,\"have_special_character\":false,\"consecutive_characters_length\":-93049972,\"weak_enhance_detection\":true},\"sign_in_with_two_factor_auth\":\"role\",\"sign_again_period_for_inactivity_on_client\":48210358,\"sign_again_period_for_inactivity_on_web\":-94996726,\"sign_in_with_two_factor_auth_groups\":[\"amet cupidatat ut\",\"occaecat laborum\"],\"sign_in_with_two_factor_auth_roles\":[\"reprehenderit laborum eu\",\"mollit ut\"]}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "recording",
													"value": "{\"local_recording\":false,\"cloud_recording\":true,\"record_speaker_view\":false,\"record_gallery_view\":false,\"record_audio_file\":true,\"save_chat_text\":true,\"show_timestamp\":false,\"recording_audio_transcript\":true,\"auto_recording\":\"none\",\"cloud_recording_download\":false,\"cloud_recording_download_host\":false,\"account_user_access_recording\":false,\"auto_delete_cmr\":true,\"auto_delete_cmr_days\":60,\"recording_password_requirement\":{\"length\":-21874182,\"have_letter\":true,\"have_number\":false,\"have_special_character\":false,\"only_allow_numeric\":false},\"allow_recovery_deleted_cloud_recordings\":false,\"recording_disclaimer\":true,\"host_delete_cloud_recording\":false,\"required_password_for_existing_cloud_recordings\":false,\"prevent_host_access_recording\":false,\"ip_address_access_control\":{\"enable\":false,\"ip_addresses_or_ranges\":\"quis officia\"},\"archive\":{\"enable\":false,\"type\":3,\"settings\":{\"chat_file\":false,\"chat_with_sender_email\":false,\"audio_file\":false,\"video_file\":false,\"cc_transcript_file\":false}}}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "telephony",
													"value": "{\"third_party_audio\":true,\"audio_conference_info\":\"id enim ex\",\"telephony_regions\":{\"selection_values\":\"nostrud magna sint\"}}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "integration",
													"value": "{\"google_calendar\":true,\"google_drive\":false,\"dropbox\":true,\"box\":false,\"microsoft_one_drive\":false,\"kubi\":true}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "feature",
													"value": "{\"meeting_capacity\":74286822}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "tsp",
													"value": "{\"call_out\":true,\"show_international_numbers_link\":true,\"display_toll_free_numbers\":true}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "profile",
													"value": "{\"recording_storage_location\":{\"allowed_values\":[\"tempor sit pariatur nostrud eiusmod\",\"velit sint\"],\"value\":\"quis non in dolor\"}}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "other_options",
													"value": "{\"allow_auto_active_users\":true,\"blur_snapshot\":false,\"display_meetings_scheduled_for_others\":false,\"use_cdn\":\"none\",\"allow_users_contact_support_via_chat\":true,\"show_one_user_meeting_on_dashboard\":true,\"meeting_qos_and_mos\":0,\"allow_users_enter_and_share_pronouns\":false}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "audio_conferencing",
													"value": "{\"toll_free_and_fee_based_toll_call\":{\"enable\":true,\"numbers\":[{\"code\":\"ut in est Duis\",\"country_code\":\"quis ex labore Duis est\",\"country_name\":\"ut consequat proident\",\"number\":\"id in\",\"display_number\":\"minim\"},{\"code\":\"ex cupidatat min\",\"country_code\":\"in pariatur commodo do\",\"country_name\":\"minim\",\"number\":\"d\",\"display_number\":\"nostrud ad Dui\"}],\"allow_webinar_attendees_dial\":false}}",
													"description": "undefined",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/settings?option=recording_authentication",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"settings"
											],
											"query": [
												{
													"key": "option",
													"value": "recording_authentication"
												}
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The account's ID."
												}
											]
										},
										"description": "Update the settings of a sub account that is under a master account.<br> To update the settings of the master account, use `me` as the value of the `accountId` path parameter.<br><br>\n**Prerequisites**:\n * The sub account must be a paid account.<br>\n**Scopes**: `account:write:admin`\n<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**Error Code:** `200`<br> Only available for Paid account.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "schedule_meeting",
															"value": "{\"host_video\":true,\"participant_video\":false,\"audio_type\":\"both\",\"join_before_host\":true,\"jbh_time\":10,\"enforce_login\":true,\"enforce_login_with_domains\":true,\"enforce_login_domains\":\"sed aute\",\"not_store_meeting_topic\":true,\"force_pmi_jbh_password\":false,\"use_pmi_for_scheduled_meetings\":false,\"use_pmi_for_instant_meetings\":true,\"require_password_for_scheduling_new_meetings\":true,\"require_password_for_scheduled_meetings\":true,\"require_password_for_instant_meetings\":false,\"require_password_for_pmi_meetings\":\"all\",\"meeting_password_requirement\":{\"length\":11217341,\"have_letter\":false,\"have_number\":false,\"have_special_character\":true,\"only_allow_numeric\":true,\"have_upper_and_lower_characters\":true,\"consecutive_characters_length\":8,\"weak_enhance_detection\":true},\"personal_meeting\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "in_meeting",
															"value": "{\"e2e_encryption\":true,\"chat\":true,\"allow_participants_chat_with\":1,\"allow_users_save_chats\":2,\"private_chat\":false,\"auto_saving_chat\":false,\"entry_exit_chime\":\"host\",\"record_play_own_voice\":true,\"feedback\":true,\"post_meeting_feedback\":false,\"co_host\":false,\"polling\":false,\"attendee_on_hold\":false,\"show_meeting_control_toolbar\":true,\"allow_show_zoom_windows\":false,\"annotation\":true,\"whiteboard\":false,\"webinar_question_answer\":false,\"anonymous_question_answer\":false,\"breakout_room\":false,\"breakout_room_schedule\":false,\"closed_caption\":true,\"far_end_camera_control\":false,\"group_hd\":false,\"virtual_background\":false,\"virtual_background_settings\":{\"enable\":false,\"allow_videos\":true,\"allow_upload_custom\":true,\"files\":[{\"id\":\"anim sunt tempor\",\"name\":\"culpa Duis ex in\",\"type\":\"aliqua ut culpa\",\"is_default\":false,\"size\":\"velit in adipisicing\"},{\"id\":\"labore adipisicing magna\",\"name\":\"fugiat enim\",\"type\":\"sint magna cupidatat dolore ea\",\"is_default\":true,\"size\":\"in nulla ut deserun\"}]},\"watermark\":true,\"alert_guest_join\":true,\"auto_answer\":true,\"p2p_connetion\":true,\"p2p_ports\":false,\"ports_range\":\"\",\"sending_default_email_invites\":false,\"use_html_format_email\":true,\"dscp_marking\":true,\"dscp_audio\":22,\"dscp_video\":32,\"stereo_audio\":true,\"original_audio\":false,\"screen_sharing\":true,\"remote_control\":true,\"allow_live_streaming\":true,\"live_streaming_facebook\":false,\"workplace_by_facebook\":false,\"live_streaming_youtube\":false,\"custom_live_streaming_service\":true,\"custom_service_instructions\":\"qui cillum\",\"custom_data_center_regions\":true,\"data_center_regions\":\"AU\",\"meeting_reactions\":true,\"show_a_join_from_your_browser_link\":false,\"join_from_mobile\":false,\"join_from_desktop\":false,\"allow_participants_to_rename\":true,\"who_can_share_screen\":\"host\",\"who_can_share_screen_when_someone_is_sharing\":\"all\",\"file_transfer\":true,\"request_permission_to_unmute\":true,\"webinar_live_streaming\":{\"enable\":false,\"live_streaming_service\":[\"facebook\",\"youtube\"],\"custom_service_instructions\":\"deserunt veniam do ullamco\",\"live_streaming_reminder\":false},\"webinar_chat\":{\"enable\":false,\"allow_panelists_chat_with\":2,\"allow_attendees_chat_with\":1,\"default_attendees_chat_with\":1,\"allow_panelists_send_direct_message\":false,\"allow_users_save_chats\":2,\"allow_auto_save_local_chat_file\":true},\"closed_captioning\":{\"enable\":false,\"third_party_captioning_service\":true,\"auto_transcribing\":false,\"view_full_transcript\":true,\"save_caption\":false},\"slide_control\":false,\"meeting_survey\":true,\"webinar_polling\":{\"enable\":false,\"advanced_polls\":false},\"webinar_survey\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "email_notification",
															"value": "{\"cloud_recording_available_reminder\":true,\"recording_available_reminder_schedulers\":true,\"recording_available_reminder_alternative_hosts\":true,\"jbh_reminder\":true,\"cancel_meeting_reminder\":false,\"low_host_count_reminder\":true,\"alternative_host_reminder\":true,\"schedule_for_reminder\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "zoom_rooms",
															"value": "{\"upcoming_meeting_alert\":true,\"start_airplay_manually\":false,\"weekly_system_restart\":false,\"list_meetings_with_calendar\":false,\"zr_post_meeting_feedback\":false,\"ultrasonic\":true,\"force_private_meeting\":false,\"hide_host_information\":true,\"cmr_for_instant_meeting\":false,\"auto_start_stop_scheduled_meetings\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "security",
															"value": "{\"admin_change_name_pic\":true,\"import_photos_from_devices\":true,\"hide_billing_info\":true,\"password_requirement\":{\"minimum_password_length\":9,\"have_special_character\":true,\"consecutive_characters_length\":-21305929,\"weak_enhance_detection\":true},\"sign_in_with_two_factor_auth\":\"all\",\"sign_again_period_for_inactivity_on_client\":-91385216,\"sign_again_period_for_inactivity_on_web\":-83927887,\"sign_in_with_two_factor_auth_groups\":[\"in velit tempor sint\",\"consequat\"],\"sign_in_with_two_factor_auth_roles\":[\"vo\",\"eiusmod\"]}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "recording",
															"value": "{\"local_recording\":false,\"cloud_recording\":true,\"record_speaker_view\":false,\"record_gallery_view\":true,\"record_audio_file\":false,\"save_chat_text\":false,\"show_timestamp\":true,\"recording_audio_transcript\":false,\"auto_recording\":\"none\",\"cloud_recording_download\":true,\"cloud_recording_download_host\":true,\"account_user_access_recording\":true,\"auto_delete_cmr\":true,\"auto_delete_cmr_days\":60,\"recording_password_requirement\":{\"length\":-44366390,\"have_letter\":true,\"have_number\":false,\"have_special_character\":true,\"only_allow_numeric\":false},\"allow_recovery_deleted_cloud_recordings\":false,\"recording_disclaimer\":true,\"host_delete_cloud_recording\":true,\"required_password_for_existing_cloud_recordings\":true,\"prevent_host_access_recording\":false,\"ip_address_access_control\":{\"enable\":true,\"ip_addresses_or_ranges\":\"exercitation labore dolor\"},\"archive\":{\"enable\":false,\"type\":1,\"settings\":{\"chat_file\":true,\"chat_with_sender_email\":true,\"audio_file\":true,\"video_file\":false,\"cc_transcript_file\":false}}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "telephony",
															"value": "{\"third_party_audio\":true,\"audio_conference_info\":\"nisi minim\",\"telephony_regions\":{\"selection_values\":\"consequat magna\"}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "integration",
															"value": "{\"google_calendar\":true,\"google_drive\":false,\"dropbox\":true,\"box\":false,\"microsoft_one_drive\":true,\"kubi\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "feature",
															"value": "{\"meeting_capacity\":20922293}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "tsp",
															"value": "{\"call_out\":false,\"show_international_numbers_link\":false,\"display_toll_free_numbers\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "profile",
															"value": "{\"recording_storage_location\":{\"allowed_values\":[\"Lorem in\",\"ad officia\"],\"value\":\"laboris ex nostrud sint laborum\"}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "other_options",
															"value": "{\"allow_auto_active_users\":true,\"blur_snapshot\":true,\"display_meetings_scheduled_for_others\":false,\"use_cdn\":\"none\",\"allow_users_contact_support_via_chat\":false,\"show_one_user_meeting_on_dashboard\":true,\"meeting_qos_and_mos\":1,\"allow_users_enter_and_share_pronouns\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "audio_conferencing",
															"value": "{\"toll_free_and_fee_based_toll_call\":{\"enable\":false,\"numbers\":[{\"code\":\"nulla magna aute dolor\",\"country_code\":\"irure ullamco consecte\",\"country_name\":\"ut aliquip dolor enim\",\"number\":\"laborum ea minim\",\"display_number\":\"consectet\"},{\"code\":\"reprehenderit commodo Excepteur culp\",\"country_code\":\"pariatur incididunt in officia anim\",\"country_name\":\"sunt in Lorem\",\"number\":\"voluptate quis dol\",\"display_number\":\"eu cupidatat\"}],\"allow_webinar_attendees_dial\":false}}",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/settings?option=recording_authentication",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"settings"
													],
													"query": [
														{
															"key": "option",
															"value": "recording_authentication"
														}
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's ID."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `204` <br>Account settings updated.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "schedule_meeting",
															"value": "{\"host_video\":true,\"participant_video\":false,\"audio_type\":\"both\",\"join_before_host\":true,\"jbh_time\":10,\"enforce_login\":true,\"enforce_login_with_domains\":true,\"enforce_login_domains\":\"sed aute\",\"not_store_meeting_topic\":true,\"force_pmi_jbh_password\":false,\"use_pmi_for_scheduled_meetings\":false,\"use_pmi_for_instant_meetings\":true,\"require_password_for_scheduling_new_meetings\":true,\"require_password_for_scheduled_meetings\":true,\"require_password_for_instant_meetings\":false,\"require_password_for_pmi_meetings\":\"all\",\"meeting_password_requirement\":{\"length\":11217341,\"have_letter\":false,\"have_number\":false,\"have_special_character\":true,\"only_allow_numeric\":true,\"have_upper_and_lower_characters\":true,\"consecutive_characters_length\":8,\"weak_enhance_detection\":true},\"personal_meeting\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "in_meeting",
															"value": "{\"e2e_encryption\":true,\"chat\":true,\"allow_participants_chat_with\":1,\"allow_users_save_chats\":2,\"private_chat\":false,\"auto_saving_chat\":false,\"entry_exit_chime\":\"host\",\"record_play_own_voice\":true,\"feedback\":true,\"post_meeting_feedback\":false,\"co_host\":false,\"polling\":false,\"attendee_on_hold\":false,\"show_meeting_control_toolbar\":true,\"allow_show_zoom_windows\":false,\"annotation\":true,\"whiteboard\":false,\"webinar_question_answer\":false,\"anonymous_question_answer\":false,\"breakout_room\":false,\"breakout_room_schedule\":false,\"closed_caption\":true,\"far_end_camera_control\":false,\"group_hd\":false,\"virtual_background\":false,\"virtual_background_settings\":{\"enable\":false,\"allow_videos\":true,\"allow_upload_custom\":true,\"files\":[{\"id\":\"anim sunt tempor\",\"name\":\"culpa Duis ex in\",\"type\":\"aliqua ut culpa\",\"is_default\":false,\"size\":\"velit in adipisicing\"},{\"id\":\"labore adipisicing magna\",\"name\":\"fugiat enim\",\"type\":\"sint magna cupidatat dolore ea\",\"is_default\":true,\"size\":\"in nulla ut deserun\"}]},\"watermark\":true,\"alert_guest_join\":true,\"auto_answer\":true,\"p2p_connetion\":true,\"p2p_ports\":false,\"ports_range\":\"\",\"sending_default_email_invites\":false,\"use_html_format_email\":true,\"dscp_marking\":true,\"dscp_audio\":22,\"dscp_video\":32,\"stereo_audio\":true,\"original_audio\":false,\"screen_sharing\":true,\"remote_control\":true,\"allow_live_streaming\":true,\"live_streaming_facebook\":false,\"workplace_by_facebook\":false,\"live_streaming_youtube\":false,\"custom_live_streaming_service\":true,\"custom_service_instructions\":\"qui cillum\",\"custom_data_center_regions\":true,\"data_center_regions\":\"AU\",\"meeting_reactions\":true,\"show_a_join_from_your_browser_link\":false,\"join_from_mobile\":false,\"join_from_desktop\":false,\"allow_participants_to_rename\":true,\"who_can_share_screen\":\"host\",\"who_can_share_screen_when_someone_is_sharing\":\"all\",\"file_transfer\":true,\"request_permission_to_unmute\":true,\"webinar_live_streaming\":{\"enable\":false,\"live_streaming_service\":[\"facebook\",\"youtube\"],\"custom_service_instructions\":\"deserunt veniam do ullamco\",\"live_streaming_reminder\":false},\"webinar_chat\":{\"enable\":false,\"allow_panelists_chat_with\":2,\"allow_attendees_chat_with\":1,\"default_attendees_chat_with\":1,\"allow_panelists_send_direct_message\":false,\"allow_users_save_chats\":2,\"allow_auto_save_local_chat_file\":true},\"closed_captioning\":{\"enable\":false,\"third_party_captioning_service\":true,\"auto_transcribing\":false,\"view_full_transcript\":true,\"save_caption\":false},\"slide_control\":false,\"meeting_survey\":true,\"webinar_polling\":{\"enable\":false,\"advanced_polls\":false},\"webinar_survey\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "email_notification",
															"value": "{\"cloud_recording_available_reminder\":true,\"recording_available_reminder_schedulers\":true,\"recording_available_reminder_alternative_hosts\":true,\"jbh_reminder\":true,\"cancel_meeting_reminder\":false,\"low_host_count_reminder\":true,\"alternative_host_reminder\":true,\"schedule_for_reminder\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "zoom_rooms",
															"value": "{\"upcoming_meeting_alert\":true,\"start_airplay_manually\":false,\"weekly_system_restart\":false,\"list_meetings_with_calendar\":false,\"zr_post_meeting_feedback\":false,\"ultrasonic\":true,\"force_private_meeting\":false,\"hide_host_information\":true,\"cmr_for_instant_meeting\":false,\"auto_start_stop_scheduled_meetings\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "security",
															"value": "{\"admin_change_name_pic\":true,\"import_photos_from_devices\":true,\"hide_billing_info\":true,\"password_requirement\":{\"minimum_password_length\":9,\"have_special_character\":true,\"consecutive_characters_length\":-21305929,\"weak_enhance_detection\":true},\"sign_in_with_two_factor_auth\":\"all\",\"sign_again_period_for_inactivity_on_client\":-91385216,\"sign_again_period_for_inactivity_on_web\":-83927887,\"sign_in_with_two_factor_auth_groups\":[\"in velit tempor sint\",\"consequat\"],\"sign_in_with_two_factor_auth_roles\":[\"vo\",\"eiusmod\"]}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "recording",
															"value": "{\"local_recording\":false,\"cloud_recording\":true,\"record_speaker_view\":false,\"record_gallery_view\":true,\"record_audio_file\":false,\"save_chat_text\":false,\"show_timestamp\":true,\"recording_audio_transcript\":false,\"auto_recording\":\"none\",\"cloud_recording_download\":true,\"cloud_recording_download_host\":true,\"account_user_access_recording\":true,\"auto_delete_cmr\":true,\"auto_delete_cmr_days\":60,\"recording_password_requirement\":{\"length\":-44366390,\"have_letter\":true,\"have_number\":false,\"have_special_character\":true,\"only_allow_numeric\":false},\"allow_recovery_deleted_cloud_recordings\":false,\"recording_disclaimer\":true,\"host_delete_cloud_recording\":true,\"required_password_for_existing_cloud_recordings\":true,\"prevent_host_access_recording\":false,\"ip_address_access_control\":{\"enable\":true,\"ip_addresses_or_ranges\":\"exercitation labore dolor\"},\"archive\":{\"enable\":false,\"type\":1,\"settings\":{\"chat_file\":true,\"chat_with_sender_email\":true,\"audio_file\":true,\"video_file\":false,\"cc_transcript_file\":false}}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "telephony",
															"value": "{\"third_party_audio\":true,\"audio_conference_info\":\"nisi minim\",\"telephony_regions\":{\"selection_values\":\"consequat magna\"}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "integration",
															"value": "{\"google_calendar\":true,\"google_drive\":false,\"dropbox\":true,\"box\":false,\"microsoft_one_drive\":true,\"kubi\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "feature",
															"value": "{\"meeting_capacity\":20922293}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "tsp",
															"value": "{\"call_out\":false,\"show_international_numbers_link\":false,\"display_toll_free_numbers\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "profile",
															"value": "{\"recording_storage_location\":{\"allowed_values\":[\"Lorem in\",\"ad officia\"],\"value\":\"laboris ex nostrud sint laborum\"}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "other_options",
															"value": "{\"allow_auto_active_users\":true,\"blur_snapshot\":true,\"display_meetings_scheduled_for_others\":false,\"use_cdn\":\"none\",\"allow_users_contact_support_via_chat\":false,\"show_one_user_meeting_on_dashboard\":true,\"meeting_qos_and_mos\":1,\"allow_users_enter_and_share_pronouns\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "audio_conferencing",
															"value": "{\"toll_free_and_fee_based_toll_call\":{\"enable\":false,\"numbers\":[{\"code\":\"nulla magna aute dolor\",\"country_code\":\"irure ullamco consecte\",\"country_name\":\"ut aliquip dolor enim\",\"number\":\"laborum ea minim\",\"display_number\":\"consectet\"},{\"code\":\"reprehenderit commodo Excepteur culp\",\"country_code\":\"pariatur incididunt in officia anim\",\"country_name\":\"sunt in Lorem\",\"number\":\"voluptate quis dol\",\"display_number\":\"eu cupidatat\"}],\"allow_webinar_attendees_dial\":false}}",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/settings?option=recording_authentication",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"settings"
													],
													"query": [
														{
															"key": "option",
															"value": "recording_authentication"
														}
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's ID."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**Error Code:** `300` <br>The domains provided are invalid. If you are providing multiple domains, separate each domain with a comma.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "schedule_meeting",
															"value": "{\"host_video\":true,\"participant_video\":false,\"audio_type\":\"both\",\"join_before_host\":true,\"jbh_time\":10,\"enforce_login\":true,\"enforce_login_with_domains\":true,\"enforce_login_domains\":\"sed aute\",\"not_store_meeting_topic\":true,\"force_pmi_jbh_password\":false,\"use_pmi_for_scheduled_meetings\":false,\"use_pmi_for_instant_meetings\":true,\"require_password_for_scheduling_new_meetings\":true,\"require_password_for_scheduled_meetings\":true,\"require_password_for_instant_meetings\":false,\"require_password_for_pmi_meetings\":\"all\",\"meeting_password_requirement\":{\"length\":11217341,\"have_letter\":false,\"have_number\":false,\"have_special_character\":true,\"only_allow_numeric\":true,\"have_upper_and_lower_characters\":true,\"consecutive_characters_length\":8,\"weak_enhance_detection\":true},\"personal_meeting\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "in_meeting",
															"value": "{\"e2e_encryption\":true,\"chat\":true,\"allow_participants_chat_with\":1,\"allow_users_save_chats\":2,\"private_chat\":false,\"auto_saving_chat\":false,\"entry_exit_chime\":\"host\",\"record_play_own_voice\":true,\"feedback\":true,\"post_meeting_feedback\":false,\"co_host\":false,\"polling\":false,\"attendee_on_hold\":false,\"show_meeting_control_toolbar\":true,\"allow_show_zoom_windows\":false,\"annotation\":true,\"whiteboard\":false,\"webinar_question_answer\":false,\"anonymous_question_answer\":false,\"breakout_room\":false,\"breakout_room_schedule\":false,\"closed_caption\":true,\"far_end_camera_control\":false,\"group_hd\":false,\"virtual_background\":false,\"virtual_background_settings\":{\"enable\":false,\"allow_videos\":true,\"allow_upload_custom\":true,\"files\":[{\"id\":\"anim sunt tempor\",\"name\":\"culpa Duis ex in\",\"type\":\"aliqua ut culpa\",\"is_default\":false,\"size\":\"velit in adipisicing\"},{\"id\":\"labore adipisicing magna\",\"name\":\"fugiat enim\",\"type\":\"sint magna cupidatat dolore ea\",\"is_default\":true,\"size\":\"in nulla ut deserun\"}]},\"watermark\":true,\"alert_guest_join\":true,\"auto_answer\":true,\"p2p_connetion\":true,\"p2p_ports\":false,\"ports_range\":\"\",\"sending_default_email_invites\":false,\"use_html_format_email\":true,\"dscp_marking\":true,\"dscp_audio\":22,\"dscp_video\":32,\"stereo_audio\":true,\"original_audio\":false,\"screen_sharing\":true,\"remote_control\":true,\"allow_live_streaming\":true,\"live_streaming_facebook\":false,\"workplace_by_facebook\":false,\"live_streaming_youtube\":false,\"custom_live_streaming_service\":true,\"custom_service_instructions\":\"qui cillum\",\"custom_data_center_regions\":true,\"data_center_regions\":\"AU\",\"meeting_reactions\":true,\"show_a_join_from_your_browser_link\":false,\"join_from_mobile\":false,\"join_from_desktop\":false,\"allow_participants_to_rename\":true,\"who_can_share_screen\":\"host\",\"who_can_share_screen_when_someone_is_sharing\":\"all\",\"file_transfer\":true,\"request_permission_to_unmute\":true,\"webinar_live_streaming\":{\"enable\":false,\"live_streaming_service\":[\"facebook\",\"youtube\"],\"custom_service_instructions\":\"deserunt veniam do ullamco\",\"live_streaming_reminder\":false},\"webinar_chat\":{\"enable\":false,\"allow_panelists_chat_with\":2,\"allow_attendees_chat_with\":1,\"default_attendees_chat_with\":1,\"allow_panelists_send_direct_message\":false,\"allow_users_save_chats\":2,\"allow_auto_save_local_chat_file\":true},\"closed_captioning\":{\"enable\":false,\"third_party_captioning_service\":true,\"auto_transcribing\":false,\"view_full_transcript\":true,\"save_caption\":false},\"slide_control\":false,\"meeting_survey\":true,\"webinar_polling\":{\"enable\":false,\"advanced_polls\":false},\"webinar_survey\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "email_notification",
															"value": "{\"cloud_recording_available_reminder\":true,\"recording_available_reminder_schedulers\":true,\"recording_available_reminder_alternative_hosts\":true,\"jbh_reminder\":true,\"cancel_meeting_reminder\":false,\"low_host_count_reminder\":true,\"alternative_host_reminder\":true,\"schedule_for_reminder\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "zoom_rooms",
															"value": "{\"upcoming_meeting_alert\":true,\"start_airplay_manually\":false,\"weekly_system_restart\":false,\"list_meetings_with_calendar\":false,\"zr_post_meeting_feedback\":false,\"ultrasonic\":true,\"force_private_meeting\":false,\"hide_host_information\":true,\"cmr_for_instant_meeting\":false,\"auto_start_stop_scheduled_meetings\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "security",
															"value": "{\"admin_change_name_pic\":true,\"import_photos_from_devices\":true,\"hide_billing_info\":true,\"password_requirement\":{\"minimum_password_length\":9,\"have_special_character\":true,\"consecutive_characters_length\":-21305929,\"weak_enhance_detection\":true},\"sign_in_with_two_factor_auth\":\"all\",\"sign_again_period_for_inactivity_on_client\":-91385216,\"sign_again_period_for_inactivity_on_web\":-83927887,\"sign_in_with_two_factor_auth_groups\":[\"in velit tempor sint\",\"consequat\"],\"sign_in_with_two_factor_auth_roles\":[\"vo\",\"eiusmod\"]}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "recording",
															"value": "{\"local_recording\":false,\"cloud_recording\":true,\"record_speaker_view\":false,\"record_gallery_view\":true,\"record_audio_file\":false,\"save_chat_text\":false,\"show_timestamp\":true,\"recording_audio_transcript\":false,\"auto_recording\":\"none\",\"cloud_recording_download\":true,\"cloud_recording_download_host\":true,\"account_user_access_recording\":true,\"auto_delete_cmr\":true,\"auto_delete_cmr_days\":60,\"recording_password_requirement\":{\"length\":-44366390,\"have_letter\":true,\"have_number\":false,\"have_special_character\":true,\"only_allow_numeric\":false},\"allow_recovery_deleted_cloud_recordings\":false,\"recording_disclaimer\":true,\"host_delete_cloud_recording\":true,\"required_password_for_existing_cloud_recordings\":true,\"prevent_host_access_recording\":false,\"ip_address_access_control\":{\"enable\":true,\"ip_addresses_or_ranges\":\"exercitation labore dolor\"},\"archive\":{\"enable\":false,\"type\":1,\"settings\":{\"chat_file\":true,\"chat_with_sender_email\":true,\"audio_file\":true,\"video_file\":false,\"cc_transcript_file\":false}}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "telephony",
															"value": "{\"third_party_audio\":true,\"audio_conference_info\":\"nisi minim\",\"telephony_regions\":{\"selection_values\":\"consequat magna\"}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "integration",
															"value": "{\"google_calendar\":true,\"google_drive\":false,\"dropbox\":true,\"box\":false,\"microsoft_one_drive\":true,\"kubi\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "feature",
															"value": "{\"meeting_capacity\":20922293}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "tsp",
															"value": "{\"call_out\":false,\"show_international_numbers_link\":false,\"display_toll_free_numbers\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "profile",
															"value": "{\"recording_storage_location\":{\"allowed_values\":[\"Lorem in\",\"ad officia\"],\"value\":\"laboris ex nostrud sint laborum\"}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "other_options",
															"value": "{\"allow_auto_active_users\":true,\"blur_snapshot\":true,\"display_meetings_scheduled_for_others\":false,\"use_cdn\":\"none\",\"allow_users_contact_support_via_chat\":false,\"show_one_user_meeting_on_dashboard\":true,\"meeting_qos_and_mos\":1,\"allow_users_enter_and_share_pronouns\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "audio_conferencing",
															"value": "{\"toll_free_and_fee_based_toll_call\":{\"enable\":false,\"numbers\":[{\"code\":\"nulla magna aute dolor\",\"country_code\":\"irure ullamco consecte\",\"country_name\":\"ut aliquip dolor enim\",\"number\":\"laborum ea minim\",\"display_number\":\"consectet\"},{\"code\":\"reprehenderit commodo Excepteur culp\",\"country_code\":\"pariatur incididunt in officia anim\",\"country_name\":\"sunt in Lorem\",\"number\":\"voluptate quis dol\",\"display_number\":\"eu cupidatat\"}],\"allow_webinar_attendees_dial\":false}}",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/settings?option=recording_authentication",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"settings"
													],
													"query": [
														{
															"key": "option",
															"value": "recording_authentication"
														}
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's ID."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `2001`<br>Account does not exist: $subAccountId.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "schedule_meeting",
															"value": "{\"host_video\":true,\"participant_video\":false,\"audio_type\":\"both\",\"join_before_host\":true,\"jbh_time\":10,\"enforce_login\":true,\"enforce_login_with_domains\":true,\"enforce_login_domains\":\"sed aute\",\"not_store_meeting_topic\":true,\"force_pmi_jbh_password\":false,\"use_pmi_for_scheduled_meetings\":false,\"use_pmi_for_instant_meetings\":true,\"require_password_for_scheduling_new_meetings\":true,\"require_password_for_scheduled_meetings\":true,\"require_password_for_instant_meetings\":false,\"require_password_for_pmi_meetings\":\"all\",\"meeting_password_requirement\":{\"length\":11217341,\"have_letter\":false,\"have_number\":false,\"have_special_character\":true,\"only_allow_numeric\":true,\"have_upper_and_lower_characters\":true,\"consecutive_characters_length\":8,\"weak_enhance_detection\":true},\"personal_meeting\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "in_meeting",
															"value": "{\"e2e_encryption\":true,\"chat\":true,\"allow_participants_chat_with\":1,\"allow_users_save_chats\":2,\"private_chat\":false,\"auto_saving_chat\":false,\"entry_exit_chime\":\"host\",\"record_play_own_voice\":true,\"feedback\":true,\"post_meeting_feedback\":false,\"co_host\":false,\"polling\":false,\"attendee_on_hold\":false,\"show_meeting_control_toolbar\":true,\"allow_show_zoom_windows\":false,\"annotation\":true,\"whiteboard\":false,\"webinar_question_answer\":false,\"anonymous_question_answer\":false,\"breakout_room\":false,\"breakout_room_schedule\":false,\"closed_caption\":true,\"far_end_camera_control\":false,\"group_hd\":false,\"virtual_background\":false,\"virtual_background_settings\":{\"enable\":false,\"allow_videos\":true,\"allow_upload_custom\":true,\"files\":[{\"id\":\"anim sunt tempor\",\"name\":\"culpa Duis ex in\",\"type\":\"aliqua ut culpa\",\"is_default\":false,\"size\":\"velit in adipisicing\"},{\"id\":\"labore adipisicing magna\",\"name\":\"fugiat enim\",\"type\":\"sint magna cupidatat dolore ea\",\"is_default\":true,\"size\":\"in nulla ut deserun\"}]},\"watermark\":true,\"alert_guest_join\":true,\"auto_answer\":true,\"p2p_connetion\":true,\"p2p_ports\":false,\"ports_range\":\"\",\"sending_default_email_invites\":false,\"use_html_format_email\":true,\"dscp_marking\":true,\"dscp_audio\":22,\"dscp_video\":32,\"stereo_audio\":true,\"original_audio\":false,\"screen_sharing\":true,\"remote_control\":true,\"allow_live_streaming\":true,\"live_streaming_facebook\":false,\"workplace_by_facebook\":false,\"live_streaming_youtube\":false,\"custom_live_streaming_service\":true,\"custom_service_instructions\":\"qui cillum\",\"custom_data_center_regions\":true,\"data_center_regions\":\"AU\",\"meeting_reactions\":true,\"show_a_join_from_your_browser_link\":false,\"join_from_mobile\":false,\"join_from_desktop\":false,\"allow_participants_to_rename\":true,\"who_can_share_screen\":\"host\",\"who_can_share_screen_when_someone_is_sharing\":\"all\",\"file_transfer\":true,\"request_permission_to_unmute\":true,\"webinar_live_streaming\":{\"enable\":false,\"live_streaming_service\":[\"facebook\",\"youtube\"],\"custom_service_instructions\":\"deserunt veniam do ullamco\",\"live_streaming_reminder\":false},\"webinar_chat\":{\"enable\":false,\"allow_panelists_chat_with\":2,\"allow_attendees_chat_with\":1,\"default_attendees_chat_with\":1,\"allow_panelists_send_direct_message\":false,\"allow_users_save_chats\":2,\"allow_auto_save_local_chat_file\":true},\"closed_captioning\":{\"enable\":false,\"third_party_captioning_service\":true,\"auto_transcribing\":false,\"view_full_transcript\":true,\"save_caption\":false},\"slide_control\":false,\"meeting_survey\":true,\"webinar_polling\":{\"enable\":false,\"advanced_polls\":false},\"webinar_survey\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "email_notification",
															"value": "{\"cloud_recording_available_reminder\":true,\"recording_available_reminder_schedulers\":true,\"recording_available_reminder_alternative_hosts\":true,\"jbh_reminder\":true,\"cancel_meeting_reminder\":false,\"low_host_count_reminder\":true,\"alternative_host_reminder\":true,\"schedule_for_reminder\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "zoom_rooms",
															"value": "{\"upcoming_meeting_alert\":true,\"start_airplay_manually\":false,\"weekly_system_restart\":false,\"list_meetings_with_calendar\":false,\"zr_post_meeting_feedback\":false,\"ultrasonic\":true,\"force_private_meeting\":false,\"hide_host_information\":true,\"cmr_for_instant_meeting\":false,\"auto_start_stop_scheduled_meetings\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "security",
															"value": "{\"admin_change_name_pic\":true,\"import_photos_from_devices\":true,\"hide_billing_info\":true,\"password_requirement\":{\"minimum_password_length\":9,\"have_special_character\":true,\"consecutive_characters_length\":-21305929,\"weak_enhance_detection\":true},\"sign_in_with_two_factor_auth\":\"all\",\"sign_again_period_for_inactivity_on_client\":-91385216,\"sign_again_period_for_inactivity_on_web\":-83927887,\"sign_in_with_two_factor_auth_groups\":[\"in velit tempor sint\",\"consequat\"],\"sign_in_with_two_factor_auth_roles\":[\"vo\",\"eiusmod\"]}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "recording",
															"value": "{\"local_recording\":false,\"cloud_recording\":true,\"record_speaker_view\":false,\"record_gallery_view\":true,\"record_audio_file\":false,\"save_chat_text\":false,\"show_timestamp\":true,\"recording_audio_transcript\":false,\"auto_recording\":\"none\",\"cloud_recording_download\":true,\"cloud_recording_download_host\":true,\"account_user_access_recording\":true,\"auto_delete_cmr\":true,\"auto_delete_cmr_days\":60,\"recording_password_requirement\":{\"length\":-44366390,\"have_letter\":true,\"have_number\":false,\"have_special_character\":true,\"only_allow_numeric\":false},\"allow_recovery_deleted_cloud_recordings\":false,\"recording_disclaimer\":true,\"host_delete_cloud_recording\":true,\"required_password_for_existing_cloud_recordings\":true,\"prevent_host_access_recording\":false,\"ip_address_access_control\":{\"enable\":true,\"ip_addresses_or_ranges\":\"exercitation labore dolor\"},\"archive\":{\"enable\":false,\"type\":1,\"settings\":{\"chat_file\":true,\"chat_with_sender_email\":true,\"audio_file\":true,\"video_file\":false,\"cc_transcript_file\":false}}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "telephony",
															"value": "{\"third_party_audio\":true,\"audio_conference_info\":\"nisi minim\",\"telephony_regions\":{\"selection_values\":\"consequat magna\"}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "integration",
															"value": "{\"google_calendar\":true,\"google_drive\":false,\"dropbox\":true,\"box\":false,\"microsoft_one_drive\":true,\"kubi\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "feature",
															"value": "{\"meeting_capacity\":20922293}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "tsp",
															"value": "{\"call_out\":false,\"show_international_numbers_link\":false,\"display_toll_free_numbers\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "profile",
															"value": "{\"recording_storage_location\":{\"allowed_values\":[\"Lorem in\",\"ad officia\"],\"value\":\"laboris ex nostrud sint laborum\"}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "other_options",
															"value": "{\"allow_auto_active_users\":true,\"blur_snapshot\":true,\"display_meetings_scheduled_for_others\":false,\"use_cdn\":\"none\",\"allow_users_contact_support_via_chat\":false,\"show_one_user_meeting_on_dashboard\":true,\"meeting_qos_and_mos\":1,\"allow_users_enter_and_share_pronouns\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "audio_conferencing",
															"value": "{\"toll_free_and_fee_based_toll_call\":{\"enable\":false,\"numbers\":[{\"code\":\"nulla magna aute dolor\",\"country_code\":\"irure ullamco consecte\",\"country_name\":\"ut aliquip dolor enim\",\"number\":\"laborum ea minim\",\"display_number\":\"consectet\"},{\"code\":\"reprehenderit commodo Excepteur culp\",\"country_code\":\"pariatur incididunt in officia anim\",\"country_name\":\"sunt in Lorem\",\"number\":\"voluptate quis dol\",\"display_number\":\"eu cupidatat\"}],\"allow_webinar_attendees_dial\":false}}",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/settings?option=recording_authentication",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"settings"
													],
													"query": [
														{
															"key": "option",
															"value": "recording_authentication"
														}
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "billing",
							"item": [
								{
									"name": "invoices",
									"item": [
										{
											"name": "List billing invoices",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/billing/invoices?from=1948-05-09&to=1948-05-09",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"billing",
														"invoices"
													],
													"query": [
														{
															"key": "from",
															"value": "1948-05-09",
															"description": "Start date for the invoice query in `yyyy-mm-dd` format. The date range defined by the “from” and “to” parameters should not exceed one year. The range defined should fall within the past three years.\n"
														},
														{
															"key": "to",
															"value": "1948-05-09",
															"description": "End date for the invoice query in `yyyy-mm-dd` format"
														}
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account ID."
														}
													]
												},
												"description": "List [invoices](https://support.zoom.us/hc/en-us/articles/207276556-Viewing-your-invoice-history#h_6710542f-23cc-4059-9cc7-ff02bec7314e) of a Zoom account.\n\nTo list a regular Zoom account's invoices or a master account's invoices, provide `me` as the value of the `accountId` path parameter. To list a sub account's invoices, provide the account ID of the sub account in the `accountId` path parameter. \n\n**Prerequisites:**\n* Account must be enrolled in Pro or a higher plan.<br>\n\n**Scope**:`billing:master`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Additional Rate Limit:** You can make **one** API request per account(`accountId`) every **five** minutes until the daily limit is reached. This API has a daily limit of **6** requests per account(`accountId`)."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\nAccount billing invoice information returned.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/billing/invoices?from=1948-05-09&to=1948-05-09",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"billing",
																"invoices"
															],
															"query": [
																{
																	"key": "from",
																	"value": "1948-05-09"
																},
																{
																	"key": "to",
																	"value": "1948-05-09"
																}
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The account ID."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"invoices\": [\n  {\n   \"id\": \"2c92c12348d07e0580\",\n   \"invoice_number\": \"S8INsdf4534000001\",\n   \"total_amount\": 2039,\n   \"tax_amount\": 0,\n   \"balance\": 2039,\n   \"due_date\": \"2020-08-07\",\n   \"invoice_date\": \"2020-08-07\",\n   \"target_date\": \"2020-08-07\",\n   \"status\": \"Draft\"\n  }\n ],\n \"currency\": \"USD\"\n}"
												},
												{
													"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `200`<br>\nOnly available for Paid account: {subAccountId}.\n**Error Code:** `2001`<br>\nAccount does not exist: {subAccountId}.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/billing/invoices?from=1948-05-09&to=1948-05-09",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"billing",
																"invoices"
															],
															"query": [
																{
																	"key": "from",
																	"value": "1948-05-09"
																},
																{
																	"key": "to",
																	"value": "1948-05-09"
																}
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The account ID."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get invoice details",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/billing/invoices/:invoiceId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"billing",
														"invoices",
														":invoiceId"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account ID."
														},
														{
															"key": "invoiceId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The invoice ID."
														}
													]
												},
												"description": "Get detailed information about a specific [invoice](https://support.zoom.us/hc/en-us/articles/207276556-Viewing-your-invoice-history#h_6710542f-23cc-4059-9cc7-ff02bec7314e). <br>To retrieve a regular Zoom account's invoice details or a master account's invoice details, provide `me` as the value of `accountId` path parameter. To list a sub account's invoice details, provide the account ID of the sub account in the `accountId` path parameter. \n\n**Prerequisites:**\n* Account must be enrolled in Pro or a higher plan. <br>\n\n**Scope**:`billing:master`<br>\n<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Additional Rate Limit:** You can make **one** API request every **thirty** minutes until the daily limit is reached. This API has a daily limit of **100** requests per **account**."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\nAccount billing invoice information returned.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/billing/invoices/:invoiceId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"billing",
																"invoices",
																":invoiceId"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The account ID."
																},
																{
																	"key": "invoiceId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The invoice ID."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"id\": \"2c92fghvb0580\",\n \"invoice_number\": \"Shjmr5INV00000001\",\n \"total_amount\": 2039,\n \"tax_amount\": 0,\n \"balance\": 2039,\n \"due_date\": \"2020-08-07\",\n \"invoice_date\": \"2020-08-07\",\n \"target_date\": \"2020-08-07\",\n \"status\": \"Draft\",\n \"invoice_items\": [\n  {\n   \"charge_name\": \"Standard Biz Annual\",\n   \"charge_type\": \"Recurring\",\n   \"charge_number\": \"C-00000004\",\n   \"total_amount\": 1999,\n   \"tax_amount\": 0,\n   \"quantity\": 10,\n   \"start_date\": \"2020-08-07\",\n   \"end_date\": \"2021-08-06\",\n   \"purchase_order_number\": \"1234556\",\n   \"partner_sku\": \"PAR1-PRO-BASE-NH2Y\"\n  },\n  {\n   \"charge_name\": \"Cloud Recording 100 GB\",\n   \"charge_type\": \"Recurring\",\n   \"charge_number\": \"C-00000005\",\n   \"total_amount\": 40,\n   \"tax_amount\": 0,\n   \"quantity\": 1,\n   \"start_date\": \"2020-08-07\",\n   \"end_date\": \"2020-09-06\",\n   \"purchase_order_number\": \"1234567\",\n   \"partner_sku\": \"PAR-PAYONGO-INCL\"\n  }\n ],\n \"currency\": \"USD\"\n}"
												},
												{
													"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `2001`<br>\nAccount does not exist: {subAccountId}.<br>\nInvoiceId does not exist: {invoiceId}.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/billing/invoices/:invoiceId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"billing",
																"invoices",
																":invoiceId"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The account ID."
																},
																{
																	"key": "invoiceId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The invoice ID."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get billing information",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/billing",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"billing"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The account's ID."
												}
											]
										},
										"description": "Get [billing information](https://support.zoom.us/hc/en-us/articles/201363263-About-Billing) of a sub account.<br><br>Only master accounts can use this API. Zoom allows only [approved partners](https://marketplace.zoom.us/docs/api-reference/master-account-apis) to use master APIs and manage sub accounts' billing information. Email the partner programs team at **partner-success@zoom.us** for more details.<br>\n\n**Prerequisites:**\n* Pro or a higher paid account with master account option enabled. <br>\n\n**Scope**:`billing:master`, `billing_plan:read:admin`<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nAccount billing contact information returned.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/billing",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"billing"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's ID."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"first_name\": \"string\",\n \"last_name\": \"string\",\n \"email\": \"string\",\n \"phone_number\": \"string\",\n \"address\": \"string\",\n \"apt\": \"string\",\n \"city\": \"string\",\n \"state\": \"string\",\n \"zip\": \"string\",\n \"country\": \"string\"\n}"
										},
										{
											"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `2100`<br> \nThis sub account is on self pay mode.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/billing",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"billing"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's ID."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `2001`<br>\nAccount does not exist: {subAccountId}.\n\n\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/billing",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"billing"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update billing information",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "first_name",
													"value": "do labore id",
													"description": "Billing Contact's first name.",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "ad irure voluptate",
													"description": "Billing Contact's last name.",
													"type": "text"
												},
												{
													"key": "email",
													"value": "Duis do",
													"description": "Billing Contact's email address.",
													"type": "text"
												},
												{
													"key": "phone_number",
													"value": "",
													"description": "Billing Contact's phone number.",
													"type": "text"
												},
												{
													"key": "address",
													"value": "velit tempor eu ad",
													"description": "Billing Contact's address.",
													"type": "text"
												},
												{
													"key": "apt",
													"value": "in est volu",
													"description": "Billing Contact's apartment/suite.",
													"type": "text"
												},
												{
													"key": "city",
													"value": "velit",
													"description": "Billing Contact's city.",
													"type": "text"
												},
												{
													"key": "state",
													"value": "cillum sed",
													"description": "Billing Contact's state.",
													"type": "text"
												},
												{
													"key": "zip",
													"value": "dolore sed ad eu",
													"description": "Billing Contact's zip/postal code.",
													"type": "text"
												},
												{
													"key": "country",
													"value": "aliquip cupidata",
													"description": "Billing Contact's country.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/billing",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"billing"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The account's ID."
												}
											]
										},
										"description": "Update [billing information](https://support.zoom.us/hc/en-us/articles/201363263-About-Billing) of a sub account.<br><br>\nThis API can only be used by master accounts that pay all billing charges of their associated sub accounts. Zoom allows only [approved partners](https://marketplace.zoom.us/docs/api-reference/master-account-apis) to use master APIs and manage sub accounts' billing information. Email the partner programs team at **partner-success@zoom.us** for more details.<br><br>\n\n**Prerequisites:**\n* Pro or a higher paid account with master account option enabled. <br>\n\n**Scope**:`billing:master`<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n\n"
									},
									"response": [
										{
											"name": "**Error Code:** `200`<br>\nPlease subscribe a plan for this sub account first.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "first_name",
															"value": "do labore id",
															"description": "Billing Contact's first name.",
															"type": "text"
														},
														{
															"key": "last_name",
															"value": "ad irure voluptate",
															"description": "Billing Contact's last name.",
															"type": "text"
														},
														{
															"key": "email",
															"value": "Duis do",
															"description": "Billing Contact's email address.",
															"type": "text"
														},
														{
															"key": "phone_number",
															"value": "",
															"description": "Billing Contact's phone number.",
															"type": "text"
														},
														{
															"key": "address",
															"value": "velit tempor eu ad",
															"description": "Billing Contact's address.",
															"type": "text"
														},
														{
															"key": "apt",
															"value": "in est volu",
															"description": "Billing Contact's apartment/suite.",
															"type": "text"
														},
														{
															"key": "city",
															"value": "velit",
															"description": "Billing Contact's city.",
															"type": "text"
														},
														{
															"key": "state",
															"value": "cillum sed",
															"description": "Billing Contact's state.",
															"type": "text"
														},
														{
															"key": "zip",
															"value": "dolore sed ad eu",
															"description": "Billing Contact's zip/postal code.",
															"type": "text"
														},
														{
															"key": "country",
															"value": "aliquip cupidata",
															"description": "Billing Contact's country.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/billing",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"billing"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's ID."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `204`<br>\nAccount billing contact information updated.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "first_name",
															"value": "do labore id",
															"description": "Billing Contact's first name.",
															"type": "text"
														},
														{
															"key": "last_name",
															"value": "ad irure voluptate",
															"description": "Billing Contact's last name.",
															"type": "text"
														},
														{
															"key": "email",
															"value": "Duis do",
															"description": "Billing Contact's email address.",
															"type": "text"
														},
														{
															"key": "phone_number",
															"value": "",
															"description": "Billing Contact's phone number.",
															"type": "text"
														},
														{
															"key": "address",
															"value": "velit tempor eu ad",
															"description": "Billing Contact's address.",
															"type": "text"
														},
														{
															"key": "apt",
															"value": "in est volu",
															"description": "Billing Contact's apartment/suite.",
															"type": "text"
														},
														{
															"key": "city",
															"value": "velit",
															"description": "Billing Contact's city.",
															"type": "text"
														},
														{
															"key": "state",
															"value": "cillum sed",
															"description": "Billing Contact's state.",
															"type": "text"
														},
														{
															"key": "zip",
															"value": "dolore sed ad eu",
															"description": "Billing Contact's zip/postal code.",
															"type": "text"
														},
														{
															"key": "country",
															"value": "aliquip cupidata",
															"description": "Billing Contact's country.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/billing",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"billing"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's ID."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `2001`<br>\nAccount does not exist: {subAccountId}.\n\n\n\n",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "first_name",
															"value": "do labore id",
															"description": "Billing Contact's first name.",
															"type": "text"
														},
														{
															"key": "last_name",
															"value": "ad irure voluptate",
															"description": "Billing Contact's last name.",
															"type": "text"
														},
														{
															"key": "email",
															"value": "Duis do",
															"description": "Billing Contact's email address.",
															"type": "text"
														},
														{
															"key": "phone_number",
															"value": "",
															"description": "Billing Contact's phone number.",
															"type": "text"
														},
														{
															"key": "address",
															"value": "velit tempor eu ad",
															"description": "Billing Contact's address.",
															"type": "text"
														},
														{
															"key": "apt",
															"value": "in est volu",
															"description": "Billing Contact's apartment/suite.",
															"type": "text"
														},
														{
															"key": "city",
															"value": "velit",
															"description": "Billing Contact's city.",
															"type": "text"
														},
														{
															"key": "state",
															"value": "cillum sed",
															"description": "Billing Contact's state.",
															"type": "text"
														},
														{
															"key": "zip",
															"value": "dolore sed ad eu",
															"description": "Billing Contact's zip/postal code.",
															"type": "text"
														},
														{
															"key": "country",
															"value": "aliquip cupidata",
															"description": "Billing Contact's country.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/billing",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"billing"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "first_name",
															"value": "do labore id",
															"description": "Billing Contact's first name.",
															"type": "text"
														},
														{
															"key": "last_name",
															"value": "ad irure voluptate",
															"description": "Billing Contact's last name.",
															"type": "text"
														},
														{
															"key": "email",
															"value": "Duis do",
															"description": "Billing Contact's email address.",
															"type": "text"
														},
														{
															"key": "phone_number",
															"value": "",
															"description": "Billing Contact's phone number.",
															"type": "text"
														},
														{
															"key": "address",
															"value": "velit tempor eu ad",
															"description": "Billing Contact's address.",
															"type": "text"
														},
														{
															"key": "apt",
															"value": "in est volu",
															"description": "Billing Contact's apartment/suite.",
															"type": "text"
														},
														{
															"key": "city",
															"value": "velit",
															"description": "Billing Contact's city.",
															"type": "text"
														},
														{
															"key": "state",
															"value": "cillum sed",
															"description": "Billing Contact's state.",
															"type": "text"
														},
														{
															"key": "zip",
															"value": "dolore sed ad eu",
															"description": "Billing Contact's zip/postal code.",
															"type": "text"
														},
														{
															"key": "country",
															"value": "aliquip cupidata",
															"description": "Billing Contact's country.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/billing",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"billing"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's ID."
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "plans",
							"item": [
								{
									"name": "base",
									"item": [
										{
											"name": "Update a base plan",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "type",
															"value": "adipisicing quis",
															"description": "(Required) The account's [Base plan type](https://marketplace.zoom.us/docs/api-reference/other-references/plans#base-plans).",
															"type": "text"
														},
														{
															"key": "hosts",
															"value": "23684577",
															"description": "(Required) The account plan's number of hosts: \n* For a Pro plan, provide a value between `1` and `9`. \n* For a Business Plan, provide a value between `10` and `49`. \n* For a Education Plan, provide a value between `20` and `149`. \n* For a Free Trial Plan, provide a value between `1` and `9999`. \n\nYou **must** provide at least one positive integer value for the `hosts` or the `increasing_hosts` field.",
															"type": "text"
														},
														{
															"key": "increasing_hosts",
															"value": "55234957",
															"description": "An optional number of additional hosts to add to the account's Base plan. \n\nYou **must** provide at least one positive integer value for the `hosts` or the `increasing_hosts` field.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/plans/base",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"plans",
														"base"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's ID."
														}
													]
												},
												"description": "Update a base plan of a sub account. \n\nThis API can only be used by master accounts that pay all billing charges of their associated Pro or higher subaccounts. Zoom allows only [approved partners](https://marketplace.zoom.us/docs/api-reference/master-account-apis) to use master APIs and manage subaccounts' subscriptions. Email the partner programs team at **partner-success@zoom.us** for more details.\n\n**Scopes:** `billing:master`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`\n\n**Prerequisites:**<br>\n* The subaccount must have a Pro or a higher plan."
											},
											"response": [
												{
													"name": "**Error Code:** `200`\nFree trial and VIP account can't update sub plan.<br>\nYou do not have a subscription yet.<br>\n\n",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "type",
																	"value": "adipisicing quis",
																	"description": "(Required) The account's [Base plan type](https://marketplace.zoom.us/docs/api-reference/other-references/plans#base-plans).",
																	"type": "text"
																},
																{
																	"key": "hosts",
																	"value": "23684577",
																	"description": "(Required) The account plan's number of hosts: \n* For a Pro plan, provide a value between `1` and `9`. \n* For a Business Plan, provide a value between `10` and `49`. \n* For a Education Plan, provide a value between `20` and `149`. \n* For a Free Trial Plan, provide a value between `1` and `9999`. \n\nYou **must** provide at least one positive integer value for the `hosts` or the `increasing_hosts` field.",
																	"type": "text"
																},
																{
																	"key": "increasing_hosts",
																	"value": "55234957",
																	"description": "An optional number of additional hosts to add to the account's Base plan. \n\nYou **must** provide at least one positive integer value for the `hosts` or the `increasing_hosts` field.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/plans/base",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"plans",
																"base"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The account's ID."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTPS Status Code:** `204`<br>\nBase plan updated.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "type",
																	"value": "adipisicing quis",
																	"description": "(Required) The account's [Base plan type](https://marketplace.zoom.us/docs/api-reference/other-references/plans#base-plans).",
																	"type": "text"
																},
																{
																	"key": "hosts",
																	"value": "23684577",
																	"description": "(Required) The account plan's number of hosts: \n* For a Pro plan, provide a value between `1` and `9`. \n* For a Business Plan, provide a value between `10` and `49`. \n* For a Education Plan, provide a value between `20` and `149`. \n* For a Free Trial Plan, provide a value between `1` and `9999`. \n\nYou **must** provide at least one positive integer value for the `hosts` or the `increasing_hosts` field.",
																	"type": "text"
																},
																{
																	"key": "increasing_hosts",
																	"value": "55234957",
																	"description": "An optional number of additional hosts to add to the account's Base plan. \n\nYou **must** provide at least one positive integer value for the `hosts` or the `increasing_hosts` field.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/plans/base",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"plans",
																"base"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The account's ID."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**Error Code:** `300`<br>\nInsufficient number of hosts for business plan type.<br>\nInsufficient number of hosts for education plan type.<br>\nPlan types do not match, oldPlanType: {oldPlanType} newPlanType: {newPlanType}.<br>\n",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "type",
																	"value": "adipisicing quis",
																	"description": "(Required) The account's [Base plan type](https://marketplace.zoom.us/docs/api-reference/other-references/plans#base-plans).",
																	"type": "text"
																},
																{
																	"key": "hosts",
																	"value": "23684577",
																	"description": "(Required) The account plan's number of hosts: \n* For a Pro plan, provide a value between `1` and `9`. \n* For a Business Plan, provide a value between `10` and `49`. \n* For a Education Plan, provide a value between `20` and `149`. \n* For a Free Trial Plan, provide a value between `1` and `9999`. \n\nYou **must** provide at least one positive integer value for the `hosts` or the `increasing_hosts` field.",
																	"type": "text"
																},
																{
																	"key": "increasing_hosts",
																	"value": "55234957",
																	"description": "An optional number of additional hosts to add to the account's Base plan. \n\nYou **must** provide at least one positive integer value for the `hosts` or the `increasing_hosts` field.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/plans/base",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"plans",
																"base"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The account's ID."
																}
															]
														}
													},
													"status": "Multiple Choices",
													"code": 300,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `2100`<br> \nThis sub account is on self pay mode.<br>\nCannot makes updates when account is subscribed to a bundle plan.<br>\nThis account is not under a free trial plan.<br>\nThe account currently has {0} paid",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "type",
																	"value": "adipisicing quis",
																	"description": "(Required) The account's [Base plan type](https://marketplace.zoom.us/docs/api-reference/other-references/plans#base-plans).",
																	"type": "text"
																},
																{
																	"key": "hosts",
																	"value": "23684577",
																	"description": "(Required) The account plan's number of hosts: \n* For a Pro plan, provide a value between `1` and `9`. \n* For a Business Plan, provide a value between `10` and `49`. \n* For a Education Plan, provide a value between `20` and `149`. \n* For a Free Trial Plan, provide a value between `1` and `9999`. \n\nYou **must** provide at least one positive integer value for the `hosts` or the `increasing_hosts` field.",
																	"type": "text"
																},
																{
																	"key": "increasing_hosts",
																	"value": "55234957",
																	"description": "An optional number of additional hosts to add to the account's Base plan. \n\nYou **must** provide at least one positive integer value for the `hosts` or the `increasing_hosts` field.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/plans/base",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"plans",
																"base"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The account's ID."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `1001`<br>\nUser does not exist.\n**Error Code:** `2001`<br>\nAccount does not exist: {subAccountId}.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "type",
																	"value": "adipisicing quis",
																	"description": "(Required) The account's [Base plan type](https://marketplace.zoom.us/docs/api-reference/other-references/plans#base-plans).",
																	"type": "text"
																},
																{
																	"key": "hosts",
																	"value": "23684577",
																	"description": "(Required) The account plan's number of hosts: \n* For a Pro plan, provide a value between `1` and `9`. \n* For a Business Plan, provide a value between `10` and `49`. \n* For a Education Plan, provide a value between `20` and `149`. \n* For a Free Trial Plan, provide a value between `1` and `9999`. \n\nYou **must** provide at least one positive integer value for the `hosts` or the `increasing_hosts` field.",
																	"type": "text"
																},
																{
																	"key": "increasing_hosts",
																	"value": "55234957",
																	"description": "An optional number of additional hosts to add to the account's Base plan. \n\nYou **must** provide at least one positive integer value for the `hosts` or the `increasing_hosts` field.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/plans/base",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"plans",
																"base"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The account's ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Cancel a base plan",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "action",
															"value": "occaecat in culpa veniam",
															"description": "(Required) The action that needs to be taken for this sub account. Value must be set to \"cancel\".",
															"type": "text"
														},
														{
															"key": "reason",
															"value": "5",
															"description": "The reason for the cancellation of plan. Reason options:<br>`1` - I am no longer working remote.<br>`2` - I had challenges getting the support I needed.<br>`3` - Features in the Basic Free Plan are sufficient.<br>`4` - The expense is too high.<br>`5` - I purchased the wrong product.<br> `6` - Paid purchase not needed right now, will repurchase in the future. (This can only be one of 1,2,3,4,5,6)",
															"type": "text"
														},
														{
															"key": "comment",
															"value": "do Duis minim lab",
															"description": "Additional comments about the cancellation decision.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/plans/base/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"plans",
														"base",
														"status"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) "
														}
													]
												},
												"description": "[Cancel a base plan](https://support.zoom.us/hc/en-us/articles/203634215-How-Do-I-Cancel-My-Subscription-) for a sub account.\n\nThis API can only be used by master accounts that pay all billing charges of their associated Pro or higher sub accounts. Zoom allows only [approved partners](https://marketplace.zoom.us/docs/api-reference/master-account-apis) to use master APIs and manage sub accounts' subscriptions. Email the partner programs team at **partner-success@zoom.us** for more details.<br><br>\n\n**Scopes**: `billing:master`<br> \n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:**<br>\n* The sub account must have a Pro or a higher plan.\n "
											},
											"response": [
												{
													"name": "**Error Code:** `200`<br>\nCannot cancel plan for a sub account which is under free plan.<br>\nYou don’t have a major subscription yet.<br>\nYou should first cancel all additional subscriptions.<br>\nFree trial and VIP accounts can not cancel plans of a sub a",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "action",
																	"value": "occaecat in culpa veniam",
																	"description": "(Required) The action that needs to be taken for this sub account. Value must be set to \"cancel\".",
																	"type": "text"
																},
																{
																	"key": "reason",
																	"value": "5",
																	"description": "The reason for the cancellation of plan. Reason options:<br>`1` - I am no longer working remote.<br>`2` - I had challenges getting the support I needed.<br>`3` - Features in the Basic Free Plan are sufficient.<br>`4` - The expense is too high.<br>`5` - I purchased the wrong product.<br> `6` - Paid purchase not needed right now, will repurchase in the future. (This can only be one of 1,2,3,4,5,6)",
																	"type": "text"
																},
																{
																	"key": "comment",
																	"value": "do Duis minim lab",
																	"description": "Additional comments about the cancellation decision.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/plans/base/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"plans",
																"base",
																"status"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `204`<br>\nPlan cancelled successfully. ",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "action",
																	"value": "occaecat in culpa veniam",
																	"description": "(Required) The action that needs to be taken for this sub account. Value must be set to \"cancel\".",
																	"type": "text"
																},
																{
																	"key": "reason",
																	"value": "5",
																	"description": "The reason for the cancellation of plan. Reason options:<br>`1` - I am no longer working remote.<br>`2` - I had challenges getting the support I needed.<br>`3` - Features in the Basic Free Plan are sufficient.<br>`4` - The expense is too high.<br>`5` - I purchased the wrong product.<br> `6` - Paid purchase not needed right now, will repurchase in the future. (This can only be one of 1,2,3,4,5,6)",
																	"type": "text"
																},
																{
																	"key": "comment",
																	"value": "do Duis minim lab",
																	"description": "Additional comments about the cancellation decision.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/plans/base/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"plans",
																"base",
																"status"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `2100`<br>\nThis sub account is paid by self.<br>\nYou cannot make cancellation requests for a bundle plan. Contact the Zoom Support team for details.<br>\nMaster accounts with bulk licenses cannot provision, u",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "action",
																	"value": "occaecat in culpa veniam",
																	"description": "(Required) The action that needs to be taken for this sub account. Value must be set to \"cancel\".",
																	"type": "text"
																},
																{
																	"key": "reason",
																	"value": "5",
																	"description": "The reason for the cancellation of plan. Reason options:<br>`1` - I am no longer working remote.<br>`2` - I had challenges getting the support I needed.<br>`3` - Features in the Basic Free Plan are sufficient.<br>`4` - The expense is too high.<br>`5` - I purchased the wrong product.<br> `6` - Paid purchase not needed right now, will repurchase in the future. (This can only be one of 1,2,3,4,5,6)",
																	"type": "text"
																},
																{
																	"key": "comment",
																	"value": "do Duis minim lab",
																	"description": "Additional comments about the cancellation decision.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/plans/base/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"plans",
																"base",
																"status"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `1001`<br>User does not exist. <br>\n**Error Code:** `2001`<br>This account does not exist or does not belong to this master account.\n\n\n",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "action",
																	"value": "occaecat in culpa veniam",
																	"description": "(Required) The action that needs to be taken for this sub account. Value must be set to \"cancel\".",
																	"type": "text"
																},
																{
																	"key": "reason",
																	"value": "5",
																	"description": "The reason for the cancellation of plan. Reason options:<br>`1` - I am no longer working remote.<br>`2` - I had challenges getting the support I needed.<br>`3` - Features in the Basic Free Plan are sufficient.<br>`4` - The expense is too high.<br>`5` - I purchased the wrong product.<br> `6` - Paid purchase not needed right now, will repurchase in the future. (This can only be one of 1,2,3,4,5,6)",
																	"type": "text"
																},
																{
																	"key": "comment",
																	"value": "do Duis minim lab",
																	"description": "Additional comments about the cancellation decision.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/plans/base/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"plans",
																"base",
																"status"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "addons",
									"item": [
										{
											"name": "Subscribe account to an additional plan",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "type",
															"value": "cillum culpa anim eu",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "hosts",
															"value": "47970829",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/plans/addons",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"plans",
														"addons"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's ID."
														}
													]
												},
												"description": "Use this API to subscribe a subaccount to a Zoom addon plan. \n\n This API can only be used by Master accounts that pay all billing charges of their associated Pro or higher subaccounts. Zoom only allows approved partners to use [Master APIs](https://marketplace.zoom.us/docs/api-reference/master-account-apis) and manage subaccounts' billing information. Email the partner programs team at [**partner-success@zoom.us**](mailto:partner-success@zoom.us) for more details. \n\n **Scopes**: `billing:master` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` \n\n **Prerequisites:** \n* A Pro or a higher plan with the **Master account** option enabled. \n* The subaccount **must** be a paid account whose billing charges are paid by its Master account."
											},
											"response": [
												{
													"name": "Information about the account's updated additional plans.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "type",
																	"value": "cillum culpa anim eu",
																	"description": "undefined",
																	"type": "text"
																},
																{
																	"key": "hosts",
																	"value": "47970829",
																	"description": "undefined",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/plans/addons",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"plans",
																"addons"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The account's ID."
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"plan_base\": {\n  \"type\": \"monthly\",\n  \"hosts\": 100,\n  \"partner_sku\": \"PAR3-PRO-BASE-MTH\",\n  \"discount_rate\": 13.53,\n  \"discount_percent\": 0\n }\n}"
												},
												{
													"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `2100`<br> \nThis sub account is on self pay mode.<br>\nCannot update Additional plan for a sub account under free plan.<br>\nAdditional Zoom Rooms plan cannot be added to a sub account that already has a Zoom ",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "type",
																	"value": "cillum culpa anim eu",
																	"description": "undefined",
																	"type": "text"
																},
																{
																	"key": "hosts",
																	"value": "47970829",
																	"description": "undefined",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/plans/addons",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"plans",
																"addons"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The account's ID."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `1001`<br> \nUser does not exist.<br>\n**Error Code:** `2001`<br> \nAccount does not exist: {subAccountId}.\n",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "type",
																	"value": "cillum culpa anim eu",
																	"description": "undefined",
																	"type": "text"
																},
																{
																	"key": "hosts",
																	"value": "47970829",
																	"description": "undefined",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/plans/addons",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"plans",
																"addons"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The account's ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Update an account's additional plan",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "type",
															"value": "cillum culpa anim eu",
															"description": "(Required) The account's [plan type](https://marketplace.zoom.us/docs/api-reference/other-references/plans).",
															"type": "text"
														},
														{
															"key": "hosts",
															"value": "47970829",
															"description": "(Required) The account plan's number of hosts.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/plans/addons",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"plans",
														"addons"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's ID."
														}
													]
												},
												"description": "Use this API to update a subaccount's additional plan. \n\n This API can only be used by Master accounts that pay all billing charges of their associated Pro or higher subaccounts. Zoom only allows approved partners to use [Master APIs](https://marketplace.zoom.us/docs/api-reference/master-account-apis) and manage subaccounts' billing information. Email the partner programs team at [**partner-success@zoom.us**](mailto:partner-success@zoom.us) for more details. \n\n **Scopes:** `billing:master` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` \n\n **Prerequisites:** \n* A Pro or a higher plan with the **Master account** option enabled. \n* The subaccount **must** be a paid account whose billing charges are paid by its Master account."
											},
											"response": [
												{
													"name": "**Error Code:** `200`<br>\nFree trial and VIP accounts can't update sub plans.<br>\nYou don’t have subscription for ({oldPlanCode}) yet.\n",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "type",
																	"value": "cillum culpa anim eu",
																	"description": "(Required) The account's [plan type](https://marketplace.zoom.us/docs/api-reference/other-references/plans).",
																	"type": "text"
																},
																{
																	"key": "hosts",
																	"value": "47970829",
																	"description": "(Required) The account plan's number of hosts.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/plans/addons",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"plans",
																"addons"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The account's ID."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `204`<br>\nAdditional plan updated for the account.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "type",
																	"value": "cillum culpa anim eu",
																	"description": "(Required) The account's [plan type](https://marketplace.zoom.us/docs/api-reference/other-references/plans).",
																	"type": "text"
																},
																{
																	"key": "hosts",
																	"value": "47970829",
																	"description": "(Required) The account plan's number of hosts.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/plans/addons",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"plans",
																"addons"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The account's ID."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**Error Code:** `300`<br>\nPlan types do not match, oldPlanType: {oldPlanType} newPlanType: {newPlanType}.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "type",
																	"value": "cillum culpa anim eu",
																	"description": "(Required) The account's [plan type](https://marketplace.zoom.us/docs/api-reference/other-references/plans).",
																	"type": "text"
																},
																{
																	"key": "hosts",
																	"value": "47970829",
																	"description": "(Required) The account plan's number of hosts.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/plans/addons",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"plans",
																"addons"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The account's ID."
																}
															]
														}
													},
													"status": "Multiple Choices",
													"code": 300,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `2100`\n<br>This sub account is on self pay mode.\n<br>Invalid Additional Plan Type: {newPlanCode}.\n<br>Cannot update Additional plan for a sub account under free plan.\n<br>Invalid plan type.\n<br>Account can’t",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "type",
																	"value": "cillum culpa anim eu",
																	"description": "(Required) The account's [plan type](https://marketplace.zoom.us/docs/api-reference/other-references/plans).",
																	"type": "text"
																},
																{
																	"key": "hosts",
																	"value": "47970829",
																	"description": "(Required) The account plan's number of hosts.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/plans/addons",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"plans",
																"addons"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The account's ID."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `2001`<br>\nAccount does not exist: {subAccountId}.<br>\n**Error Code:** `3200`<br>\nCannot find Zuora subscription for account:{subAccountId}.\n",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "type",
																	"value": "cillum culpa anim eu",
																	"description": "(Required) The account's [plan type](https://marketplace.zoom.us/docs/api-reference/other-references/plans).",
																	"type": "text"
																},
																{
																	"key": "hosts",
																	"value": "47970829",
																	"description": "(Required) The account plan's number of hosts.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/plans/addons",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"plans",
																"addons"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The account's ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Cancel additional plans",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "action",
															"value": "cancel",
															"description": "The action that needs to be taken for this sub account. Value must be set to \"cancel\". (This can only be one of cancel)",
															"type": "text"
														},
														{
															"key": "type",
															"value": "labore Excepteur",
															"description": "Plan [type](https://marketplace.zoom.us/docs/api-reference/other-references/plans).",
															"type": "text"
														},
														{
															"key": "reason",
															"value": "6",
															"description": "The reason for the cancellation of plan. Reason options:<br>`1` - I am no longer working remote.<br>`2` - I had challenges getting the support I needed.<br>`3` - Features in the Basic Free Plan are sufficient.<br>`4` - The expense is too high.<br>`5` - I purchased the wrong product.<br> `6` - Paid purchase not needed right now, will repurchase in the future. (This can only be one of 1,2,3,4,5,6)",
															"type": "text"
														},
														{
															"key": "comment",
															"value": "est officia",
															"description": "Additional comments about the cancellation decision.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/plans/addons/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"plans",
														"addons",
														"status"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) "
														}
													]
												},
												"description": "[Cancel additional plan](https://support.zoom.us/hc/en-us/articles/203634215-How-Do-I-Cancel-My-Subscription-) of a sub account. The cancellation does not provide refund for the current subscription. The service remains active for the current session.\n\nThis API can only be used by master accounts that pay all billing charges of their associated Pro or higher sub accounts. Zoom allows only [approved partners](https://marketplace.zoom.us/docs/api-reference/master-account-apis) to use master APIs and manage sub accounts' subscriptions. Email the partner programs team at **partner-success@zoom.us** for more details.<br><br>\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n\n**Prerequisites:**<br>\n* Pro or a higher plan with master account option enabled.\n* The sub account must be a paid account.<br>\n**Scope:** `billing:master`<br>\n "
											},
											"response": [
												{
													"name": "**Error Code:** `200`<br>\nYou cannot cancel plan for a sub account that is under a free plan.<br>\nYou cannot perform this action because you do not have a Zoom Phone subscription for this account.<br>\nFree trial and VIP accounts can not cancel plans of a ",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "action",
																	"value": "cancel",
																	"description": "The action that needs to be taken for this sub account. Value must be set to \"cancel\". (This can only be one of cancel)",
																	"type": "text"
																},
																{
																	"key": "type",
																	"value": "labore Excepteur",
																	"description": "Plan [type](https://marketplace.zoom.us/docs/api-reference/other-references/plans).",
																	"type": "text"
																},
																{
																	"key": "reason",
																	"value": "6",
																	"description": "The reason for the cancellation of plan. Reason options:<br>`1` - I am no longer working remote.<br>`2` - I had challenges getting the support I needed.<br>`3` - Features in the Basic Free Plan are sufficient.<br>`4` - The expense is too high.<br>`5` - I purchased the wrong product.<br> `6` - Paid purchase not needed right now, will repurchase in the future. (This can only be one of 1,2,3,4,5,6)",
																	"type": "text"
																},
																{
																	"key": "comment",
																	"value": "est officia",
																	"description": "Additional comments about the cancellation decision.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/plans/addons/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"plans",
																"addons",
																"status"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `204`<br>\nPlan cancelled successfully. ",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "action",
																	"value": "cancel",
																	"description": "The action that needs to be taken for this sub account. Value must be set to \"cancel\". (This can only be one of cancel)",
																	"type": "text"
																},
																{
																	"key": "type",
																	"value": "labore Excepteur",
																	"description": "Plan [type](https://marketplace.zoom.us/docs/api-reference/other-references/plans).",
																	"type": "text"
																},
																{
																	"key": "reason",
																	"value": "6",
																	"description": "The reason for the cancellation of plan. Reason options:<br>`1` - I am no longer working remote.<br>`2` - I had challenges getting the support I needed.<br>`3` - Features in the Basic Free Plan are sufficient.<br>`4` - The expense is too high.<br>`5` - I purchased the wrong product.<br> `6` - Paid purchase not needed right now, will repurchase in the future. (This can only be one of 1,2,3,4,5,6)",
																	"type": "text"
																},
																{
																	"key": "comment",
																	"value": "est officia",
																	"description": "Additional comments about the cancellation decision.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/plans/addons/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"plans",
																"addons",
																"status"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "**Error Code:** `300`<br>\nPlan type is required.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "action",
																	"value": "cancel",
																	"description": "The action that needs to be taken for this sub account. Value must be set to \"cancel\". (This can only be one of cancel)",
																	"type": "text"
																},
																{
																	"key": "type",
																	"value": "labore Excepteur",
																	"description": "Plan [type](https://marketplace.zoom.us/docs/api-reference/other-references/plans).",
																	"type": "text"
																},
																{
																	"key": "reason",
																	"value": "6",
																	"description": "The reason for the cancellation of plan. Reason options:<br>`1` - I am no longer working remote.<br>`2` - I had challenges getting the support I needed.<br>`3` - Features in the Basic Free Plan are sufficient.<br>`4` - The expense is too high.<br>`5` - I purchased the wrong product.<br> `6` - Paid purchase not needed right now, will repurchase in the future. (This can only be one of 1,2,3,4,5,6)",
																	"type": "text"
																},
																{
																	"key": "comment",
																	"value": "est officia",
																	"description": "Additional comments about the cancellation decision.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/plans/addons/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"plans",
																"addons",
																"status"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Multiple Choices",
													"code": 300,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `400`<br> \n**Error Code:** `2100`<br>\nThis sub account is on self pay mode.<br>\nYou cannot make cancellation requests for a bundle plan. Contact the Zoom Support team for details.<br>\nMaster accounts with bulk licenses cannot provisi",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "action",
																	"value": "cancel",
																	"description": "The action that needs to be taken for this sub account. Value must be set to \"cancel\". (This can only be one of cancel)",
																	"type": "text"
																},
																{
																	"key": "type",
																	"value": "labore Excepteur",
																	"description": "Plan [type](https://marketplace.zoom.us/docs/api-reference/other-references/plans).",
																	"type": "text"
																},
																{
																	"key": "reason",
																	"value": "6",
																	"description": "The reason for the cancellation of plan. Reason options:<br>`1` - I am no longer working remote.<br>`2` - I had challenges getting the support I needed.<br>`3` - Features in the Basic Free Plan are sufficient.<br>`4` - The expense is too high.<br>`5` - I purchased the wrong product.<br> `6` - Paid purchase not needed right now, will repurchase in the future. (This can only be one of 1,2,3,4,5,6)",
																	"type": "text"
																},
																{
																	"key": "comment",
																	"value": "est officia",
																	"description": "Additional comments about the cancellation decision.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/plans/addons/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"plans",
																"addons",
																"status"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `1001`<br>\nUser does not exist.<br>\n**Error Code:** `2001`<br> \nAccount does not exist: {subAccountId}.\n\n",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "action",
																	"value": "cancel",
																	"description": "The action that needs to be taken for this sub account. Value must be set to \"cancel\". (This can only be one of cancel)",
																	"type": "text"
																},
																{
																	"key": "type",
																	"value": "labore Excepteur",
																	"description": "Plan [type](https://marketplace.zoom.us/docs/api-reference/other-references/plans).",
																	"type": "text"
																},
																{
																	"key": "reason",
																	"value": "6",
																	"description": "The reason for the cancellation of plan. Reason options:<br>`1` - I am no longer working remote.<br>`2` - I had challenges getting the support I needed.<br>`3` - Features in the Basic Free Plan are sufficient.<br>`4` - The expense is too high.<br>`5` - I purchased the wrong product.<br> `6` - Paid purchase not needed right now, will repurchase in the future. (This can only be one of 1,2,3,4,5,6)",
																	"type": "text"
																},
																{
																	"key": "comment",
																	"value": "est officia",
																	"description": "Additional comments about the cancellation decision.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/plans/addons/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"plans",
																"addons",
																"status"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get account plan information",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/plans",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"plans"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The account's ID."
												}
											]
										},
										"description": "Use this API to return plan information of a subaccount that is managed by a Master account. \n\n This API can only be used by Master accounts that pay all billing charges of their associated Pro or higher subaccounts. Zoom only allows approved partners to use [Master APIs](https://marketplace.zoom.us/docs/api-reference/master-account-apis) and manage subaccounts' billing information. Email the partner programs team at [**partner-success@zoom.us**](mailto:partner-success@zoom.us) for more details. \n\n **Scopes:** `billing:master`, `billing:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:**`200`<br>\nAccount's plans returned.\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/plans",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"plans"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's ID."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"plan_base\": {\n  \"type\": \"monthly\",\n  \"hosts\": 100,\n  \"service_effective_date\": \"2021-09-07T00:00:00Z\",\n  \"next_invoice_date\": \"2021-10-07T00:00:00Z\",\n  \"status\": \"active\"\n },\n \"plan_zoom_rooms\": {\n  \"type\": \"zroom_monthly\",\n  \"hosts\": 50,\n  \"service_effective_date\": \"2021-09-07T00:00:00Z\",\n  \"next_invoice_date\": \"2021-10-07T00:00:00Z\",\n  \"status\": \"active\"\n },\n \"plan_room_connector\": {\n  \"type\": \"roomconnector_monthly\",\n  \"hosts\": 10,\n  \"service_effective_date\": \"2021-09-07T00:00:00Z\",\n  \"next_invoice_date\": \"2021-10-07T00:00:00Z\",\n  \"status\": \"active\"\n },\n \"plan_large_meeting\": [\n  {\n   \"type\": \"plan_large500_two_years\",\n   \"hosts\": 10,\n   \"service_effective_date\": \"2021-09-07T00:00:00Z\",\n   \"next_invoice_date\": \"2021-10-07T00:00:00Z\",\n   \"status\": \"active\"\n  }\n ],\n \"plan_webinar\": [\n  {\n   \"type\": \"webinar500_monthly\",\n   \"hosts\": 10,\n   \"service_effective_date\": \"2021-09-07T00:00:00Z\",\n   \"next_invoice_date\": \"2021-10-07T00:00:00Z\",\n   \"status\": \"active\"\n  }\n ],\n \"plan_zoom_events\": [\n  {\n   \"type\": \"zoomevents500_monthly\",\n   \"hosts\": 20,\n   \"service_effective_date\": \"2021-09-07T00:00:00Z\",\n   \"next_invoice_date\": \"2021-10-07T00:00:00Z\",\n   \"status\": \"active\"\n  }\n ],\n \"plan_recording\": \"cmr_monthly_commitment_40\",\n \"plan_recording_service_effective_date\": \"2021-09-07T00:00:00Z\",\n \"plan_recording_next_invoice_date\": \"2021-10-07T00:00:00Z\",\n \"plan_recording_status\": \"status\",\n \"plan_audio\": {\n  \"type\": \"tollfree_payongo\",\n  \"tollfree_countries\": \"US\",\n  \"premium_countries\": \"\",\n  \"callout_countries\": \"\",\n  \"ddi_numbers\": 0,\n  \"service_effective_date\": \"2021-09-07T00:00:00Z\",\n  \"next_invoice_date\": \"2021-10-07T00:00:00Z\",\n  \"status\": \"active\"\n },\n \"plan_phone\": {\n  \"plan_base\": {\n   \"type\": \"phone_payongo\",\n   \"callout_countries\": \"\",\n   \"service_effective_date\": \"2021-09-07T00:00:00Z\",\n   \"next_invoice_date\": \"2021-10-07T00:00:00Z\",\n   \"status\": \"active\"\n  },\n  \"plan_calling\": [\n   {\n    \"type\": \"phone_calling_usca_monthly_unlimited\",\n    \"hosts\": 5,\n    \"service_effective_date\": \"2021-09-07T00:00:00Z\",\n    \"next_invoice_date\": \"2021-10-07T00:00:00Z\",\n    \"status\": \"active\"\n   }\n  ],\n  \"plan_number\": [\n   {\n    \"type\": \"phone_number_usca_monthly\",\n    \"hosts\": 5,\n    \"service_effective_date\": \"2021-09-07T00:00:00Z\",\n    \"next_invoice_date\": \"2021-10-07T00:00:00Z\",\n    \"status\": \"active\"\n   }\n  ]\n }\n}"
										},
										{
											"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `2100`<br> \nThis sub account is on self pay mode.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/plans",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"plans"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's ID."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:**`404`<br>\nAccount does not exist: {subAccountId}.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/plans",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"plans"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Subscribe account to a plan",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "plan_base",
													"value": "{\"type\":\"irure qui officia adipisicing \",\"hosts\":38551281,\"increasing_hosts\":-40010806}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "contact",
													"value": "{\"first_name\":\"occaecat ut fu\",\"last_name\":\"cillum magna\",\"email\":\"ullamco labore dolor\",\"phone_number\":\"sit et\",\"address\":\"in cillum sed qui\",\"city\":\"ut labore\",\"state\":\"officia nulla quis\",\"zip\":\"adipisicing\",\"country\":\"occaecat\",\"apt\":\"velit enim commodo\"}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "plan_zoom_rooms",
													"value": "{\"type\":\"irure\",\"hosts\":14786564}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "plan_room_connector",
													"value": "{\"type\":\"dolore proident\",\"hosts\":91293941}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "plan_large_meeting",
													"value": "[{\"type\":\"nisi quis\",\"hosts\":-98355801},{\"type\":\"sunt deserunt est id\",\"hosts\":-47336720}]",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "plan_webinar",
													"value": "[{\"type\":\"in\",\"hosts\":-69967257},{\"type\":\"in\",\"hosts\":89051880}]",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "plan_zoom_events",
													"value": "[{\"type\":\"minim sint nulla do\",\"hosts\":69979952},{\"type\":\"esse nisi mollit sint magna\",\"hosts\":-57012899}]",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "plan_recording",
													"value": "Excepteur do Ut molli",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "plan_audio",
													"value": "{\"type\":\"ea ad\",\"tollfree_countries\":\"magna id est\",\"premium_countries\":\"qui\",\"callout_countries\":\"eu sed in aliqua\",\"ddi_numbers\":-89000642}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "plan_phone",
													"value": "{\"plan_base\":{\"type\":\"sint eu dolore ex consequat\",\"callout_countries\":\"et fugiat ex\"},\"plan_calling\":[{\"type\":\"nostrud esse minim\",\"hosts\":56626854},{\"type\":\"exercitation\",\"hosts\":-72918300}],\"plan_number\":[{\"type\":\"tempor Ut Lorem veniam\",\"hosts\":-58131157},{\"type\":\"tempor magna quis exercitation\",\"hosts\":-56953317}]}",
													"description": "undefined",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/plans",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"plans"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The account's ID."
												}
											]
										},
										"description": "Use this API to subscribe a subaccount to a Zoom plan using your Master account. \n\n This API can only be used by Master accounts that pay all billing charges of their associated Pro or higher subaccounts. Zoom only allows [approved partners](https://marketplace.zoom.us/docs/api-reference/master-account-apis) to use Master APIs and manage subaccounts' billing information. Email the partner programs team at [**partner-success@zoom.us**](mailto:partner-success@zoom.us) for more details. \n\n **Note:** To subscribe to an addon plan **after** subscribing to a base plan, you **must** use the [**Subscribe additional plan**](https://marketplace.zoom.us/docs/api-reference/zoom-api/billing/accountplanaddoncreate) API.\n\n**Scopes:** `billing:master`"
									},
									"response": [
										{
											"name": "**Error Code:** `200`<br>\nOne zuora account only can have one active billing subscription.<br>\nCan’t subscribe 25-participants pro plan for this sub-account.<br>\nCan’t subscribe 50-participants pro plan for this sub-account.<br>\nIn order to take advantage",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "plan_base",
															"value": "{\"type\":\"cupida\",\"hosts\":92899946,\"increasing_hosts\":-34964052}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "contact",
															"value": "{\"first_name\":\"anim\",\"last_name\":\"consequat aliquip ullamco et\",\"email\":\"anim dolore exercitation aliquip\",\"phone_number\":\"nostrud dolore sint\",\"address\":\"et aliquip nostrud ea\",\"city\":\"dolor\",\"state\":\"irure cupidatat Lorem esse\",\"zip\":\"eu pariatur\",\"country\":\"nostrud\",\"apt\":\"id aliqua aliquip\"}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_zoom_rooms",
															"value": "{\"type\":\"cillum tempor eu et\",\"hosts\":-56123344}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_room_connector",
															"value": "{\"type\":\"qui ullamco\",\"hosts\":34506673}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_large_meeting",
															"value": "[{\"type\":\"deserunt consectetur elit ipsum\",\"hosts\":32632788},{\"type\":\"id mollit quis ullamco dolor\",\"hosts\":-80809577}]",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_webinar",
															"value": "[{\"type\":\"eu ut\",\"hosts\":-52534602},{\"type\":\"\",\"hosts\":96486019}]",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_zoom_events",
															"value": "[{\"type\":\"exercitation aliqua in\",\"hosts\":-71902097},{\"type\":\"nostrud labore\",\"hosts\":39930797}]",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_recording",
															"value": "incididunt culpa magna",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_audio",
															"value": "{\"type\":\"enim ea\",\"tollfree_countries\":\"nulla labore incididunt Excepteur officia\",\"premium_countries\":\"eu veniam\",\"callout_countries\":\"quis voluptate consectetur\",\"ddi_numbers\":90010529}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_phone",
															"value": "{\"plan_base\":{\"type\":\"labore\",\"callout_countries\":\"Duis minim anim dolor\"},\"plan_calling\":[{\"type\":\"eiusmod laboris nostrud\",\"hosts\":93054351},{\"type\":\"officia nostrud\",\"hosts\":-10528300}],\"plan_number\":[{\"type\":\"commodo\",\"hosts\":-22602278},{\"type\":\"velit dolore amet reprehenderit\",\"hosts\":29937948}]}",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/plans",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"plans"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's ID."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "**HTTP Status Code:**`201`<br>\nAccount plans updated.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "plan_base",
															"value": "{\"type\":\"cupida\",\"hosts\":92899946,\"increasing_hosts\":-34964052}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "contact",
															"value": "{\"first_name\":\"anim\",\"last_name\":\"consequat aliquip ullamco et\",\"email\":\"anim dolore exercitation aliquip\",\"phone_number\":\"nostrud dolore sint\",\"address\":\"et aliquip nostrud ea\",\"city\":\"dolor\",\"state\":\"irure cupidatat Lorem esse\",\"zip\":\"eu pariatur\",\"country\":\"nostrud\",\"apt\":\"id aliqua aliquip\"}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_zoom_rooms",
															"value": "{\"type\":\"cillum tempor eu et\",\"hosts\":-56123344}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_room_connector",
															"value": "{\"type\":\"qui ullamco\",\"hosts\":34506673}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_large_meeting",
															"value": "[{\"type\":\"deserunt consectetur elit ipsum\",\"hosts\":32632788},{\"type\":\"id mollit quis ullamco dolor\",\"hosts\":-80809577}]",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_webinar",
															"value": "[{\"type\":\"eu ut\",\"hosts\":-52534602},{\"type\":\"\",\"hosts\":96486019}]",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_zoom_events",
															"value": "[{\"type\":\"exercitation aliqua in\",\"hosts\":-71902097},{\"type\":\"nostrud labore\",\"hosts\":39930797}]",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_recording",
															"value": "incididunt culpa magna",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_audio",
															"value": "{\"type\":\"enim ea\",\"tollfree_countries\":\"nulla labore incididunt Excepteur officia\",\"premium_countries\":\"eu veniam\",\"callout_countries\":\"quis voluptate consectetur\",\"ddi_numbers\":90010529}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_phone",
															"value": "{\"plan_base\":{\"type\":\"labore\",\"callout_countries\":\"Duis minim anim dolor\"},\"plan_calling\":[{\"type\":\"eiusmod laboris nostrud\",\"hosts\":93054351},{\"type\":\"officia nostrud\",\"hosts\":-10528300}],\"plan_number\":[{\"type\":\"commodo\",\"hosts\":-22602278},{\"type\":\"velit dolore amet reprehenderit\",\"hosts\":29937948}]}",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/plans",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"plans"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's ID."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"plan_base\": {\n  \"type\": \"monthly\",\n  \"hosts\": 100,\n  \"partner_sku\": \"PAR3-PRO-BASE-MTH\",\n  \"discount_rate\": 13.53,\n  \"discount_percent\": 0\n },\n \"plan_zoom_rooms\": {\n  \"type\": \"string\",\n  \"hosts\": \"integer\",\n  \"partner_sku\": \"string\",\n  \"discount_rate\": \"double\",\n  \"discount_percent\": \"integer\"\n },\n \"plan_room_connector\": {\n  \"type\": \"string\",\n  \"hosts\": \"integer\",\n  \"partner_sku\": \"string\",\n  \"discount_rate\": \"double\",\n  \"discount_percent\": \"integer\"\n },\n \"plan_large_meeting\": [\n  {\n   \"type\": \"plan_large500_two_years\",\n   \"hosts\": 10,\n   \"partner_sku\": \"PAR1-LMR-500-NH2Y\",\n   \"discount_rate\": 1140,\n   \"discount_percent\": 0\n  }\n ],\n \"plan_webinar\": [\n  {\n   \"type\": \"webinar500_monthly\",\n   \"hosts\": 10,\n   \"partner_sku\": \"PAR1-WEB-500-FL-1M\",\n   \"discount_rate\": 112,\n   \"discount_percent\": 20\n  }\n ],\n \"plan_zoom_events\": [\n  {\n   \"type\": \"zoomevents500_monthly\",\n   \"hosts\": 50,\n   \"partner_sku\": \"PAR1-EVN -500-FL1M\",\n   \"discount_rate\": 99,\n   \"discount_percent\": 0\n  }\n ],\n \"plan_audio\": {\n  \"type\": \"tollfree_payongo\",\n  \"tollfree_countries\": \"US\",\n  \"premium_countries\": \"\",\n  \"callout_countries\": \"\",\n  \"ddi_numbers\": 0,\n  \"partner_sku\": \"PAR-AUD-INCL\",\n  \"discount_rate\": 0,\n  \"discount_percent\": 0\n }\n}"
										},
										{
											"name": "**Error Code**: `300`<br>Account can’t buy this plan.<br>Buy hosts must equal or larger than {minBuyHost}.<br>Buy hosts must equal or smaller than {maxBuyHost}.<br>Buy hosts must equal or smaller than 9999.<br>Active hosts must be equal or larger than buy",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "plan_base",
															"value": "{\"type\":\"cupida\",\"hosts\":92899946,\"increasing_hosts\":-34964052}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "contact",
															"value": "{\"first_name\":\"anim\",\"last_name\":\"consequat aliquip ullamco et\",\"email\":\"anim dolore exercitation aliquip\",\"phone_number\":\"nostrud dolore sint\",\"address\":\"et aliquip nostrud ea\",\"city\":\"dolor\",\"state\":\"irure cupidatat Lorem esse\",\"zip\":\"eu pariatur\",\"country\":\"nostrud\",\"apt\":\"id aliqua aliquip\"}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_zoom_rooms",
															"value": "{\"type\":\"cillum tempor eu et\",\"hosts\":-56123344}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_room_connector",
															"value": "{\"type\":\"qui ullamco\",\"hosts\":34506673}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_large_meeting",
															"value": "[{\"type\":\"deserunt consectetur elit ipsum\",\"hosts\":32632788},{\"type\":\"id mollit quis ullamco dolor\",\"hosts\":-80809577}]",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_webinar",
															"value": "[{\"type\":\"eu ut\",\"hosts\":-52534602},{\"type\":\"\",\"hosts\":96486019}]",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_zoom_events",
															"value": "[{\"type\":\"exercitation aliqua in\",\"hosts\":-71902097},{\"type\":\"nostrud labore\",\"hosts\":39930797}]",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_recording",
															"value": "incididunt culpa magna",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_audio",
															"value": "{\"type\":\"enim ea\",\"tollfree_countries\":\"nulla labore incididunt Excepteur officia\",\"premium_countries\":\"eu veniam\",\"callout_countries\":\"quis voluptate consectetur\",\"ddi_numbers\":90010529}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_phone",
															"value": "{\"plan_base\":{\"type\":\"labore\",\"callout_countries\":\"Duis minim anim dolor\"},\"plan_calling\":[{\"type\":\"eiusmod laboris nostrud\",\"hosts\":93054351},{\"type\":\"officia nostrud\",\"hosts\":-10528300}],\"plan_number\":[{\"type\":\"commodo\",\"hosts\":-22602278},{\"type\":\"velit dolore amet reprehenderit\",\"hosts\":29937948}]}",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/plans",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"plans"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's ID."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400`<br> **Error Code:** `2100`<br> Invalid parameter: first_name<br>\nInvalid parameter: last_name<br>Invalid parameter: email<br>Invalid parameter: country<br>Invalid parameter: address\nInvalid parameter: city<br>Invalid parameter:",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "plan_base",
															"value": "{\"type\":\"cupida\",\"hosts\":92899946,\"increasing_hosts\":-34964052}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "contact",
															"value": "{\"first_name\":\"anim\",\"last_name\":\"consequat aliquip ullamco et\",\"email\":\"anim dolore exercitation aliquip\",\"phone_number\":\"nostrud dolore sint\",\"address\":\"et aliquip nostrud ea\",\"city\":\"dolor\",\"state\":\"irure cupidatat Lorem esse\",\"zip\":\"eu pariatur\",\"country\":\"nostrud\",\"apt\":\"id aliqua aliquip\"}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_zoom_rooms",
															"value": "{\"type\":\"cillum tempor eu et\",\"hosts\":-56123344}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_room_connector",
															"value": "{\"type\":\"qui ullamco\",\"hosts\":34506673}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_large_meeting",
															"value": "[{\"type\":\"deserunt consectetur elit ipsum\",\"hosts\":32632788},{\"type\":\"id mollit quis ullamco dolor\",\"hosts\":-80809577}]",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_webinar",
															"value": "[{\"type\":\"eu ut\",\"hosts\":-52534602},{\"type\":\"\",\"hosts\":96486019}]",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_zoom_events",
															"value": "[{\"type\":\"exercitation aliqua in\",\"hosts\":-71902097},{\"type\":\"nostrud labore\",\"hosts\":39930797}]",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_recording",
															"value": "incididunt culpa magna",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_audio",
															"value": "{\"type\":\"enim ea\",\"tollfree_countries\":\"nulla labore incididunt Excepteur officia\",\"premium_countries\":\"eu veniam\",\"callout_countries\":\"quis voluptate consectetur\",\"ddi_numbers\":90010529}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_phone",
															"value": "{\"plan_base\":{\"type\":\"labore\",\"callout_countries\":\"Duis minim anim dolor\"},\"plan_calling\":[{\"type\":\"eiusmod laboris nostrud\",\"hosts\":93054351},{\"type\":\"officia nostrud\",\"hosts\":-10528300}],\"plan_number\":[{\"type\":\"commodo\",\"hosts\":-22602278},{\"type\":\"velit dolore amet reprehenderit\",\"hosts\":29937948}]}",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/plans",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"plans"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's ID."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br> **Error Code:** `1001`<br> User does not exist.<br> \n**Error Code:** `2001`<br> Account does not exist: {subAccountId}.<br>\n\n",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "plan_base",
															"value": "{\"type\":\"cupida\",\"hosts\":92899946,\"increasing_hosts\":-34964052}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "contact",
															"value": "{\"first_name\":\"anim\",\"last_name\":\"consequat aliquip ullamco et\",\"email\":\"anim dolore exercitation aliquip\",\"phone_number\":\"nostrud dolore sint\",\"address\":\"et aliquip nostrud ea\",\"city\":\"dolor\",\"state\":\"irure cupidatat Lorem esse\",\"zip\":\"eu pariatur\",\"country\":\"nostrud\",\"apt\":\"id aliqua aliquip\"}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_zoom_rooms",
															"value": "{\"type\":\"cillum tempor eu et\",\"hosts\":-56123344}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_room_connector",
															"value": "{\"type\":\"qui ullamco\",\"hosts\":34506673}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_large_meeting",
															"value": "[{\"type\":\"deserunt consectetur elit ipsum\",\"hosts\":32632788},{\"type\":\"id mollit quis ullamco dolor\",\"hosts\":-80809577}]",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_webinar",
															"value": "[{\"type\":\"eu ut\",\"hosts\":-52534602},{\"type\":\"\",\"hosts\":96486019}]",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_zoom_events",
															"value": "[{\"type\":\"exercitation aliqua in\",\"hosts\":-71902097},{\"type\":\"nostrud labore\",\"hosts\":39930797}]",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_recording",
															"value": "incididunt culpa magna",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_audio",
															"value": "{\"type\":\"enim ea\",\"tollfree_countries\":\"nulla labore incididunt Excepteur officia\",\"premium_countries\":\"eu veniam\",\"callout_countries\":\"quis voluptate consectetur\",\"ddi_numbers\":90010529}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "plan_phone",
															"value": "{\"plan_base\":{\"type\":\"labore\",\"callout_countries\":\"Duis minim anim dolor\"},\"plan_calling\":[{\"type\":\"eiusmod laboris nostrud\",\"hosts\":93054351},{\"type\":\"officia nostrud\",\"hosts\":-10528300}],\"plan_number\":[{\"type\":\"commodo\",\"hosts\":-22602278},{\"type\":\"velit dolore amet reprehenderit\",\"hosts\":29937948}]}",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/plans",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"plans"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get plan usage",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/plans/usage",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"plans",
												"usage"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) "
												}
											]
										},
										"description": "Get information on usage of [plans](https://marketplace.zoom.us/docs/api-reference/other-references/plans) of an account. This API supports regular accounts as well as master and sub accounts. To get plan usage of a regular account, use the `account:read:admin` scope and provide “me” as the value of the  `accountId` path parameter.To get plan usage of a master account, provide the keyword \"me\" as the value of the `accountId` path parameter and use the `billing:master` scope. To get plan usage of a sub account, provide the actual account Id of the sub account as the value of the `accountId` path parameter and use the `billing:master` scope. \n\n**Prerequisite**:<br>\nAccount type: master account on a paid Pro, Business or Enterprise plan.<br>\n**Scope:** `billing:master` for master and sub accounts. `account:read:admin` for regular Zoom accounts.<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` <br>\nPlan Usage returned.<br>",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/plans/usage",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"plans",
														"usage"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"plan_base\": {\n  \"type\": \"monthly\",\n  \"hosts\": 2,\n  \"usage\": 1\n },\n \"plan_zoom_rooms\": {\n  \"type\": \"zroom_monthly\",\n  \"hosts\": 1,\n  \"usage\": 0\n },\n \"plan_webinar\": [\n  {\n   \"type\": \"webinar1000\",\n   \"hosts\": 1,\n   \"usage\": 1\n  }\n ],\n \"plan_zoom_events\": [\n  {\n   \"type\": \"zoomevents500_monthly\",\n   \"hosts\": 1,\n   \"usage\": 1\n  }\n ],\n \"plan_large_meeting\": [\n  {\n   \"type\": \"large500_monthly\",\n   \"hosts\": 1,\n   \"usage\": 1\n  }\n ],\n \"plan_recording\": {\n  \"free_storage\": \"3 GB\",\n  \"free_storage_usage\": \"0\",\n  \"plan_storage\": \"0\",\n  \"plan_storage_usage\": \"0\",\n  \"plan_storage_exceed\": \"0\"\n }\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` <br>\n**Error Code:** `200` <br>\nOnly available for paid account.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/plans/usage",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"plans",
														"usage"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "lock settings",
							"item": [
								{
									"name": "Get locked settings",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/lock_settings?option=culpa velit reprehenderit&custom_query_fields=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"lock_settings"
											],
											"query": [
												{
													"key": "option",
													"value": "culpa velit reprehenderit",
													"description": "`meeting_security`: Use this query parameter to view meeting security settings applied on the account.<br>"
												},
												{
													"key": "custom_query_fields",
													"value": "culpa velit reprehenderit",
													"description": "Provide the name of the field by which you would like to filter the response. For example, if you provide \"host_video\" as the value of this field, you will get a response similar to the following:<br>\n{\n    \"schedule_meeting\": {\n        \"host_video\": false\n    }\n}\n<br>You can provide multiple values by separating them with commas(example: \"host_video,participant_video”)."
												}
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of the account. To retrieve locked settings of the master account or a regular account, provide \"me\" as the value of this field. <br> To retrieve locked settings of a sub account, provide the Account ID of the sub account in this field."
												}
											]
										},
										"description": "[Account Locked Settings](https://support.zoom.us/hc/en-us/articles/115005269866) allow you turn settings on or off for all users in your account. No user except the account admin or account owner can change these settings. With lock settings, you force the settings on for all users.\nUse this API to retrieve an account's locked settings. \n\n**Note:** This API can be used by Zoom Accounts that are on a Pro or a higher plan as well accounts that have master and sub accounts options enabled. <br><br>\n**Prerequisites:**\n* Pro or a higher paid account. <br>\n\n**Scope**: `account:read:admin`.\n<br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n\n\n\n\n\n**Scope:** account:read:admin"
									},
									"response": [
										{
											"name": "**Error Code:** `200`<br>\nOnly available for paid account:$accountId.\n\n**HTTP Status Code:** `200`<br>\nLocked settings for the Account returned.\n\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/lock_settings?option=culpa velit reprehenderit&custom_query_fields=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"lock_settings"
													],
													"query": [
														{
															"key": "option",
															"value": "culpa velit reprehenderit"
														},
														{
															"key": "custom_query_fields",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique Identifier of the account. To retrieve locked settings of the master account or a regular account, provide \"me\" as the value of this field. <br> To retrieve locked settings of a sub account, provide the Account ID of the sub account in this field."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"schedule_meeting\": {\n  \"host_video\": true,\n  \"participant_video\": false,\n  \"audio_type\": true,\n  \"join_before_host\": false,\n  \"enforce_login\": true,\n  \"enforce_login_with_domains\": false,\n  \"enforce_login_domains\": \"in qui labore\",\n  \"not_store_meeting_topic\": true,\n  \"require_password_for_scheduling_new_meetings\": true,\n  \"require_password_for_instant_meetings\": true,\n  \"require_password_for_pmi_meetings\": true,\n  \"use_pmi_for_scheduled_meetings\": false,\n  \"use_pmi_for_instant_meetings\": false,\n  \"meeting_authentication\": false,\n  \"embed_password_in_join_link\": true\n },\n \"in_meeting\": {\n  \"e2e_encryption\": false,\n  \"chat\": true,\n  \"private_chat\": true,\n  \"auto_saving_chat\": true,\n  \"entry_exit_chime\": \"consequat exercitation sed labore\",\n  \"feedback\": true,\n  \"post_meeting_feedback\": true,\n  \"co_host\": true,\n  \"polling\": false,\n  \"attendee_on_hold\": false,\n  \"show_meeting_control_toolbar\": false,\n  \"allow_show_zoom_windows\": true,\n  \"annotation\": true,\n  \"whiteboard\": true,\n  \"remote_control\": false,\n  \"webinar_question_answer\": true,\n  \"anonymous_question_answer\": false,\n  \"breakout_room\": true,\n  \"closed_caption\": true,\n  \"far_end_camera_control\": true,\n  \"group_hd\": true,\n  \"virtual_background\": false,\n  \"alert_guest_join\": false,\n  \"auto_answer\": false,\n  \"sending_default_email_invites\": true,\n  \"use_html_format_email\": true,\n  \"dscp_marking\": true,\n  \"stereo_audio\": true,\n  \"original_audio\": true,\n  \"screen_sharing\": false,\n  \"custom_data_center_regions\": true,\n  \"meeting_reactions\": false,\n  \"file_transfer\": true,\n  \"request_permission_to_unmute\": false,\n  \"allow_live_streaming\": true,\n  \"webinar_live_streaming\": true,\n  \"webinar_chat\": false,\n  \"save_caption\": false,\n  \"slide_control\": false,\n  \"meeting_survey\": false,\n  \"webinar_polling\": true,\n  \"webinar_survey\": true\n },\n \"email_notification\": {\n  \"cloud_recording_available_reminder\": false,\n  \"jbh_reminder\": false,\n  \"cancel_meeting_reminder\": true,\n  \"alternative_host_reminder\": false,\n  \"schedule_for_reminder\": false\n },\n \"recording\": {\n  \"local_recording\": false,\n  \"cloud_recording\": false,\n  \"auto_recording\": \"est culpa non deserunt\",\n  \"cloud_recording_download\": true,\n  \"account_user_access_recording\": true,\n  \"host_delete_cloud_recording\": true,\n  \"auto_delete_cmr\": true,\n  \"recording_authentication\": \"ut sunt est anim proident\",\n  \"prevent_host_access_recording\": true,\n  \"ip_address_access_control\": {\n   \"enable\": true,\n   \"ip_addresses_or_ranges\": \"laborum sed incidi\"\n  }\n },\n \"telephony\": {\n  \"third_party_audio\": false,\n  \"telephony_regions\": false\n },\n \"tsp\": {\n  \"call_out\": false,\n  \"show_international_numbers_link\": false\n },\n \"other_options\": {\n  \"blur_snapshot\": true\n },\n \"audio_conferencing\": {\n  \"toll_free_and_fee_based_toll_call\": false\n }\n}"
										},
										{
											"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `2001`<br>\nAccount does not exist: $subAccountId.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/lock_settings?option=culpa velit reprehenderit&custom_query_fields=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"lock_settings"
													],
													"query": [
														{
															"key": "option",
															"value": "culpa velit reprehenderit"
														},
														{
															"key": "custom_query_fields",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique Identifier of the account. To retrieve locked settings of the master account or a regular account, provide \"me\" as the value of this field. <br> To retrieve locked settings of a sub account, provide the Account ID of the sub account in this field."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update locked settings",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "schedule_meeting",
													"value": "{\"host_video\":false,\"participant_video\":true,\"audio_type\":true,\"join_before_host\":false,\"enforce_login\":true,\"enforce_login_with_domains\":true,\"enforce_login_domains\":\"nu\",\"not_store_meeting_topic\":false,\"require_password_for_scheduling_new_meetings\":true,\"require_password_for_instant_meetings\":false,\"require_password_for_pmi_meetings\":false,\"use_pmi_for_scheduled_meetings\":true,\"use_pmi_for_instant_meetings\":false,\"meeting_authentication\":true,\"embed_password_in_join_link\":false,\"personal_meeting\":true}",
													"type": "text"
												},
												{
													"key": "in_meeting",
													"value": "{\"e2e_encryption\":true,\"chat\":false,\"private_chat\":true,\"auto_saving_chat\":false,\"entry_exit_chime\":\"amet consectetur voluptate\",\"feedback\":false,\"post_meeting_feedback\":true,\"co_host\":true,\"polling\":false,\"attendee_on_hold\":false,\"show_meeting_control_toolbar\":true,\"allow_show_zoom_windows\":false,\"annotation\":false,\"whiteboard\":true,\"remote_control\":false,\"webinar_question_answer\":false,\"anonymous_question_answer\":false,\"breakout_room\":false,\"closed_caption\":false,\"far_end_camera_control\":true,\"group_hd\":true,\"virtual_background\":false,\"alert_guest_join\":false,\"auto_answer\":true,\"sending_default_email_invites\":true,\"use_html_format_email\":false,\"dscp_marking\":true,\"stereo_audio\":false,\"original_audio\":false,\"screen_sharing\":true,\"file_transfer\":false,\"custom_data_center_regions\":true,\"request_permission_to_unmute\":false,\"allow_live_streaming\":false,\"webinar_live_streaming\":true,\"webinar_chat\":true,\"save_caption\":false,\"slide_control\":true,\"meeting_survey\":false,\"webinar_polling\":false,\"webinar_survey\":false}",
													"type": "text"
												},
												{
													"key": "email_notification",
													"value": "{\"cloud_recording_available_reminder\":false,\"jbh_reminder\":true,\"cancel_meeting_reminder\":false,\"alternative_host_reminder\":false,\"schedule_for_reminder\":false}",
													"type": "text"
												},
												{
													"key": "recording",
													"value": "{\"local_recording\":false,\"cloud_recording\":true,\"auto_recording\":\"laborum aute culpa\",\"cloud_recording_download\":false,\"account_user_access_recording\":false,\"host_delete_cloud_recording\":true,\"auto_delete_cmr\":true,\"recording_authentication\":\"exercitation sint nostrud id non\",\"prevent_host_access_recording\":false,\"ip_address_access_control\":{\"enable\":true,\"ip_addresses_or_ranges\":\"officia veniam\"}}",
													"type": "text"
												},
												{
													"key": "telephony",
													"value": "{\"third_party_audio\":false,\"telephony_regions\":true}",
													"type": "text"
												},
												{
													"key": "tsp",
													"value": "{\"call_out\":true,\"show_international_numbers_link\":true}",
													"type": "text"
												},
												{
													"key": "other_options",
													"value": "{\"blur_snapshot\":true}",
													"type": "text"
												},
												{
													"key": "audio_conferencing",
													"value": "{\"toll_free_and_fee_based_toll_call\":true}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/lock_settings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"lock_settings"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of the account. To retrieve locked settings of the master account or a regular account, provide \"me\" as the value of this field. <br> To retrieve locked settings of a sub account, provide the Account ID of the sub account in this field."
												}
											]
										},
										"description": "[Account Locked Settings](https://support.zoom.us/hc/en-us/articles/115005269866) allow you turn settings on or off for all users in your account. No user except the account admin or account owner can change these settings. With lock settings, you force the settings on for all users. Use this API to update an account's locked settings.\n\n**Note:** This API can be used by Zoom Accounts that are on a Pro or a higher plan as well accounts that have master and sub accounts options enabled.<br><br>\n**Prerequisites:**<br>\n* Pro or a higher paid account. <br>\n\n**Scope:** `account:write:admin`<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n\n\n "
									},
									"response": [
										{
											"name": "**Error Code:** `200`<br>\nOnly available for Paid account: $accountId.\n",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "schedule_meeting",
															"value": "{\"host_video\":false,\"participant_video\":true,\"audio_type\":true,\"join_before_host\":false,\"enforce_login\":true,\"enforce_login_with_domains\":true,\"enforce_login_domains\":\"nu\",\"not_store_meeting_topic\":false,\"require_password_for_scheduling_new_meetings\":true,\"require_password_for_instant_meetings\":false,\"require_password_for_pmi_meetings\":false,\"use_pmi_for_scheduled_meetings\":true,\"use_pmi_for_instant_meetings\":false,\"meeting_authentication\":true,\"embed_password_in_join_link\":false,\"personal_meeting\":true}",
															"type": "text"
														},
														{
															"key": "in_meeting",
															"value": "{\"e2e_encryption\":true,\"chat\":false,\"private_chat\":true,\"auto_saving_chat\":false,\"entry_exit_chime\":\"amet consectetur voluptate\",\"feedback\":false,\"post_meeting_feedback\":true,\"co_host\":true,\"polling\":false,\"attendee_on_hold\":false,\"show_meeting_control_toolbar\":true,\"allow_show_zoom_windows\":false,\"annotation\":false,\"whiteboard\":true,\"remote_control\":false,\"webinar_question_answer\":false,\"anonymous_question_answer\":false,\"breakout_room\":false,\"closed_caption\":false,\"far_end_camera_control\":true,\"group_hd\":true,\"virtual_background\":false,\"alert_guest_join\":false,\"auto_answer\":true,\"sending_default_email_invites\":true,\"use_html_format_email\":false,\"dscp_marking\":true,\"stereo_audio\":false,\"original_audio\":false,\"screen_sharing\":true,\"file_transfer\":false,\"custom_data_center_regions\":true,\"request_permission_to_unmute\":false,\"allow_live_streaming\":false,\"webinar_live_streaming\":true,\"webinar_chat\":true,\"save_caption\":false,\"slide_control\":true,\"meeting_survey\":false,\"webinar_polling\":false,\"webinar_survey\":false}",
															"type": "text"
														},
														{
															"key": "email_notification",
															"value": "{\"cloud_recording_available_reminder\":false,\"jbh_reminder\":true,\"cancel_meeting_reminder\":false,\"alternative_host_reminder\":false,\"schedule_for_reminder\":false}",
															"type": "text"
														},
														{
															"key": "recording",
															"value": "{\"local_recording\":false,\"cloud_recording\":true,\"auto_recording\":\"laborum aute culpa\",\"cloud_recording_download\":false,\"account_user_access_recording\":false,\"host_delete_cloud_recording\":true,\"auto_delete_cmr\":true,\"recording_authentication\":\"exercitation sint nostrud id non\",\"prevent_host_access_recording\":false,\"ip_address_access_control\":{\"enable\":true,\"ip_addresses_or_ranges\":\"officia veniam\"}}",
															"type": "text"
														},
														{
															"key": "telephony",
															"value": "{\"third_party_audio\":false,\"telephony_regions\":true}",
															"type": "text"
														},
														{
															"key": "tsp",
															"value": "{\"call_out\":true,\"show_international_numbers_link\":true}",
															"type": "text"
														},
														{
															"key": "other_options",
															"value": "{\"blur_snapshot\":true}",
															"type": "text"
														},
														{
															"key": "audio_conferencing",
															"value": "{\"toll_free_and_fee_based_toll_call\":true}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/lock_settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"lock_settings"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique Identifier of the account. To retrieve locked settings of the master account or a regular account, provide \"me\" as the value of this field. <br> To retrieve locked settings of a sub account, provide the Account ID of the sub account in this field."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "**HTTP Status Code:** `204`<br>\nAccount lock settings updated.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "schedule_meeting",
															"value": "{\"host_video\":false,\"participant_video\":true,\"audio_type\":true,\"join_before_host\":false,\"enforce_login\":true,\"enforce_login_with_domains\":true,\"enforce_login_domains\":\"nu\",\"not_store_meeting_topic\":false,\"require_password_for_scheduling_new_meetings\":true,\"require_password_for_instant_meetings\":false,\"require_password_for_pmi_meetings\":false,\"use_pmi_for_scheduled_meetings\":true,\"use_pmi_for_instant_meetings\":false,\"meeting_authentication\":true,\"embed_password_in_join_link\":false,\"personal_meeting\":true}",
															"type": "text"
														},
														{
															"key": "in_meeting",
															"value": "{\"e2e_encryption\":true,\"chat\":false,\"private_chat\":true,\"auto_saving_chat\":false,\"entry_exit_chime\":\"amet consectetur voluptate\",\"feedback\":false,\"post_meeting_feedback\":true,\"co_host\":true,\"polling\":false,\"attendee_on_hold\":false,\"show_meeting_control_toolbar\":true,\"allow_show_zoom_windows\":false,\"annotation\":false,\"whiteboard\":true,\"remote_control\":false,\"webinar_question_answer\":false,\"anonymous_question_answer\":false,\"breakout_room\":false,\"closed_caption\":false,\"far_end_camera_control\":true,\"group_hd\":true,\"virtual_background\":false,\"alert_guest_join\":false,\"auto_answer\":true,\"sending_default_email_invites\":true,\"use_html_format_email\":false,\"dscp_marking\":true,\"stereo_audio\":false,\"original_audio\":false,\"screen_sharing\":true,\"file_transfer\":false,\"custom_data_center_regions\":true,\"request_permission_to_unmute\":false,\"allow_live_streaming\":false,\"webinar_live_streaming\":true,\"webinar_chat\":true,\"save_caption\":false,\"slide_control\":true,\"meeting_survey\":false,\"webinar_polling\":false,\"webinar_survey\":false}",
															"type": "text"
														},
														{
															"key": "email_notification",
															"value": "{\"cloud_recording_available_reminder\":false,\"jbh_reminder\":true,\"cancel_meeting_reminder\":false,\"alternative_host_reminder\":false,\"schedule_for_reminder\":false}",
															"type": "text"
														},
														{
															"key": "recording",
															"value": "{\"local_recording\":false,\"cloud_recording\":true,\"auto_recording\":\"laborum aute culpa\",\"cloud_recording_download\":false,\"account_user_access_recording\":false,\"host_delete_cloud_recording\":true,\"auto_delete_cmr\":true,\"recording_authentication\":\"exercitation sint nostrud id non\",\"prevent_host_access_recording\":false,\"ip_address_access_control\":{\"enable\":true,\"ip_addresses_or_ranges\":\"officia veniam\"}}",
															"type": "text"
														},
														{
															"key": "telephony",
															"value": "{\"third_party_audio\":false,\"telephony_regions\":true}",
															"type": "text"
														},
														{
															"key": "tsp",
															"value": "{\"call_out\":true,\"show_international_numbers_link\":true}",
															"type": "text"
														},
														{
															"key": "other_options",
															"value": "{\"blur_snapshot\":true}",
															"type": "text"
														},
														{
															"key": "audio_conferencing",
															"value": "{\"toll_free_and_fee_based_toll_call\":true}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/lock_settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"lock_settings"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique Identifier of the account. To retrieve locked settings of the master account or a regular account, provide \"me\" as the value of this field. <br> To retrieve locked settings of a sub account, provide the Account ID of the sub account in this field."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `2001`<br>\nTAccount does not exist: $subAccountId.\n",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "schedule_meeting",
															"value": "{\"host_video\":false,\"participant_video\":true,\"audio_type\":true,\"join_before_host\":false,\"enforce_login\":true,\"enforce_login_with_domains\":true,\"enforce_login_domains\":\"nu\",\"not_store_meeting_topic\":false,\"require_password_for_scheduling_new_meetings\":true,\"require_password_for_instant_meetings\":false,\"require_password_for_pmi_meetings\":false,\"use_pmi_for_scheduled_meetings\":true,\"use_pmi_for_instant_meetings\":false,\"meeting_authentication\":true,\"embed_password_in_join_link\":false,\"personal_meeting\":true}",
															"type": "text"
														},
														{
															"key": "in_meeting",
															"value": "{\"e2e_encryption\":true,\"chat\":false,\"private_chat\":true,\"auto_saving_chat\":false,\"entry_exit_chime\":\"amet consectetur voluptate\",\"feedback\":false,\"post_meeting_feedback\":true,\"co_host\":true,\"polling\":false,\"attendee_on_hold\":false,\"show_meeting_control_toolbar\":true,\"allow_show_zoom_windows\":false,\"annotation\":false,\"whiteboard\":true,\"remote_control\":false,\"webinar_question_answer\":false,\"anonymous_question_answer\":false,\"breakout_room\":false,\"closed_caption\":false,\"far_end_camera_control\":true,\"group_hd\":true,\"virtual_background\":false,\"alert_guest_join\":false,\"auto_answer\":true,\"sending_default_email_invites\":true,\"use_html_format_email\":false,\"dscp_marking\":true,\"stereo_audio\":false,\"original_audio\":false,\"screen_sharing\":true,\"file_transfer\":false,\"custom_data_center_regions\":true,\"request_permission_to_unmute\":false,\"allow_live_streaming\":false,\"webinar_live_streaming\":true,\"webinar_chat\":true,\"save_caption\":false,\"slide_control\":true,\"meeting_survey\":false,\"webinar_polling\":false,\"webinar_survey\":false}",
															"type": "text"
														},
														{
															"key": "email_notification",
															"value": "{\"cloud_recording_available_reminder\":false,\"jbh_reminder\":true,\"cancel_meeting_reminder\":false,\"alternative_host_reminder\":false,\"schedule_for_reminder\":false}",
															"type": "text"
														},
														{
															"key": "recording",
															"value": "{\"local_recording\":false,\"cloud_recording\":true,\"auto_recording\":\"laborum aute culpa\",\"cloud_recording_download\":false,\"account_user_access_recording\":false,\"host_delete_cloud_recording\":true,\"auto_delete_cmr\":true,\"recording_authentication\":\"exercitation sint nostrud id non\",\"prevent_host_access_recording\":false,\"ip_address_access_control\":{\"enable\":true,\"ip_addresses_or_ranges\":\"officia veniam\"}}",
															"type": "text"
														},
														{
															"key": "telephony",
															"value": "{\"third_party_audio\":false,\"telephony_regions\":true}",
															"type": "text"
														},
														{
															"key": "tsp",
															"value": "{\"call_out\":true,\"show_international_numbers_link\":true}",
															"type": "text"
														},
														{
															"key": "other_options",
															"value": "{\"blur_snapshot\":true}",
															"type": "text"
														},
														{
															"key": "audio_conferencing",
															"value": "{\"toll_free_and_fee_based_toll_call\":true}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/lock_settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"lock_settings"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique Identifier of the account. To retrieve locked settings of the master account or a regular account, provide \"me\" as the value of this field. <br> To retrieve locked settings of a sub account, provide the Account ID of the sub account in this field."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "sip trunk",
							"item": [
								{
									"name": "settings",
									"item": [
										{
											"name": "Assign SIP trunk configuration",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "enable",
															"value": "false",
															"description": "Assign or delete the SIP configuration:\n\n* `true` — Assign the Master account's SIP configuration information to the subaccount.\n* `false` — Delete the subaccount's assigned SIP configuration.\n\nIf you do **not** query this parameter, the API will **not** modify the subaccount's configuration.",
															"type": "text"
														},
														{
															"key": "show_callout_internal_number",
															"value": "false",
															"description": "If the value of this option is set to `true`, the call-out numbers provided by the Zoom carrier partners will be displayed in the account's list of available call-out numbers in the Zoom Web Portal and Zoom Client.",
															"type": "text"
														},
														{
															"key": "show_zoom_provided_callout_countries",
															"value": "-27885931",
															"description": "If the value of this option is set to `0`, the call-out countries list provided by Zoom will be [displayed](https://support.zoom.us/hc/en-us/articles/200942859-Using-telephone-call-out) in the account's list of available call-out countries. \n\nIf the value of this option is set to `1`, the Zoom provided call-out countries will be hidden from the user's account.<br> \n\nIf the value of this option is set to `2`, all Zoom provided countries will be deleted and only internal countries (provided by carrier partners) will be used.",
															"type": "text"
														},
														{
															"key": "show_zoom_provided_numbers",
															"value": "1",
															"description": "If the value of this option is set to `0`, the numbers provided by Zoom will be displayed in the account's list of available call-out and call-in numbers in the Zoom Web Portal and Zoom Client. \n\nIf the value of this option is set to `1`, the Zoom provided numbers will be shown in the Zoom Web Portal but will not be used unless specified by the user.<br> \n\nIf the value of this option is set to `2`, all Zoom provided numbers will be deleted and only internal numbers (provided by carrier partners) will be used. (This can only be one of 0,1,2)",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"sip_trunk",
														"settings"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) "
														}
													]
												},
												"description": "Use this API to copy the Session Initiation Protocol (SIP) Connected Audio configurations applied on the Master account and enable or disable those configurations on a subaccount.\n\nWith SIP-connected audio, Zoom establishes a [SIP trunk](https://en.wikipedia.org/wiki/SIP_trunking) (a network connection specifically designed to make and deliver phone calls) over a direct and private connection between the customer’s network and the Zoom cloud. Meeting participants that dial into a meeting or have the meeting call them, and are On-Net from the perspective of the customers' IP telephony network, will be connected over this trunk rather than over the PSTN.\n\n**Scopes:** `sip_trunk:master`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* Pro or a higher account with SIP Connected Audio plan enabled. \n* A Master account owner"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `204` **No Content**<br>\nConfiguration assigned successfully.\n",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "enable",
																	"value": "false",
																	"description": "Assign or delete the SIP configuration:\n\n* `true` — Assign the Master account's SIP configuration information to the subaccount.\n* `false` — Delete the subaccount's assigned SIP configuration.\n\nIf you do **not** query this parameter, the API will **not** modify the subaccount's configuration.",
																	"type": "text"
																},
																{
																	"key": "show_callout_internal_number",
																	"value": "false",
																	"description": "If the value of this option is set to `true`, the call-out numbers provided by the Zoom carrier partners will be displayed in the account's list of available call-out numbers in the Zoom Web Portal and Zoom Client.",
																	"type": "text"
																},
																{
																	"key": "show_zoom_provided_callout_countries",
																	"value": "-27885931",
																	"description": "If the value of this option is set to `0`, the call-out countries list provided by Zoom will be [displayed](https://support.zoom.us/hc/en-us/articles/200942859-Using-telephone-call-out) in the account's list of available call-out countries. \n\nIf the value of this option is set to `1`, the Zoom provided call-out countries will be hidden from the user's account.<br> \n\nIf the value of this option is set to `2`, all Zoom provided countries will be deleted and only internal countries (provided by carrier partners) will be used.",
																	"type": "text"
																},
																{
																	"key": "show_zoom_provided_numbers",
																	"value": "1",
																	"description": "If the value of this option is set to `0`, the numbers provided by Zoom will be displayed in the account's list of available call-out and call-in numbers in the Zoom Web Portal and Zoom Client. \n\nIf the value of this option is set to `1`, the Zoom provided numbers will be shown in the Zoom Web Portal but will not be used unless specified by the user.<br> \n\nIf the value of this option is set to `2`, all Zoom provided numbers will be deleted and only internal numbers (provided by carrier partners) will be used. (This can only be one of 0,1,2)",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/settings",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"settings"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `2100`<br>\nThis sub account has no sip trunk plan.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "enable",
																	"value": "false",
																	"description": "Assign or delete the SIP configuration:\n\n* `true` — Assign the Master account's SIP configuration information to the subaccount.\n* `false` — Delete the subaccount's assigned SIP configuration.\n\nIf you do **not** query this parameter, the API will **not** modify the subaccount's configuration.",
																	"type": "text"
																},
																{
																	"key": "show_callout_internal_number",
																	"value": "false",
																	"description": "If the value of this option is set to `true`, the call-out numbers provided by the Zoom carrier partners will be displayed in the account's list of available call-out numbers in the Zoom Web Portal and Zoom Client.",
																	"type": "text"
																},
																{
																	"key": "show_zoom_provided_callout_countries",
																	"value": "-27885931",
																	"description": "If the value of this option is set to `0`, the call-out countries list provided by Zoom will be [displayed](https://support.zoom.us/hc/en-us/articles/200942859-Using-telephone-call-out) in the account's list of available call-out countries. \n\nIf the value of this option is set to `1`, the Zoom provided call-out countries will be hidden from the user's account.<br> \n\nIf the value of this option is set to `2`, all Zoom provided countries will be deleted and only internal countries (provided by carrier partners) will be used.",
																	"type": "text"
																},
																{
																	"key": "show_zoom_provided_numbers",
																	"value": "1",
																	"description": "If the value of this option is set to `0`, the numbers provided by Zoom will be displayed in the account's list of available call-out and call-in numbers in the Zoom Web Portal and Zoom Client. \n\nIf the value of this option is set to `1`, the Zoom provided numbers will be shown in the Zoom Web Portal but will not be used unless specified by the user.<br> \n\nIf the value of this option is set to `2`, all Zoom provided numbers will be deleted and only internal numbers (provided by carrier partners) will be used. (This can only be one of 0,1,2)",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/settings",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"settings"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `2001`<br>\nThis account does not exist or does not belong to this master account.<br>\nThis account does not exist or does not belong to you.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "enable",
																	"value": "false",
																	"description": "Assign or delete the SIP configuration:\n\n* `true` — Assign the Master account's SIP configuration information to the subaccount.\n* `false` — Delete the subaccount's assigned SIP configuration.\n\nIf you do **not** query this parameter, the API will **not** modify the subaccount's configuration.",
																	"type": "text"
																},
																{
																	"key": "show_callout_internal_number",
																	"value": "false",
																	"description": "If the value of this option is set to `true`, the call-out numbers provided by the Zoom carrier partners will be displayed in the account's list of available call-out numbers in the Zoom Web Portal and Zoom Client.",
																	"type": "text"
																},
																{
																	"key": "show_zoom_provided_callout_countries",
																	"value": "-27885931",
																	"description": "If the value of this option is set to `0`, the call-out countries list provided by Zoom will be [displayed](https://support.zoom.us/hc/en-us/articles/200942859-Using-telephone-call-out) in the account's list of available call-out countries. \n\nIf the value of this option is set to `1`, the Zoom provided call-out countries will be hidden from the user's account.<br> \n\nIf the value of this option is set to `2`, all Zoom provided countries will be deleted and only internal countries (provided by carrier partners) will be used.",
																	"type": "text"
																},
																{
																	"key": "show_zoom_provided_numbers",
																	"value": "1",
																	"description": "If the value of this option is set to `0`, the numbers provided by Zoom will be displayed in the account's list of available call-out and call-in numbers in the Zoom Web Portal and Zoom Client. \n\nIf the value of this option is set to `1`, the Zoom provided numbers will be shown in the Zoom Web Portal but will not be used unless specified by the user.<br> \n\nIf the value of this option is set to `2`, all Zoom provided numbers will be deleted and only internal numbers (provided by carrier partners) will be used. (This can only be one of 0,1,2)",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/settings",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"settings"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get SIP trunk configuration",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"sip_trunk",
														"settings"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The account's unique ID. \n* To add call-out enabled countries to a subaccount, provide the subaccount's ID for this parameter. \n* To add call-out enabled countries to a Master account, provide the `me` value for this parameter."
														}
													]
												},
												"description": "Use this API to get a SIP (Session Initiation Protocol) trunk configuration.\n\n**Scopes:** `sip_trunk:master`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* The account making this API request must be a [Master account](https://marketplace.zoom.us/docs/api-reference/master-account-apis) with the SIP Connected Audio plan. \n* A Pro or a higher paid account with Master account option enabled."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\nSIP trunk configuration returned.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/settings",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"settings"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The account's unique ID. \n* To add call-out enabled countries to a subaccount, provide the subaccount's ID for this parameter. \n* To add call-out enabled countries to a Master account, provide the `me` value for this parameter."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"show_callout_internal_number\": true,\n \"show_zoom_provided_callout_countries\": 0,\n \"show_zoom_provided_numbers\": 0\n}"
												}
											]
										}
									]
								},
								{
									"name": "numbers",
									"item": [
										{
											"name": "Assign numbers",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "phone_numbers",
															"value": "[\"nostrud do laboris Ut\",\"fugiat aute veniam\"]",
															"description": "Phone number(s) to be assigned to the sub account.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/numbers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"sip_trunk",
														"numbers"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique Identifier of the sub account."
														}
													]
												},
												"description": "With SIP-connected audio, Zoom establishes a SIP trunk (a network connection specifically designed to make and deliver phone calls) over a direct and private connection between the customer’s network and the Zoom cloud. Meeting participants that dial into a meeting or have the meeting call them, and are On-Net from the perspective of the customers' IP telephony network, will be connected over this trunk rather than over the PSTN. <br><br>Use this API to assign internal numbers to a sub account.\n\n**Prerequisites:**<br>\n* Pro or a higher account with SIP Connected Audio plan enabled.\n* The account must be a master account<br>\n**Scopes:** `sip_trunk:master`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `201` **Created**<br>\nNumbers assigned successfully.\n",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "phone_numbers",
																	"value": "[\"proident sint minim\",\"occaecat in reprehenderit velit\"]",
																	"description": "Phone number(s) to be assigned to the sub account.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/numbers",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"numbers"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique Identifier of the sub account."
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `2100`<br>\nThis sub account has no sip trunk plan.<br><br>\n**Error Code:** `400`<br>\nThis number does not belong to master account.\n",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "phone_numbers",
																	"value": "[\"proident sint minim\",\"occaecat in reprehenderit velit\"]",
																	"description": "Phone number(s) to be assigned to the sub account.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/numbers",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"numbers"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique Identifier of the sub account."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `2001`<br>\nThis account does not exist or does not belong to this master account.<br>\nThis account does not exist or does not belong to you.\n",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "phone_numbers",
																	"value": "[\"proident sint minim\",\"occaecat in reprehenderit velit\"]",
																	"description": "Phone number(s) to be assigned to the sub account.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/numbers",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"numbers"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique Identifier of the sub account."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Delete all numbers",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/numbers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"sip_trunk",
														"numbers"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Account ID of the sub account from which the numbers are to be deleted. This can be retrieved from [List sub accounts](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/account) API."
														}
													]
												},
												"description": "With SIP-connected audio, Zoom establishes a SIP trunk (a network connection specifically designed to make and deliver phone calls) over a direct and private connection between the customer’s network and the Zoom cloud. Meeting participants that dial into a meeting or have the meeting call them, and are On-Net from the perspective of the customers' IP telephony network, will be connected over this trunk rather than over the PSTN. <br><br>Use this API to delete all internal numbers assigned to a sub account.\n**Prerequisites:**<br>\n\n* Pro or a higher account with SIP Connected Audio plan enabled.\n* The account must be a master account<br>\n**Scopes:** `sip_trunk:master`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `204` **No Content**<br>\nNumbers deleted successfully.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/numbers",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"numbers"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Account ID of the sub account from which the numbers are to be deleted. This can be retrieved from [List sub accounts](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/account) API."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `2100`<br>\nThis sub account has no sip trunk plan.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/numbers",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"numbers"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Account ID of the sub account from which the numbers are to be deleted. This can be retrieved from [List sub accounts](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/account) API."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `2001`<br>\nThis account does not exist or does not belong to this master account.<br>\nThis account does not exist or does not belong to you.<br><br>",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/numbers",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"numbers"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Account ID of the sub account from which the numbers are to be deleted. This can be retrieved from [List sub accounts](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/account) API."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "trunks",
									"item": [
										{
											"name": "List SIP trunks",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/trunks",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"sip_trunk",
														"trunks"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique Identifier of the Account. To retrieve SIP trunks assigned to a sub account, provide the account ID of the sub account in the as the value of this field. To retrieve SIP trunks of a master account, provide `me` as the value of this field."
														}
													]
												},
												"description": "With SIP-connected audio, Zoom establishes a SIP trunk (a network connection specifically designed to make and deliver phone calls) over a direct and private connection between the customer’s network and the Zoom cloud. Meeting participants that dial into a meeting or have the meeting call them, and are On-Net from the perspective of the customers’ IP telephony network, will be connected over this trunk rather than over the PSTN.<br><br>\nUse this API to list all the SIP trunks assigned to a master account or a sub account of the master account. To retrieve SIP trunks assigned to a sub account, provide the account ID of the sub account in the `accountId` path parameter. To retrieve SIP trunks of a master account, provide `me` as the value of the `accountId` path parameter. <br><br> **Scope:** `sip_trunk:read:admin`\n<br><b>Prerequisites:</b><br>\n* The account must either be a master account or a sub account with [API Partner Plan](https://zoom.us/plan/api) and SIP Connected Audio Plan."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200` **OK**<br>\nList of SIP Trunks returned.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/trunks",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"trunks"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique Identifier of the Account. To retrieve SIP trunks assigned to a sub account, provide the account ID of the sub account in the as the value of this field. To retrieve SIP trunks of a master account, provide `me` as the value of this field."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"total_records\": 1,\n \"sip_trunks\": [\n  {\n   \"id\": \"268\",\n   \"name\": \"test1\",\n   \"sip_server_address\": \"111.111.1.1\",\n   \"dnis\": \"90001258\",\n   \"number_prefix\": \"0\"\n  },\n  {\n   \"id\": \"281\",\n   \"name\": \"test2\",\n   \"sip_server_address\": \"111.111.1.34\",\n   \"dnis\": \"80001748\",\n   \"number_prefix\": \"0\"\n  }\n ]\n}"
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `300`<br> Request failed because this account is not enrolled in SIP Connected Audio plan.\n\n",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/trunks",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"trunks"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique Identifier of the Account. To retrieve SIP trunks assigned to a sub account, provide the account ID of the sub account in the as the value of this field. To retrieve SIP trunks of a master account, provide `me` as the value of this field."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `2001`<br> Account does not exist: {0}.\n\n",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/trunks",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"trunks"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique Identifier of the Account. To retrieve SIP trunks assigned to a sub account, provide the account ID of the sub account in the as the value of this field. To retrieve SIP trunks of a master account, provide `me` as the value of this field."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Assign SIP trunks",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "sip_trunks",
															"value": "[{\"id\":\"culpa fugiat consectetur\",\"dnis\":\"dolor \",\"outbound_caller_id\":\"enim nostrud\"}]",
															"description": "Array of one or more SIP Trunk objects. ",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/trunks",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"sip_trunk",
														"trunks"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique Identifier of the sub account."
														}
													]
												},
												"description": "With SIP-connected audio, Zoom establishes a SIP trunk (a network connection specifically designed to make and deliver phone calls) over a direct and private connection between the customer’s network and the Zoom cloud. Meeting participants that dial into a meeting or have the meeting call them, and are On-Net from the perspective of the customers’ IP telephony network, will be connected over this trunk rather than over the PSTN.<br><br>Use this API to assign SIP trunk(s) that are available on a master account to a sub account. <br><b>Prerequisites:</b><br>\n* The account making this API request must be a master account with [API Partner Plan](https://zoom.us/plan/api) and SIP Connected Audio Plan.<br><br>\n**Scope:** `sip_trunk:master`"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `204` **No Content**<br>\nSIP Trunk assigned successfully.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "sip_trunks",
																	"value": "[{\"id\":\"culpa fugiat consectetur\",\"dnis\":\"dolor \",\"outbound_caller_id\":\"enim nostrud\"}]",
																	"description": "Array of one or more SIP Trunk objects. ",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/trunks",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"trunks"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique Identifier of the sub account."
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"sip_trunks\": [\n  {\n   \"id\": \"represdf324fe\",\n   \"name\": \"HQ-trunk\",\n   \"sip_server_address\": \"1.11.123.123\",\n   \"dnis\": \"dolore43tr4u\",\n   \"number_prefix\": \"0\"\n  }\n ]\n}"
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `300`<br> \n* Request failed because this account is not enrolled in SIP Connected Audio plan.<br>\n* The master account has no sip trunk configs.<br>\n* Invalid parameter: sip_trunks.\n\n\n",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "sip_trunks",
																	"value": "[{\"id\":\"culpa fugiat consectetur\",\"dnis\":\"dolor \",\"outbound_caller_id\":\"enim nostrud\"}]",
																	"description": "Array of one or more SIP Trunk objects. ",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/trunks",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"trunks"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique Identifier of the sub account."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `2001`<br> Account does not exist: {0}.\n\n\n",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "sip_trunks",
																	"value": "[{\"id\":\"culpa fugiat consectetur\",\"dnis\":\"dolor \",\"outbound_caller_id\":\"enim nostrud\"}]",
																	"description": "Array of one or more SIP Trunk objects. ",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/trunks",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"trunks"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique Identifier of the sub account."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Delete a SIP trunk",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/trunks/:trunkId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"sip_trunk",
														"trunks",
														":trunkId"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique identifier of the sub account."
														},
														{
															"key": "trunkId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique identifier of the SIP Trunk that was previously assigned to a sub account. To retrieve the value of this field, use the List SIP Trunks API."
														}
													]
												},
												"description": "Use this API to remove existing SIP trunk of a sub account.<br>\n<br><b>Prerequisites:</b><br>\n* The account making this API request must be a master account with [API Partner Plan](https://zoom.us/plan/api) and SIP Connected Audio Plan.<br><br>\n**Scope:** `sip_trunk:master`"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `204` **No Content**<br>\nSIP Trunk deleted.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/trunks/:trunkId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"trunks",
																":trunkId"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the sub account."
																},
																{
																	"key": "trunkId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the SIP Trunk that was previously assigned to a sub account. To retrieve the value of this field, use the List SIP Trunks API."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `300`<br> \n* Request failed because this account is not enrolled in SIP Connected Audio plan.<br>\n* Your account does not have the permission to make updates on this account. Only a master ac",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/trunks/:trunkId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"trunks",
																":trunkId"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the sub account."
																},
																{
																	"key": "trunkId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the SIP Trunk that was previously assigned to a sub account. To retrieve the value of this field, use the List SIP Trunks API."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `2001`<br> Account does not exist: {0}.\n\n\n\n",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/trunks/:trunkId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"trunks",
																":trunkId"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the sub account."
																},
																{
																	"key": "trunkId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the SIP Trunk that was previously assigned to a sub account. To retrieve the value of this field, use the List SIP Trunks API."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "callout countries",
									"item": [
										{
											"name": "Add internal call-out countries",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "callout_countries",
															"value": "[{\"id\":\"consequat proident\"}]",
															"description": "(Required) List of callout countries.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/callout_countries",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"sip_trunk",
														"callout_countries"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique identifier of the account. To add Call-out enabled countries to a sub account, provide the account ID of the sub account in the `accountId` path parameter. To add Call-out enabled countries to a master account, provide `me` as the value of the `accountId` path parameter."
														}
													]
												},
												"description": "Specify the list of [call-out](https://support.zoom.us/hc/en-us/articles/200942859-How-To-Use-Telephone-Call-Out-) countries for a master account or a sub account. To add call-out enabled countries to a sub account, provide the account ID of the sub account in the `accountId` path parameter. To add call-out enabled countries to a master account, provide `me` as the value of the `accountId` path parameter.\n<br><b>Prerequisites:</b><br>\n* The account making this API request must be a [master account](https://marketplace.zoom.us/docs/api-reference/master-account-apis) with SIP Connected Audio Plan.<br><br>\n**Scope:** `sip_trunk:master`"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `201` **Created** <br>\nCall-out countries created.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "callout_countries",
																	"value": "[{\"id\":\"consequat proident\"}]",
																	"description": "(Required) List of callout countries.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/callout_countries",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"callout_countries"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the account. To add Call-out enabled countries to a sub account, provide the account ID of the sub account in the `accountId` path parameter. To add Call-out enabled countries to a master account, provide `me` as the value of the `accountId` path parameter."
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"callout_countries\": [\n  {\n   \"id\": \"US\",\n   \"name\": \"United States\",\n   \"code\": \"1\"\n  },\n  {\n   \"id\": \"CA\",\n   \"name\": \"Canada\",\n   \"code\": \"1\"\n  }\n ]\n}"
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `300`<br> \n* Your account does not have the permission to make updates on this account. Only a master account can perform this action on a sub account.\n*  Request failed because this account ",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "callout_countries",
																	"value": "[{\"id\":\"consequat proident\"}]",
																	"description": "(Required) List of callout countries.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/callout_countries",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"callout_countries"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the account. To add Call-out enabled countries to a sub account, provide the account ID of the sub account in the `accountId` path parameter. To add Call-out enabled countries to a master account, provide `me` as the value of the `accountId` path parameter."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `2001`<br> Account does not exist: {0}.\n\n\n",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "callout_countries",
																	"value": "[{\"id\":\"consequat proident\"}]",
																	"description": "(Required) List of callout countries.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/callout_countries",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"callout_countries"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the account. To add Call-out enabled countries to a sub account, provide the account ID of the sub account in the `accountId` path parameter. To add Call-out enabled countries to a master account, provide `me` as the value of the `accountId` path parameter."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "List internal call-out countries",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/callout_countries",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"sip_trunk",
														"callout_countries"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique identifier of the account. To list Call-out enabled countries to a sub account, provide the account ID of the sub account in the `accountId` path parameter. To list Call-out enabled countries of a sub account, provide the account ID of the sub account in the `accountId` path parameter. To list Call-out enabled countries of a master account, provide `me` as the value of the `accountId` path parameter."
														}
													]
												},
												"description": "Retrieve the list of internal [call-out](https://support.zoom.us/hc/en-us/articles/200942859-How-To-Use-Telephone-Call-Out-) countries of a master account or a sub account. To list call-out enabled countries of a sub account, provide the account ID of the sub account in the `accountId` path parameter. To list call-out enabled countries of a master account, provide `me` as the value of the `accountId` path parameter.\n<br><b>Prerequisites:</b><br>\n* The account making this API request must be a [master account](https://marketplace.zoom.us/docs/api-reference/master-account-apis) with SIP Connected Audio Plan.<br><br>\n**Scope:** `sip_trunk:master`"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200` **OK** <br>\nList of Internal Callout Countries returned.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/callout_countries",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"callout_countries"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the account. To list Call-out enabled countries to a sub account, provide the account ID of the sub account in the `accountId` path parameter. To list Call-out enabled countries of a sub account, provide the account ID of the sub account in the `accountId` path parameter. To list Call-out enabled countries of a master account, provide `me` as the value of the `accountId` path parameter."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"total_records\": 2,\n \"callout_countries\": [\n  {\n   \"id\": \"US\",\n   \"name\": \"United States\",\n   \"code\": \"1\"\n  },\n  {\n   \"id\": \"CA\",\n   \"name\": \"Canada\",\n   \"code\": \"1\"\n  }\n ]\n}"
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `300`<br> \n* Your account does not have the permission to make updates on this account. Only a master account can perform this action on a sub account.\n*  Request failed because this account ",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/callout_countries",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"callout_countries"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the account. To list Call-out enabled countries to a sub account, provide the account ID of the sub account in the `accountId` path parameter. To list Call-out enabled countries of a sub account, provide the account ID of the sub account in the `accountId` path parameter. To list Call-out enabled countries of a master account, provide `me` as the value of the `accountId` path parameter."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `2001`<br> Account does not exist: {0}.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/callout_countries",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"callout_countries"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the account. To list Call-out enabled countries to a sub account, provide the account ID of the sub account in the `accountId` path parameter. To list Call-out enabled countries of a sub account, provide the account ID of the sub account in the `accountId` path parameter. To list Call-out enabled countries of a master account, provide `me` as the value of the `accountId` path parameter."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Delete internal call-out country",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/callout_countries/:countryId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"sip_trunk",
														"callout_countries",
														":countryId"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique Identifier of the Account.<br>\nTo remove Call-out country from a sub account, provide the account ID of the sub account in the `accountId` path parameter. To remove Call-out country from a master account, provide `me` as the value of the `accountId` path parameter."
														},
														{
															"key": "countryId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Two lettered Id of the country."
														}
													]
												},
												"description": "Delete a previously assigned [call-out](https://support.zoom.us/hc/en-us/articles/200942859-How-To-Use-Telephone-Call-Out-) country from a master account or a sub account. To remove call-out country from a sub account, provide the account ID of the sub account in the `accountId` path parameter. To remove call-out country from a master account, provide `me` as the value of the `accountId` path parameter.\n<br><b>Prerequisites:</b><br>\n* The account making this API request must be a [master account](https://marketplace.zoom.us/docs/api-reference/master-account-apis) with SIP Connected Audio Plan.<br><br>\n**Scope:** `sip_trunk:master`"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `204` **No Content** <br>\nCountry deleted. ",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/callout_countries/:countryId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"callout_countries",
																":countryId"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique Identifier of the Account.<br>\nTo remove Call-out country from a sub account, provide the account ID of the sub account in the `accountId` path parameter. To remove Call-out country from a master account, provide `me` as the value of the `accountId` path parameter."
																},
																{
																	"key": "countryId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Two lettered Id of the country."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `300`<br> \n* Your account does not have the permission to make updates on this account. Only a master account can perform this action on a sub account.\n*  Request failed because this account ",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/callout_countries/:countryId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"callout_countries",
																":countryId"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique Identifier of the Account.<br>\nTo remove Call-out country from a sub account, provide the account ID of the sub account in the `accountId` path parameter. To remove Call-out country from a master account, provide `me` as the value of the `accountId` path parameter."
																},
																{
																	"key": "countryId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Two lettered Id of the country."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `2001`<br> Account does not exist: {0}.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/callout_countries/:countryId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"callout_countries",
																":countryId"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique Identifier of the Account.<br>\nTo remove Call-out country from a sub account, provide the account ID of the sub account in the `accountId` path parameter. To remove Call-out country from a master account, provide `me` as the value of the `accountId` path parameter."
																},
																{
																	"key": "countryId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Two lettered Id of the country."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "internal numbers",
									"item": [
										{
											"name": "Add internal numbers",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "internal_numbers",
															"value": "[{\"number\":\"qui labore non\",\"display_number\":\"sed pa\",\"country\":\"sint cupidatat nostrud irure Duis\",\"type\":0,\"labels\":\"elit veniam non officia do\",\"languages\":\"nl-NL\",\"visible\":false,\"allow_join\":false,\"allow_for_external_meetings\":false}]",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/internal_numbers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"sip_trunk",
														"internal_numbers"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique identifier of the account.<br>To add internal numbers to a sub account, provide the account ID of the sub account in the `accountId` path parameter. To add internal numbers to a master account, provide `me` as the value of the `accountId` path parameter."
														}
													]
												},
												"description": "This API allows a master account with SIP Connected Audio plan to assign internal phone numbers (i.e., numbers that are not provided by Zoom but are owned by the organization consuming the API) to a master account or a sub account.<br><br>To add internal numbers to a sub account, provide the account ID of the sub account in the `accountId` path parameter. To add internal numbers to a master account, provide `me` as the value of the `accountId` path parameter.\n<br><b>Prerequisites:</b><br>\n* The account making this API request must be a [master account](https://marketplace.zoom.us/docs/api-reference/master-account-apis) with SIP Connected Audio Plan.<br><br>\n**Scope:** `sip_trunk:master`\n\n"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `201` **Created** <br>\nInternal numbers added successfully. \n",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "internal_numbers",
																	"value": "[{\"number\":\"qui labore non\",\"display_number\":\"sed pa\",\"country\":\"sint cupidatat nostrud irure Duis\",\"type\":0,\"labels\":\"elit veniam non officia do\",\"languages\":\"nl-NL\",\"visible\":false,\"allow_join\":false,\"allow_for_external_meetings\":false}]",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/internal_numbers",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"internal_numbers"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the account.<br>To add internal numbers to a sub account, provide the account ID of the sub account in the `accountId` path parameter. To add internal numbers to a master account, provide `me` as the value of the `accountId` path parameter."
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"internal_numbers\": [\n  {\n   \"id\": \"A26fhgdfg63\",\n   \"number\": \"+16466661110\",\n   \"display_number\": \"+1 646 666 1110\",\n   \"country\": \"US\",\n   \"type\": 0,\n   \"labels\": \"SIP-Internal\",\n   \"languages\": \"en-GB\",\n   \"visible\": true,\n   \"allow_join\": true\n  }\n ]\n}"
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `300`<br> \n* Your account does not have the permission to make updates on this account. Only a master account can perform this action on a sub account.\n* Request failed because this account i",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "internal_numbers",
																	"value": "[{\"number\":\"qui labore non\",\"display_number\":\"sed pa\",\"country\":\"sint cupidatat nostrud irure Duis\",\"type\":0,\"labels\":\"elit veniam non officia do\",\"languages\":\"nl-NL\",\"visible\":false,\"allow_join\":false,\"allow_for_external_meetings\":false}]",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/internal_numbers",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"internal_numbers"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the account.<br>To add internal numbers to a sub account, provide the account ID of the sub account in the `accountId` path parameter. To add internal numbers to a master account, provide `me` as the value of the `accountId` path parameter."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `2001`<br> Account does not exist: {0}.\n\n\n\n\n",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "internal_numbers",
																	"value": "[{\"number\":\"qui labore non\",\"display_number\":\"sed pa\",\"country\":\"sint cupidatat nostrud irure Duis\",\"type\":0,\"labels\":\"elit veniam non officia do\",\"languages\":\"nl-NL\",\"visible\":false,\"allow_join\":false,\"allow_for_external_meetings\":false}]",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/internal_numbers",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"internal_numbers"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the account.<br>To add internal numbers to a sub account, provide the account ID of the sub account in the `accountId` path parameter. To add internal numbers to a master account, provide `me` as the value of the `accountId` path parameter."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "List internal numbers",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/internal_numbers?page_size=30&next_page_token=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"sip_trunk",
														"internal_numbers"
													],
													"query": [
														{
															"key": "page_size",
															"value": "30",
															"description": "The number of records returned within a single API call."
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit",
															"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
														}
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique identifier of the account. To list internal numbers of a sub account, provide the account ID of the sub account in the `accountId` path parameter. To list internal numbers of a  master account, provide `me` as the value of the `accountId` path parameter."
														}
													]
												},
												"description": "This API allows a master account with SIP Connected Audio plan to list internal phone numbers (i.e., numbers that are not provided by Zoom but are owned by the organization consuming the API) assigned to a master account or a sub account.<br><br>To list internal numbers of a sub account, provide the account ID of the sub account in the `accountId` path parameter. To list internal numbers of a  master account, provide `me` as the value of the `accountId` path parameter.\n<br><b>Prerequisites:</b><br>\n* The account making this API request must be a [master account](https://marketplace.zoom.us/docs/api-reference/master-account-apis) with SIP Connected Audio Plan.<br><br>\n**Scope:** `sip_trunk:master`\n\n\n"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200` **OK**<br>\nList of internal numbers returned.\n",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/internal_numbers?page_size=30&next_page_token=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"internal_numbers"
															],
															"query": [
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the account. To list internal numbers of a sub account, provide the account ID of the sub account in the `accountId` path parameter. To list internal numbers of a  master account, provide `me` as the value of the `accountId` path parameter."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"page_size\": 30,\n \"total_records\": 62286825,\n \"next_page_token\": \"laboris ea labore dolore\",\n \"internal_numbers\": [\n  {\n   \"number\": \"anim do ex Lorem\",\n   \"display_number\": \"ut non laborum\",\n   \"country\": \"Excepteur laborum veniam id\",\n   \"type\": 0,\n   \"labels\": \"pariatur nulla\",\n   \"languages\": \"zh-HK\",\n   \"visible\": false,\n   \"allow_join\": false,\n   \"allow_for_external_meetings\": false\n  },\n  {\n   \"number\": \"exercitation nostrud veniam consequat est\",\n   \"display_number\": \"nisi culpa in\",\n   \"country\": \"id tempor consectetur ut esse\",\n   \"type\": 1,\n   \"labels\": \"labore cillum ullamco\",\n   \"languages\": \"ar\",\n   \"visible\": true,\n   \"allow_join\": false,\n   \"allow_for_external_meetings\": true\n  }\n ]\n}"
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `300`<br> \n* Your account does not have the permission to make updates on this account. Only a master account can perform this action on a sub account.\n* Request failed because this account i",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/internal_numbers?page_size=30&next_page_token=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"internal_numbers"
															],
															"query": [
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the account. To list internal numbers of a sub account, provide the account ID of the sub account in the `accountId` path parameter. To list internal numbers of a  master account, provide `me` as the value of the `accountId` path parameter."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `2001`<br> Account does not exist: {0}.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/internal_numbers?page_size=30&next_page_token=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"internal_numbers"
															],
															"query": [
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the account. To list internal numbers of a sub account, provide the account ID of the sub account in the `accountId` path parameter. To list internal numbers of a  master account, provide `me` as the value of the `accountId` path parameter."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Delete an internal number",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/internal_numbers/:numberId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"accounts",
														":accountId",
														"sip_trunk",
														"internal_numbers",
														":numberId"
													],
													"variable": [
														{
															"key": "accountId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique Identifier of the account. To delete an internal number from a sub account, provide the account ID of the sub account in the `accountId` path parameter. To delete an internal number from a master account, provide `me` as the value of the `accountId` path parameter."
														},
														{
															"key": "numberId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique identifier of the phone number. This value can be retrieved by calling the List Internal Numbers API."
														}
													]
												},
												"description": "This API allows a master account with SIP Connected Audio plan to delete a previously assigned internal phone number from a master account or a sub account.<br><br>To delete an internal number from a sub account, provide the account ID of the sub account in the `accountId` path parameter. To delete an internal number from a master account, provide `me` as the value of the `accountId` path parameter.\n<br><b>Prerequisites:</b><br>\n* The account making this API request must be a [master account](https://marketplace.zoom.us/docs/api-reference/master-account-apis) with SIP Connected Audio Plan.<br><br>\n**Scope:** `sip_trunk:master`\n\n\n"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `204` **No Content** <br>\nNumber deleted.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/internal_numbers/:numberId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"internal_numbers",
																":numberId"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique Identifier of the account. To delete an internal number from a sub account, provide the account ID of the sub account in the `accountId` path parameter. To delete an internal number from a master account, provide `me` as the value of the `accountId` path parameter."
																},
																{
																	"key": "numberId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the phone number. This value can be retrieved by calling the List Internal Numbers API."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `300`<br> \n* Your account does not have the permission to make updates on this account. Only a master account can perform this action on a sub account.\n* Request failed because this account i",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/internal_numbers/:numberId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"internal_numbers",
																":numberId"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique Identifier of the account. To delete an internal number from a sub account, provide the account ID of the sub account in the `accountId` path parameter. To delete an internal number from a master account, provide `me` as the value of the `accountId` path parameter."
																},
																{
																	"key": "numberId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the phone number. This value can be retrieved by calling the List Internal Numbers API."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `2001`<br> Account does not exist: {0}.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/accounts/:accountId/sip_trunk/internal_numbers/:numberId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"accounts",
																":accountId",
																"sip_trunk",
																"internal_numbers",
																":numberId"
															],
															"variable": [
																{
																	"key": "accountId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique Identifier of the account. To delete an internal number from a sub account, provide the account ID of the sub account in the `accountId` path parameter. To delete an internal number from a master account, provide `me` as the value of the `accountId` path parameter."
																},
																{
																	"key": "numberId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the phone number. This value can be retrieved by calling the List Internal Numbers API."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Get sub account details",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/accounts/:accountId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":accountId"
									],
									"variable": [
										{
											"key": "accountId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The account's ID."
										}
									]
								},
								"description": "Use this API to get information about Master account's sub account. \n\n Your account must be a Master account in order to return sub account information. Zoom allows only approved partners to use [Master account APIs](https://marketplace.zoom.us/docs/api-reference/master-account-apis) and create sub accounts. For information about partner programs, email the partners team at [partner-success@zoom.us](mailto:partner-success@zoom.us). \n\n**Scopes:** `account:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n**Prerequisites:** \n* A Pro or a higher paid account with the Master account option enabled."
							},
							"response": [
								{
									"name": "**HTTP Status Code**: `200`<br>\nAccount object returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The account's ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"string\",\n \"owner_id\": \"string\",\n \"owner_email\": \"string\",\n \"created_at\": \"string [date-time]\",\n \"options\": {\n  \"share_rc\": \"boolean\",\n  \"room_connectors\": \"string\",\n  \"share_mc\": \"boolean\",\n  \"meeting_connectors\": \"string\",\n  \"pay_mode\": \"string\"\n }\n}"
								},
								{
									"name": "**HTTP Status Code**: `404`<br>\n**Error Code:** `2001`<br> Account does not exist: $subAccountId.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The account's ID."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Disassociate a sub account",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/accounts/:accountId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":accountId"
									],
									"variable": [
										{
											"key": "accountId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The account's ID."
										}
									]
								},
								"description": "Disassociate a sub account from its master account. This will leave the sub account intact but it will no longer be associated with the master account.<br>  \n\n**Prerequisites:**\n* Pro or a higher paid account with master account option enabled. <br>\n* The account making this API request must be a [master account](https://marketplace.zoom.us/docs/api-reference/master-account-apis).<br><br>\n\n\n**Scope**: `account:write:admin`<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n\n\n "
							},
							"response": [
								{
									"name": "**HTTP Status Code**: `204`<br>Account deleted.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The account's ID."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code**: `404` <br> \n**Error Code:** `2000`<br> You cannot disassociate a paid account. <br>\n**Error Code:** `2001`<br> Account does not exist: $subAccountId.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The account's ID."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update options",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "share_rc",
											"value": "false",
											"description": "Enable/disable the option for a sub account to use shared [Virtual Room Connector(s)](https://support.zoom.us/hc/en-us/articles/202134758-Getting-Started-With-Virtual-Room-Connector) that are set up by the master account. Virtual Room Connectors can only be used by On-prem users.",
											"type": "text"
										},
										{
											"key": "room_connector_list",
											"value": "[\"non quis ex\",\"sed reprehenderit ut\"]",
											"description": "Specify the IP addresses of the Room Connectors that you would like to share with the sub account. Multiple values can be separated by comma. If no value is provided in this field, all the Room Connectors of a master account will be shared with the sub account.\n\n\n**Note:** This option can only be used if the value of `share_rc` is set to `true`.",
											"type": "text"
										},
										{
											"key": "share_mc",
											"value": "false",
											"description": "Enable/disable the option for a sub account to use shared [Meeting Connector(s)](https://support.zoom.us/hc/en-us/articles/201363093-Getting-Started-with-the-Meeting-Connector) that are set up by the master account. Meeting Connectors can only be used by On-prem users.",
											"type": "text"
										},
										{
											"key": "meeting_connector_list",
											"value": "[\"elit tempor in do\",\"cillum commodo aliquip adipisicing\"]",
											"description": "Specify the IP addresses of the Meeting Connectors that you would like to share with the sub account. Multiple values can be separated by comma. If no value is provided in this field, all the Meeting Connectors of a master account will be shared with the sub account.\n\n\n**Note:** This option can only be used if the value of `share_mc` is set to `true`.",
											"type": "text"
										},
										{
											"key": "pay_mode",
											"value": "master",
											"description": "Payee:<br>`master` - master account holder pays.<br>`sub` - Sub account holder pays. (This can only be one of master,sub)",
											"type": "text"
										},
										{
											"key": "billing_auto_renew",
											"value": "true",
											"description": "Toggle whether automatic billing renewal is on or off.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/accounts/:accountId/options",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":accountId",
										"options"
									],
									"variable": [
										{
											"key": "accountId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The account's ID."
										}
									]
								},
								"description": "Update a sub account's options under the master account.<br> <aside>Your account must be a master account in order to update the options for sub accounts. Zoom only assigns this privilege to trusted partners. </aside>\n\n**Prerequisites:**\n* Pro or a higher paid account with master account option enabled.\n* The account making this API request must be a [master account](https://marketplace.zoom.us/docs/api-reference/master-account-apis).<br><br>\n\n**Scope**: `account:write:admin`<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n\n\n "
							},
							"response": [
								{
									"name": "**Error Code:** `200`<br>\nThe pay mode cannot be updated for a sub account which already has an existing plan.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "share_rc",
													"value": "false",
													"description": "Enable/disable the option for a sub account to use shared [Virtual Room Connector(s)](https://support.zoom.us/hc/en-us/articles/202134758-Getting-Started-With-Virtual-Room-Connector) that are set up by the master account. Virtual Room Connectors can only be used by On-prem users.",
													"type": "text"
												},
												{
													"key": "room_connector_list",
													"value": "[\"pariatur ut dolore est\",\"consectetur laborum\"]",
													"description": "Specify the IP addresses of the Room Connectors that you would like to share with the sub account. Multiple values can be separated by comma. If no value is provided in this field, all the Room Connectors of a master account will be shared with the sub account.\n\n\n**Note:** This option can only be used if the value of `share_rc` is set to `true`.",
													"type": "text"
												},
												{
													"key": "share_mc",
													"value": "false",
													"description": "Enable/disable the option for a sub account to use shared [Meeting Connector(s)](https://support.zoom.us/hc/en-us/articles/201363093-Getting-Started-with-the-Meeting-Connector) that are set up by the master account. Meeting Connectors can only be used by On-prem users.",
													"type": "text"
												},
												{
													"key": "meeting_connector_list",
													"value": "[\"officia laboris sit\",\"incididunt est anim fugiat\"]",
													"description": "Specify the IP addresses of the Meeting Connectors that you would like to share with the sub account. Multiple values can be separated by comma. If no value is provided in this field, all the Meeting Connectors of a master account will be shared with the sub account.\n\n\n**Note:** This option can only be used if the value of `share_mc` is set to `true`.",
													"type": "text"
												},
												{
													"key": "pay_mode",
													"value": "master",
													"description": "Payee:<br>`master` - master account holder pays.<br>`sub` - Sub account holder pays. (This can only be one of master,sub)",
													"type": "text"
												},
												{
													"key": "billing_auto_renew",
													"value": "false",
													"description": "Toggle whether automatic billing renewal is on or off.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/options",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"options"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The account's ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `204`<br>\nAccount options updated.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "share_rc",
													"value": "false",
													"description": "Enable/disable the option for a sub account to use shared [Virtual Room Connector(s)](https://support.zoom.us/hc/en-us/articles/202134758-Getting-Started-With-Virtual-Room-Connector) that are set up by the master account. Virtual Room Connectors can only be used by On-prem users.",
													"type": "text"
												},
												{
													"key": "room_connector_list",
													"value": "[\"pariatur ut dolore est\",\"consectetur laborum\"]",
													"description": "Specify the IP addresses of the Room Connectors that you would like to share with the sub account. Multiple values can be separated by comma. If no value is provided in this field, all the Room Connectors of a master account will be shared with the sub account.\n\n\n**Note:** This option can only be used if the value of `share_rc` is set to `true`.",
													"type": "text"
												},
												{
													"key": "share_mc",
													"value": "false",
													"description": "Enable/disable the option for a sub account to use shared [Meeting Connector(s)](https://support.zoom.us/hc/en-us/articles/201363093-Getting-Started-with-the-Meeting-Connector) that are set up by the master account. Meeting Connectors can only be used by On-prem users.",
													"type": "text"
												},
												{
													"key": "meeting_connector_list",
													"value": "[\"officia laboris sit\",\"incididunt est anim fugiat\"]",
													"description": "Specify the IP addresses of the Meeting Connectors that you would like to share with the sub account. Multiple values can be separated by comma. If no value is provided in this field, all the Meeting Connectors of a master account will be shared with the sub account.\n\n\n**Note:** This option can only be used if the value of `share_mc` is set to `true`.",
													"type": "text"
												},
												{
													"key": "pay_mode",
													"value": "master",
													"description": "Payee:<br>`master` - master account holder pays.<br>`sub` - Sub account holder pays. (This can only be one of master,sub)",
													"type": "text"
												},
												{
													"key": "billing_auto_renew",
													"value": "false",
													"description": "Toggle whether automatic billing renewal is on or off.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/options",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"options"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The account's ID."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"share_rc\": \"boolean\",\n \"room_connectors\": \"string\",\n \"share_mc\": \"boolean\",\n \"meeting_connectors\": \"string\",\n \"pay_mode\": \"string\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `2100`<br> The collection method cannot be changed after the purchase is complete.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "share_rc",
													"value": "false",
													"description": "Enable/disable the option for a sub account to use shared [Virtual Room Connector(s)](https://support.zoom.us/hc/en-us/articles/202134758-Getting-Started-With-Virtual-Room-Connector) that are set up by the master account. Virtual Room Connectors can only be used by On-prem users.",
													"type": "text"
												},
												{
													"key": "room_connector_list",
													"value": "[\"pariatur ut dolore est\",\"consectetur laborum\"]",
													"description": "Specify the IP addresses of the Room Connectors that you would like to share with the sub account. Multiple values can be separated by comma. If no value is provided in this field, all the Room Connectors of a master account will be shared with the sub account.\n\n\n**Note:** This option can only be used if the value of `share_rc` is set to `true`.",
													"type": "text"
												},
												{
													"key": "share_mc",
													"value": "false",
													"description": "Enable/disable the option for a sub account to use shared [Meeting Connector(s)](https://support.zoom.us/hc/en-us/articles/201363093-Getting-Started-with-the-Meeting-Connector) that are set up by the master account. Meeting Connectors can only be used by On-prem users.",
													"type": "text"
												},
												{
													"key": "meeting_connector_list",
													"value": "[\"officia laboris sit\",\"incididunt est anim fugiat\"]",
													"description": "Specify the IP addresses of the Meeting Connectors that you would like to share with the sub account. Multiple values can be separated by comma. If no value is provided in this field, all the Meeting Connectors of a master account will be shared with the sub account.\n\n\n**Note:** This option can only be used if the value of `share_mc` is set to `true`.",
													"type": "text"
												},
												{
													"key": "pay_mode",
													"value": "master",
													"description": "Payee:<br>`master` - master account holder pays.<br>`sub` - Sub account holder pays. (This can only be one of master,sub)",
													"type": "text"
												},
												{
													"key": "billing_auto_renew",
													"value": "false",
													"description": "Toggle whether automatic billing renewal is on or off.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/options",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"options"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The account's ID."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `2001`<br>\nAccount does not exist: $subAccountId.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "share_rc",
													"value": "false",
													"description": "Enable/disable the option for a sub account to use shared [Virtual Room Connector(s)](https://support.zoom.us/hc/en-us/articles/202134758-Getting-Started-With-Virtual-Room-Connector) that are set up by the master account. Virtual Room Connectors can only be used by On-prem users.",
													"type": "text"
												},
												{
													"key": "room_connector_list",
													"value": "[\"pariatur ut dolore est\",\"consectetur laborum\"]",
													"description": "Specify the IP addresses of the Room Connectors that you would like to share with the sub account. Multiple values can be separated by comma. If no value is provided in this field, all the Room Connectors of a master account will be shared with the sub account.\n\n\n**Note:** This option can only be used if the value of `share_rc` is set to `true`.",
													"type": "text"
												},
												{
													"key": "share_mc",
													"value": "false",
													"description": "Enable/disable the option for a sub account to use shared [Meeting Connector(s)](https://support.zoom.us/hc/en-us/articles/201363093-Getting-Started-with-the-Meeting-Connector) that are set up by the master account. Meeting Connectors can only be used by On-prem users.",
													"type": "text"
												},
												{
													"key": "meeting_connector_list",
													"value": "[\"officia laboris sit\",\"incididunt est anim fugiat\"]",
													"description": "Specify the IP addresses of the Meeting Connectors that you would like to share with the sub account. Multiple values can be separated by comma. If no value is provided in this field, all the Meeting Connectors of a master account will be shared with the sub account.\n\n\n**Note:** This option can only be used if the value of `share_mc` is set to `true`.",
													"type": "text"
												},
												{
													"key": "pay_mode",
													"value": "master",
													"description": "Payee:<br>`master` - master account holder pays.<br>`sub` - Sub account holder pays. (This can only be one of master,sub)",
													"type": "text"
												},
												{
													"key": "billing_auto_renew",
													"value": "false",
													"description": "Toggle whether automatic billing renewal is on or off.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/options",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"options"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The account's ID."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get managed domains",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/accounts/:accountId/managed_domains",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":accountId",
										"managed_domains"
									],
									"variable": [
										{
											"key": "accountId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Unique Identifier of the account. To retrieve locked settings of the master account or a regular account, provide \"me\" as the value of this field. <br> To retrieve locked settings of a sub account, provide the Account ID of the sub account in this field."
										}
									]
								},
								"description": "Get a sub account's [managed domains](https://support.zoom.us/hc/en-us/articles/203395207-What-is-Managed-Domain-).<br><br>\n\n**Note:** This API can be used by Zoom Accounts that are on a Pro or a higher plan as well accounts that have master and sub accounts options enabled. <br><br>\nTo get managed domains of the master account, provide `me` as the value for accountId in the path parameter. Provide the sub account's Account ID as the value of accountId path parameter to get managed domains of the sub account.<br><br>\n**Prerequisites:**<br>\n* Pro or a higher paid account with master account option enabled. <br>\n\n**Scope:** `account:read:admin`<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n\n\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nAccount managed domains returned.\n**Error Code:** `200`<br>\nOnly available for paid account.\n\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/managed_domains",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"managed_domains"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of the account. To retrieve locked settings of the master account or a regular account, provide \"me\" as the value of this field. <br> To retrieve locked settings of a sub account, provide the Account ID of the sub account in this field."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"total_records\": -80322080,\n \"domains\": [\n  {\n   \"domain\": \"in magna et \",\n   \"status\": \"dolor amet incididunt tempor\"\n  },\n  {\n   \"domain\": \"eu\",\n   \"status\": \"ullamco irure in\"\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\n**Error Code**: `2001`<br>\nAccount does not exist: $subAccountId.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/managed_domains",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"managed_domains"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique Identifier of the account. To retrieve locked settings of the master account or a regular account, provide \"me\" as the value of this field. <br> To retrieve locked settings of a sub account, provide the Account ID of the sub account in this field."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get trusted domains",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/accounts/:accountId/trusted_domains",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":accountId",
										"trusted_domains"
									],
									"variable": [
										{
											"key": "accountId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The account's ID."
										}
									]
								},
								"description": "Get trusted domains of a sub account. To get the trusted domains of a master account, use `me` as the value for the `accountId` path parameter.\n\n**Prerequisites:**<br>\n* The sub account must be a paid account.<br>\n**Scope:** `account:read:admin`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nAccount trusted domains returned<br>\n**Error Code:** `2001`<br> Account does not exist: $subAccountId.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/trusted_domains",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"trusted_domains"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The account's ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"trusted_domains\": [\n  \"consequat aute magna laboris do\",\n  \"veniam\"\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `2001`<br> Account does not exist: $subAccountId.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/trusted_domains",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"trusted_domains"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The account's ID."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update the account owner",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "7yB4YNdn82b6@qsIJjgaSYnI.dtg",
											"description": "(Required) The email address of the account's new owner.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/accounts/:accountId/owner",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":accountId",
										"owner"
									],
									"variable": [
										{
											"key": "accountId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The account's account ID."
										}
									]
								},
								"description": "Use this API to change an account's owner.\n\nAn account's current owner can [change the account's owner](https://support.zoom.us/hc/en-us/articles/115005686983-Change-Account-Owner) to another user on the same account.\n\n**Scopes:** `account:write:admin` or `account:master`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`\n\n**Prerequisites:** \n* An account owner or admin permissions of an account \n* The account making this API request must be on a Pro or a higher account plan with [Master account](https://marketplace.zoom.us/docs/api-reference/master-account-apis) privileges"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204`<br>\nAccount owner updated.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "7yB4YNdn82b6@qsIJjgaSYnI.dtg",
													"description": "(Required) The email address of the account's new owner.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/owner",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"owner"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The account's account ID."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\n\n**Error Code:** `200`<br>\nUser is not an admin or is an API user or doesn’t belong to this account: {accountId}.<br>\nCannot make a user outside of your account an owner.<br>\nCannot update the role of an account owner.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "7yB4YNdn82b6@qsIJjgaSYnI.dtg",
													"description": "(Required) The email address of the account's new owner.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/owner",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"owner"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The account's account ID."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `2001`<br>\nAccount does not exist: $subAccountId.<br>\n**Error Code:** `3201`<br>\nCannot find a billing account for this: $accountId.<br>\n**Error Code:** `3211`<br>\nCannot find a billing contact for this: $ac",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "7yB4YNdn82b6@qsIJjgaSYnI.dtg",
													"description": "(Required) The email address of the account's new owner.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/owner",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"owner"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The account's account ID."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Switch a user's account",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "account_id",
											"value": "aliquip commodo in amet",
											"description": "(Required) The Account ID of the account to which you would like move the user to.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/accounts/:accountId/users/:userId/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":accountId",
										"users",
										":userId",
										"account"
									],
									"variable": [
										{
											"key": "accountId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) "
										},
										{
											"key": "userId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) "
										}
									]
								},
								"description": "Disassociate a user from one Account and move the user to another Account under the same master account. \n\nWith this API, a user under a master account or a sub account can be moved to another sub account within the same master account. To move a user from a master account to a sub account, use `me` as the value for `accountId`. In this scenario, \"me\" refers to the Account ID of the master account. \n\nTo move a user from one sub account to another sub account, provide the sub account's Account ID as the value for `accountId`. \n\n**Prerequisites**:\n* The account should have Pro or a higher plan with master account option enabled.\n* The user whose account needs to be switched should not be an admin or an owner of that account.\n* The user should not have the same [managed domain](https://support.zoom.us/hc/en-us/articles/203395207-What-is-Managed-Domain-) as the account owner.\n\n**Scope:** `user:master`<br> \n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code**: `204`<br>\nUser's account switched successfully.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "account_id",
													"value": "aliquip commodo in amet",
													"description": "(Required) The Account ID of the account to which you would like move the user to.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/users/:userId/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"users",
												":userId",
												"account"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) "
												},
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "**HTTP Status Code**: `400` **Bad Request**<br>\n**Error Code:** `1117`<br> Can not disassociate Admin user",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "account_id",
													"value": "aliquip commodo in amet",
													"description": "(Required) The Account ID of the account to which you would like move the user to.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/users/:userId/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"users",
												":userId",
												"account"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) "
												},
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code**: `404` **Not Found**<br>\n\n**Error Code:** `1001`<br>\nUser {userId} does not exist or does not belong to this account.<br><br>\n\n**Error Code:** `1010`<br>\nUser not found on this account.<br>\n\n**Error Code:** `1120`<br> Invite not exist",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "account_id",
													"value": "aliquip commodo in amet",
													"description": "(Required) The Account ID of the account to which you would like move the user to.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/users/:userId/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"users",
												":userId",
												"account"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) "
												},
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List recordings of an account",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/accounts/:accountId/recordings?page_size=30&next_page_token=culpa velit reprehenderit&from=1959-05-01T01:25:34.963Z&to=1959-05-01T01:25:34.963Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":accountId",
										"recordings"
									],
									"query": [
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										},
										{
											"key": "from",
											"value": "1959-05-01T01:25:34.963Z",
											"description": "The start date in UTC for the monthly range for which you would like to retrieve recordings. The maximum range can be a month. If no value is provided for this field, the default will be current date. For example, if you make the API request on June 30, 2020, without providing the “from” and “to” parameters, by default the value of 'from' field will be “2020-06-30” and the value of the 'to' field will be “2020-07-01”."
										},
										{
											"key": "to",
											"value": "1959-05-01T01:25:34.963Z",
											"description": "The end date for the monthly range for which you would like to retrieve recordings. The maximum range can be a month."
										}
									],
									"variable": [
										{
											"key": "accountId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Unique identifier of the account."
										}
									]
								},
								"description": "List [Cloud Recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) available on an Account.\n\n> To access a password protected cloud recording, add an \"access_token\" parameter to the download URL and provide [JWT](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-jwt-app) as the value of the \"access_token\".\n<br>\n**Prerequisites**:<br>\n* A Pro or a higher paid plan with Cloud Recording option enabled.<br>\n**Scopes**: `recording:read:admin` or `account:read:admin`\n\nIf the scope `recording:read:admin` is used, the Account ID of the Account must be provided in the `accountId` path parameter to list recordings that belong to the Account. This scope only works for sub accounts. \n\nTo list recordings of a master account, the scope must be `account:read:admin` and the value of `accountId` should be `me`.<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n"
							},
							"response": [
								{
									"name": "**Response Error Code:** `200` <br>\nOnly available for Paid account.\n\n**HTTP Status Code:** `200` <br>\nRecording(s) listed successfully.\n\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/recordings?page_size=30&next_page_token=culpa velit reprehenderit&from=1959-05-01T01:25:34.963Z&to=1959-05-01T01:25:34.963Z",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"recordings"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "from",
													"value": "1959-05-01T01:25:34.963Z"
												},
												{
													"key": "to",
													"value": "1959-05-01T01:25:34.963Z"
												}
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique identifier of the account."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"from\": \"2019-08-19\",\n \"to\": \"2019-08-20\",\n \"page_size\": 30,\n \"next_page_token\": \"\",\n \"meetings\": [\n  {\n   \"uuid\": \"i9zq0MR8S/abcdef==\",\n   \"id\": 101010101,\n   \"account_id\": \"lq8QK_AAAAAAAAA\",\n   \"host_id\": \"uLoABCDEF_qQGIsQ\",\n   \"topic\": \"MyTestMeeting\",\n   \"type\": 2,\n   \"start_time\": \"2019-08-20T00:52:13Z\",\n   \"timezone\": \"America/Los_Angeles\",\n   \"host_email\": \"example@example.com\",\n   \"duration\": 2,\n   \"total_size\": 128682,\n   \"recording_count\": 3,\n   \"share_url\": \"https://zoom.us/recording/share/SBDDBJKsbjdAAAAA\",\n   \"recording_files\": [\n    {\n     \"id\": \"2f6bbbb-0fd7-4691-af13-aaaaaa\",\n     \"meeting_id\": \"i9zq0MR8S/abcdef==\",\n     \"recording_start\": \"2019-08-20T00:51:54Z\",\n     \"recording_end\": \"2019-08-20T00:53:16Z\",\n     \"file_type\": \"M4A\",\n     \"file_size\": 26966,\n     \"play_url\": \"https://zoomdev.us/recording/play/abcdEFgkkkkk\",\n     \"download_url\": \"https://zoom.us/recording/download/abcdEFgkkkkk\",\n     \"status\": \"completed\",\n     \"recording_type\": \"audio_only\"\n    },\n    {\n     \"id\": \"39362666-0fd7-4691-af13-aaaaaa\",\n     \"meeting_id\": \"i9zq0MR8S/abcdef==\",\n     \"recording_start\": \"2019-08-20T00:51:54Z\",\n     \"recording_end\": \"2019-08-20T00:53:16Z\",\n     \"file_type\": \"CHAT\",\n     \"file_size\": 37,\n     \"play_url\": \"https://zoom.us/recording/play/UpBEo44Q31BVEXrGeCdbT4-MOAAAAAAA\",\n     \"download_url\": \"https://zoom.us/recording/download/JolGd4kUpBEo44Q31BVEXrGeCdbT4-MOAAAAA\",\n     \"status\": \"completed\",\n     \"recording_type\": \"chat_file\"\n    },\n    {\n     \"id\": \"K809nk-014djkfsgf-00a98c13ec783\",\n     \"meeting_id\": \"i9zq0MR8S/abcdef==\",\n     \"recording_start\": \"2019-08-20T00:51:54Z\",\n     \"recording_end\": \"2019-08-20T00:53:16Z\",\n     \"file_type\": \"MP4\",\n     \"file_size\": 101679,\n     \"play_url\": \"https://zoom.us/recording/play/5Y2YnU-56ZY4lEA5AAAABBBBBCCCCCDDDDD\",\n     \"download_url\": \"https://zoom.us/recording/download/5Y2YnU-56ZY4lEA5AAAABBBBBCCCCCDDDDD\",\n     \"status\": \"completed\",\n     \"recording_type\": \"shared_screen_with_speaker_view\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` <br>\nAccount not found.\n\n**Response Error Code:** `2001`<br>\nThis account does not exist or does not belong to you: {accountId}.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/accounts/:accountId/recordings?page_size=30&next_page_token=culpa velit reprehenderit&from=1959-05-01T01:25:34.963Z&to=1959-05-01T01:25:34.963Z",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"accounts",
												":accountId",
												"recordings"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "from",
													"value": "1959-05-01T01:25:34.963Z"
												},
												{
													"key": "to",
													"value": "1959-05-01T01:25:34.963Z"
												}
											],
											"variable": [
												{
													"key": "accountId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique identifier of the account."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "List sub accounts",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/accounts?page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"accounts"
							],
							"query": [
								{
									"key": "page_size",
									"value": "30",
									"description": "The number of records returned within a single API call."
								},
								{
									"key": "page_number",
									"value": "1",
									"description": "\n**Deprecated** - This field has been deprecated and we will stop supporting it completely in a future release. Please use \"next_page_token\" for pagination instead of this field.\n\nThe page number of the current page in the returned records."
								},
								{
									"key": "next_page_token",
									"value": "culpa velit reprehenderit",
									"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
								}
							]
						},
						"description": "List all the sub accounts that have been created by a master account.<br><br>Zoom allows only [approved partners](https://marketplace.zoom.us/docs/api-reference/master-account-apis) to use master APIs and manage sub accounts. Email the partner programs team at **partner-success@zoom.us** for more details.\n\n<br>**Prerequisites:**<br>\n* Pro or a higher paid account with master account option enabled. <br>\n\n**Scope**: `account:read:admin`\n<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n\n"
					},
					"response": [
						{
							"name": "Account list returned.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/accounts?page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts"
									],
									"query": [
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "page_number",
											"value": "1"
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"page_count\": \"integer\",\n \"page_number\": \"integer\",\n \"page_size\": \"integer\",\n \"total_records\": \"integer\",\n \"accounts\": [\n  {\n   \"id\": \"string [uuid]\",\n   \"account_name\": \"string\",\n   \"owner_email\": \"string\",\n   \"account_type\": \"string\",\n   \"seats\": \"integer\",\n   \"subscription_start_time\": \"string [date-time]\",\n   \"subscription_end_time\": \"string [date-time]\",\n   \"created_at\": \"string [date-time]\"\n  }\n ]\n}"
						}
					]
				},
				{
					"name": "Create a sub account",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "first_name",
									"value": "d",
									"description": "(Required) User's first name.",
									"type": "text"
								},
								{
									"key": "last_name",
									"value": "minim amet labor",
									"description": "(Required) User's last name.",
									"type": "text"
								},
								{
									"key": "email",
									"value": "fugiat laborum aliqua",
									"description": "(Required) User's email address.",
									"type": "text"
								},
								{
									"key": "password",
									"value": "ea dolore",
									"description": "(Required) User's password.\n\n**Note:** If the account owner or admin has enabled [enhanced password requirements](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_fa9186e4-6818-4f7a-915c-2e25c19f0acd), the value provided in this field must meet those requirements. These requirements can be retrieved by calling the [Get Account Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) and referring to the `password_requirement` field present in the `security` object.",
									"type": "text"
								},
								{
									"key": "options",
									"value": "{\"share_rc\":false,\"room_connector_list\":[\"incididunt sed veniam consequat\",\"cillum aliquip Duis ad\"],\"share_mc\":false,\"meeting_connector_list\":[\"non qui id ea\",\"lab\"],\"pay_mode\":\"master\",\"billing_auto_renew\":false}",
									"description": "Account options object.",
									"type": "text"
								},
								{
									"key": "account_name",
									"value": "laborum consectetur dolore",
									"description": "Name of the account. If you do not provide a value for this field, by default, the value will be set as a concatenation of \"first_name\" and \"last_name\". ",
									"type": "text"
								},
								{
									"key": "sub_reseller_id",
									"value": "sit",
									"description": "The sub-reseller's ID.\n\nIf you do not provide this field in the payload, a new subaccount will be created for the requested account.",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/accounts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"accounts"
							]
						},
						"description": "Create a sub account under a master account. Your account must be a master account in order to create sub accounts. \n<br><br>Zoom allows only [approved partners](https://marketplace.zoom.us/docs/api-reference/master-account-apis) to use master APIs and manage sub accounts. Email the partner programs team at partner-success@zoom.us. for more details. Please note that the created account user will receive a confirmation email.<br><br>\n<br>\n**Prerequisites:**<br>\n* Pro or a higher paid account with master account option enabled. <br>\n\n**Scope**: `account:write:admin`<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n\n\n "
					},
					"response": [
						{
							"name": "Account created.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "first_name",
											"value": "consequat",
											"description": "(Required) User's first name.",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "non deserunt tempor quis",
											"description": "(Required) User's last name.",
											"type": "text"
										},
										{
											"key": "email",
											"value": "Duis incididunt",
											"description": "(Required) User's email address.",
											"type": "text"
										},
										{
											"key": "password",
											"value": "nulla proident dolore",
											"description": "(Required) User's password.\n\n**Note:** If the account owner or admin has enabled [enhanced password requirements](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_fa9186e4-6818-4f7a-915c-2e25c19f0acd), the value provided in this field must meet those requirements. These requirements can be retrieved by calling the [Get Account Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) and referring to the `password_requirement` field present in the `security` object.",
											"type": "text"
										},
										{
											"key": "options",
											"value": "{\"share_rc\":false,\"room_connector_list\":[\"mollit pariatur\",\"mi\"],\"share_mc\":false,\"meeting_connector_list\":[\"eiusmod sunt\",\"cupidatat mollit esse\"],\"pay_mode\":\"master\",\"billing_auto_renew\":true}",
											"description": "Account options object.",
											"type": "text"
										},
										{
											"key": "account_name",
											"value": "ut sit i",
											"description": "Name of the account. If you do not provide a value for this field, by default, the value will be set as a concatenation of \"first_name\" and \"last_name\". ",
											"type": "text"
										},
										{
											"key": "sub_reseller_id",
											"value": "enim culpa Excepteur in",
											"description": "The sub-reseller's ID.\n\nIf you do not provide this field in the payload, a new subaccount will be created for the requested account.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/accounts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Location",
									"value": "culpa velit reprehenderit",
									"description": "Location of the created account."
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"string\",\n \"owner_id\": \"string\",\n \"owner_email\": \"string\",\n \"created_at\": \"string\"\n}"
						},
						{
							"name": "**HTTP Status Code:** `400`<br>\n**Error Code:**`300`<br> Your request could not be completed because the name contains an invalid word: {name}<br> Your request was not accepted because \"{field}\" contains special character(s).\n**Error Code:** `1107`<br>\nEm",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "first_name",
											"value": "consequat",
											"description": "(Required) User's first name.",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "non deserunt tempor quis",
											"description": "(Required) User's last name.",
											"type": "text"
										},
										{
											"key": "email",
											"value": "Duis incididunt",
											"description": "(Required) User's email address.",
											"type": "text"
										},
										{
											"key": "password",
											"value": "nulla proident dolore",
											"description": "(Required) User's password.\n\n**Note:** If the account owner or admin has enabled [enhanced password requirements](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_fa9186e4-6818-4f7a-915c-2e25c19f0acd), the value provided in this field must meet those requirements. These requirements can be retrieved by calling the [Get Account Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) and referring to the `password_requirement` field present in the `security` object.",
											"type": "text"
										},
										{
											"key": "options",
											"value": "{\"share_rc\":false,\"room_connector_list\":[\"mollit pariatur\",\"mi\"],\"share_mc\":false,\"meeting_connector_list\":[\"eiusmod sunt\",\"cupidatat mollit esse\"],\"pay_mode\":\"master\",\"billing_auto_renew\":true}",
											"description": "Account options object.",
											"type": "text"
										},
										{
											"key": "account_name",
											"value": "ut sit i",
											"description": "Name of the account. If you do not provide a value for this field, by default, the value will be set as a concatenation of \"first_name\" and \"last_name\". ",
											"type": "text"
										},
										{
											"key": "sub_reseller_id",
											"value": "enim culpa Excepteur in",
											"description": "The sub-reseller's ID.\n\nIf you do not provide this field in the payload, a new subaccount will be created for the requested account.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/accounts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `409`<br>\n**Error Code:** `1005`<br>\nEmail $email has already been used.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "first_name",
											"value": "consequat",
											"description": "(Required) User's first name.",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "non deserunt tempor quis",
											"description": "(Required) User's last name.",
											"type": "text"
										},
										{
											"key": "email",
											"value": "Duis incididunt",
											"description": "(Required) User's email address.",
											"type": "text"
										},
										{
											"key": "password",
											"value": "nulla proident dolore",
											"description": "(Required) User's password.\n\n**Note:** If the account owner or admin has enabled [enhanced password requirements](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_fa9186e4-6818-4f7a-915c-2e25c19f0acd), the value provided in this field must meet those requirements. These requirements can be retrieved by calling the [Get Account Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) and referring to the `password_requirement` field present in the `security` object.",
											"type": "text"
										},
										{
											"key": "options",
											"value": "{\"share_rc\":false,\"room_connector_list\":[\"mollit pariatur\",\"mi\"],\"share_mc\":false,\"meeting_connector_list\":[\"eiusmod sunt\",\"cupidatat mollit esse\"],\"pay_mode\":\"master\",\"billing_auto_renew\":true}",
											"description": "Account options object.",
											"type": "text"
										},
										{
											"key": "account_name",
											"value": "ut sit i",
											"description": "Name of the account. If you do not provide a value for this field, by default, the value will be set as a concatenation of \"first_name\" and \"last_name\". ",
											"type": "text"
										},
										{
											"key": "sub_reseller_id",
											"value": "enim culpa Excepteur in",
											"description": "The sub-reseller's ID.\n\nIf you do not provide this field in the payload, a new subaccount will be created for the requested account.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/accounts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "groups",
			"item": [
				{
					"name": "{group Id}",
					"item": [
						{
							"name": "members",
							"item": [
								{
									"name": "{member Id}",
									"item": [
										{
											"name": "Delete a group member",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/members/:memberId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"members",
														":memberId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														},
														{
															"key": "memberId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The member ID."
														}
													]
												},
												"description": "Use this API to remove a user from a [group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-) in an account.\n\n**Scopes:** `group:write:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* A Pro, Business, or Education account"
											},
											"response": [
												{
													"name": "Only available for paid account,{accountId}.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/members/:memberId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"members",
																":memberId"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
																},
																{
																	"key": "memberId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The member ID."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Group member deleted.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/members/:memberId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"members",
																":memberId"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
																},
																{
																	"key": "memberId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The member ID."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**Status Code:** `400`<br>\nBad request.<br>\n**Error Code:** `1010`<br>\nGroup does not belong to this account:{accountId}.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/members/:memberId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"members",
																":memberId"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
																},
																{
																	"key": "memberId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The member ID."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**Status Code:** `404`<br>\nNot found.<br>\n**Error Code:** `4130`<br>\nA group with this {groupId} does not exist.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/members/:memberId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"members",
																":memberId"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
																},
																{
																	"key": "memberId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The member ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Update a group member",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "action",
															"value": "set_primary",
															"description": "(Required) The action to perform: \n* `move` — Remove the group member from one group and move them to a different group. \n* `set_primary` — Set the user's primary group. (This can only be one of move,set_primary)",
															"type": "text"
														},
														{
															"key": "target_group_id",
															"value": "nulla fugiat",
															"description": "The target group's ID. To get this value, use the [List Groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups) API. \n* To set a user's primary group, use the designated primary group's `groupId` value. \n* To move a group member from one group to another, use the `groupId` of the designated group.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/members/:memberId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"members",
														":memberId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group's unique ID. To get this value, use the [List Groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups) API.\n* To set a user's primary group, use the `target_group_id` value for this parameter's value. \n* To move a group member from one group to another, use the `groupId` of the designated group."
														},
														{
															"key": "memberId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group member's unique ID. To get this value, use the [List Group Members](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groupmembers) API."
														}
													]
												},
												"description": "Use this API to perform either of the following tasks: \n* Remove a group member from one group and move them to a different group. \n* Set a user's primary group. By default, the primary group is the first group that user is added to.\n\nIf a user is a member of multiple groups, you can [assign the user a primary group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-#h_d07c7dcd-4fd8-485a-b5fe-a322e8d21c09). The user will use the primary group’s settings by default. However, if the user is a member of a group with locked settings, those group settings will remain locked to the user.\n\n**Scopes:** `group:write:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n**Prerequisites:** \n* A Pro or higher account"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `204` **No Content**<br>\nGroup member updated.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "action",
																	"value": "set_primary",
																	"description": "(Required) The action to perform: \n* `move` — Remove the group member from one group and move them to a different group. \n* `set_primary` — Set the user's primary group. (This can only be one of move,set_primary)",
																	"type": "text"
																},
																{
																	"key": "target_group_id",
																	"value": "nulla fugiat",
																	"description": "The target group's ID. To get this value, use the [List Groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups) API. \n* To set a user's primary group, use the designated primary group's `groupId` value. \n* To move a group member from one group to another, use the `groupId` of the designated group.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/members/:memberId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"members",
																":memberId"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The group's unique ID. To get this value, use the [List Groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups) API.\n* To set a user's primary group, use the `target_group_id` value for this parameter's value. \n* To move a group member from one group to another, use the `groupId` of the designated group."
																},
																{
																	"key": "memberId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The group member's unique ID. To get this value, use the [List Group Members](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groupmembers) API."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `200`<br>\n Only available for Paid account, {accountId}.<br><br>\n **Error Code:** `300`<br>\n The target_group_id can not be empty.<br><br>\n **Error Code:** `1010`<br>\n Group does not belong t",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "action",
																	"value": "set_primary",
																	"description": "(Required) The action to perform: \n* `move` — Remove the group member from one group and move them to a different group. \n* `set_primary` — Set the user's primary group. (This can only be one of move,set_primary)",
																	"type": "text"
																},
																{
																	"key": "target_group_id",
																	"value": "nulla fugiat",
																	"description": "The target group's ID. To get this value, use the [List Groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups) API. \n* To set a user's primary group, use the designated primary group's `groupId` value. \n* To move a group member from one group to another, use the `groupId` of the designated group.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/members/:memberId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"members",
																":memberId"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The group's unique ID. To get this value, use the [List Groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups) API.\n* To set a user's primary group, use the `target_group_id` value for this parameter's value. \n* To move a group member from one group to another, use the `groupId` of the designated group."
																},
																{
																	"key": "memberId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The group member's unique ID. To get this value, use the [List Group Members](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groupmembers) API."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `4130`<br>\nA group with this {groupId} does not exist.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "action",
																	"value": "set_primary",
																	"description": "(Required) The action to perform: \n* `move` — Remove the group member from one group and move them to a different group. \n* `set_primary` — Set the user's primary group. (This can only be one of move,set_primary)",
																	"type": "text"
																},
																{
																	"key": "target_group_id",
																	"value": "nulla fugiat",
																	"description": "The target group's ID. To get this value, use the [List Groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups) API. \n* To set a user's primary group, use the designated primary group's `groupId` value. \n* To move a group member from one group to another, use the `groupId` of the designated group.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/members/:memberId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"members",
																":memberId"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The group's unique ID. To get this value, use the [List Groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups) API.\n* To set a user's primary group, use the `target_group_id` value for this parameter's value. \n* To move a group member from one group to another, use the `groupId` of the designated group."
																},
																{
																	"key": "memberId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The group member's unique ID. To get this value, use the [List Group Members](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groupmembers) API."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "List group members ",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId/members?page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId",
												"members"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30",
													"description": "The number of records returned within a single API call."
												},
												{
													"key": "page_number",
													"value": "1",
													"description": "\n**Deprecated** - This field has been deprecated and we will stop supporting it completely in a future release. Please use \"next_page_token\" for pagination instead of this field.\n\nThe page number of the current page in the returned records."
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit",
													"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
												}
											],
											"variable": [
												{
													"key": "groupId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
												}
											]
										},
										"description": "List the members of a [group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-) under your account.\n\n**Prerequisite**: Pro, Business, or Education account<br>\n**Scopes**: `group:read:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br> Only available for paid account,{accountId}.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/members?page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"members"
													],
													"query": [
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "page_number",
															"value": "1"
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"members\": [\n  {\n   \"email\": \"\",\n   \"first_name\": \"Ram\",\n   \"id\": \"3542342\",\n   \"last_name\": \"Ghale\",\n   \"type\": 1\n  }\n ],\n \"page_count\": 1,\n \"page_number\": 1,\n \"page_size\": 1,\n \"total_records\": 1\n}"
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nNot found.<br>\n**Error Code:** `4130`<br>\nA group with this {groupId} does not exist.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/members?page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"members"
													],
													"query": [
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "page_number",
															"value": "1"
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add group members",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "members",
													"value": "[{\"id\":\"irure et veniam cillum esse\",\"email\":\"dolor\"},{\"id\":\"sunt\",\"email\":\"cupidatat est l\"}]",
													"description": "List of Group members",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId/members",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId",
												"members"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
												}
											]
										},
										"description": "Use this API to add users to a [group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-) in your account.\n\n**Scopes:** `group:write:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n**Prerequisites:** \n* A Pro, Business, or Education account"
									},
									"response": [
										{
											"name": "Only available for paid account,{accountId}.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "members",
															"value": "[{\"id\":\"proident sint eu sit labore\",\"email\":\"nisi Duis qui velit\"},{\"id\":\"Excepteur consectetur occaecat aute anim\",\"email\":\"voluptate dolore Lorem\"}]",
															"description": "List of Group members",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/members",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"members"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Member added.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "members",
															"value": "[{\"id\":\"proident sint eu sit labore\",\"email\":\"nisi Duis qui velit\"},{\"id\":\"Excepteur consectetur occaecat aute anim\",\"email\":\"voluptate dolore Lorem\"}]",
															"description": "List of Group members",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/members",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"members"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"ids\": \"string\",\n \"added_at\": \"string [date-time]\"\n}"
										},
										{
											"name": "**Status Code:** `404`<br>\nNot found.<br>\n**Error Code:** `4130`<br>\nA group with this {groupId} does not exist.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "members",
															"value": "[{\"id\":\"proident sint eu sit labore\",\"email\":\"nisi Duis qui velit\"},{\"id\":\"Excepteur consectetur occaecat aute anim\",\"email\":\"voluptate dolore Lorem\"}]",
															"description": "List of Group members",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/members",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"members"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "admins",
							"item": [
								{
									"name": "List group admins",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId/admins?page_size=30&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId",
												"admins"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30",
													"description": "The number of records returned within a single API call."
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit",
													"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
												}
											],
											"variable": [
												{
													"key": "groupId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
												}
											]
										},
										"description": "Use this API to return a list of [group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-) administrators under your account.\n\n**Scopes:** `group:read:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n**Prerequisites:** \n* A Pro, Business, or Education account"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br> Only available for paid account: \"{accountId}\".",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/admins?page_size=30&next_page_token=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"admins"
													],
													"query": [
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"admins\": [\n  {\n   \"email\": \"\",\n   \"id\": \"3542342\",\n   \"name\": \"Ghale\"\n  }\n ],\n \"page_size\": 1,\n \"total_records\": 1,\n \"next_page_token\": \"svjsecsjaiowef\"\n}"
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nNot found.<br>\n**Error Code:** `4130`<br>\nA group with the \"{groupId}\" ID does not exist.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/admins?page_size=30&next_page_token=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"admins"
													],
													"query": [
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add group admins",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "admins",
													"value": "[{\"id\":\"et nostrud est\",\"email\":\"irure\"},{\"id\":\"aliqua proident sed\",\"email\":\"proident enim\"}]",
													"description": "A list of the administrators to add to a group.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId/admins",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId",
												"admins"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
												}
											]
										},
										"description": "Use this API to add administrators to a [group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-) under your account.\n\n**Scopes:** `group:write:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n**Prerequisites:** \n* A Pro, Business, or Education account"
									},
									"response": [
										{
											"name": "**Status Code:** `200` <br> Only available for paid account: \"{accountId}\".",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "admins",
															"value": "[{\"id\":\"in\",\"email\":\"aliquip est ut\"},{\"id\":\"eiusmod\",\"email\":\"in\"}]",
															"description": "A list of the administrators to add to a group.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/admins",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"admins"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**Status Code:** `201` <br> Group administrator added.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "admins",
															"value": "[{\"id\":\"in\",\"email\":\"aliquip est ut\"},{\"id\":\"eiusmod\",\"email\":\"in\"}]",
															"description": "A list of the administrators to add to a group.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/admins",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"admins"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"ids\": [\n  \"abc4545fdgfdhg\",\n  \"lgfdkhg123456\"\n ],\n \"added_at\": \"2019-09-27T00:14:46Z\"\n}"
										},
										{
											"name": "**Status Code:** `404` <br> Not found. <br> **Error Code:** `4130` <br> A group with the \"{groupId}\" ID does not exist.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "admins",
															"value": "[{\"id\":\"in\",\"email\":\"aliquip est ut\"},{\"id\":\"eiusmod\",\"email\":\"in\"}]",
															"description": "A list of the administrators to add to a group.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/admins",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"admins"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a group admin",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId/admins/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId",
												"admins",
												":userId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
												},
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										},
										"description": "Use this API to remove a [group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-) administrator in a Zoom account.\n\n**Scopes:** `group:write:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* A Pro, Business, or Education account"
									},
									"response": [
										{
											"name": "**Status Code:** `200` <br> Only available for paid account: \"{accountId}\".",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/admins/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"admins",
														":userId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														},
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**Status Code:** `204` <br> Group administrator removed.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/admins/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"admins",
														":userId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														},
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**Status Code:** `400` <br> Bad request. <br> **Error Code:** `4138` <br> That user is not an administrator for the group: \"{groupId}\".",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/admins/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"admins",
														":userId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														},
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**Status Code:** `404` <br> Not found. <br> **Error Code:** `4130` <br> A group with the \"{groupId}\" ID does not exist.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/admins/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"admins",
														":userId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														},
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "settings",
							"item": [
								{
									"name": "virtual backgrounds",
									"item": [
										{
											"name": "Delete virtual background files",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/settings/virtual_backgrounds?file_ids=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"settings",
														"virtual_backgrounds"
													],
													"query": [
														{
															"key": "file_ids",
															"value": "culpa velit reprehenderit",
															"description": "Provide the id of the file that is to be deleted. To delete multiple files, provide comma separated values for this field."
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique identifier of the group. Retrieve the value for this field by calling the [List groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups) API."
														}
													]
												},
												"description": "Delete existing virtual background file(s) from an account. \n\n**Prerequisites:**<br>\n* Virtual background feature must be [enabled](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background#h_2ef28080-fce9-4ac2-b567-dc958afab1b7) on the account.\n<br> **Scope:** `group:write:admin`<br><br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n\n"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `204` **No Content** <br>\nDeleted.\n",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/settings/virtual_backgrounds?file_ids=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"settings",
																"virtual_backgrounds"
															],
															"query": [
																{
																	"key": "file_ids",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the group. Retrieve the value for this field by calling the [List groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups) API."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad request** <br>\n**Error Code:** `300`<br>\nInvalid parameter: file_ids. <br>\nGroup member not found.\n",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/settings/virtual_backgrounds?file_ids=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"settings",
																"virtual_backgrounds"
															],
															"query": [
																{
																	"key": "file_ids",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the group. Retrieve the value for this field by calling the [List groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups) API."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found** <br>\n**Error Code:** `4130`<br>\nA group with this {groupId} does not exist.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/settings/virtual_backgrounds?file_ids=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"settings",
																"virtual_backgrounds"
															],
															"query": [
																{
																	"key": "file_ids",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the group. Retrieve the value for this field by calling the [List groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups) API."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Upload virtual background files",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "labore",
															"description": "Provide the file's path here.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/settings/virtual_backgrounds?file_ids=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"settings",
														"virtual_backgrounds"
													],
													"query": [
														{
															"key": "file_ids",
															"value": "culpa velit reprehenderit",
															"description": "Provide the id of the file that is to be deleted. To delete multiple files, provide comma separated values for this field."
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique identifier of the group. Retrieve the value for this field by calling the [List groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups) API."
														}
													]
												},
												"description": "Use this API to [upload virtual background files](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background#h_01EJF3YFEWGT8YA0ZJ079JEDQE) for all users in a group to use. \n\n\n**Prerequisites:**<br>\n* Virtual background feature must be [enabled](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background#h_2ef28080-fce9-4ac2-b567-dc958afab1b7) on the account.\n<br> **Scope:** `group:write:admin`<br><br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n\n\n`"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `201` **Created** <br>\n",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/settings/virtual_backgrounds?file_ids=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"settings",
																"virtual_backgrounds"
															],
															"query": [
																{
																	"key": "file_ids",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the group. Retrieve the value for this field by calling the [List groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups) API."
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"id\": \"_Tcj7354w6eHw\",\n \"name\": \"u=mdbhhfg3y7&fm=2fdjs0.jpg\",\n \"type\": \"image\",\n \"is_default\": false,\n \"size\": 53434\n}"
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n**Error Code:** `120`<br>\nNo file uploaded, verify that a file has been uploaded.<br>\nFile size cannot exceed 15M.<br>\nA maximum of 10 files are allowed for a user.<br>\nOnly jpg/jpeg or png image file can b",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/settings/virtual_backgrounds?file_ids=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"settings",
																"virtual_backgrounds"
															],
															"query": [
																{
																	"key": "file_ids",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the group. Retrieve the value for this field by calling the [List groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups) API."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found** <br>\n**Error Code:** `1001`<br>\nUser not exist.<br>\nUser {email} not exist or not belong to this account.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/:groupId/settings/virtual_backgrounds?file_ids=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																":groupId",
																"settings",
																"virtual_backgrounds"
															],
															"query": [
																{
																	"key": "file_ids",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique identifier of the group. Retrieve the value for this field by calling the [List groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups) API."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get a group's settings",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId/settings?option=recording_authentication&custom_query_fields=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId",
												"settings"
											],
											"query": [
												{
													"key": "option",
													"value": "recording_authentication",
													"description": "`meeting_authentication`: Use this query parameter to view [meeting authentication configuration](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) applied on the group.<br>`recording_authentication`: Use this query parameter to view [recording authentication configuration](https://support.zoom.us/hc/en-us/articles/360037756671-Authentication-Profiles-for-Cloud-Recordings) applied on the group.<br>\n`meeting_security`: Use this query parameter to view meeting security settings applied on the group.<br>"
												},
												{
													"key": "custom_query_fields",
													"value": "culpa velit reprehenderit",
													"description": "Provide the name of the field by which you would like to filter the response. For example, if you provide \"host_video\" as the value of this field, you will get a response similar to the following:<br>\n{\n    \"schedule_meeting\": {\n        \"host_video\": false\n    }\n}\n<br>You can provide multiple values by separating them with commas(example: \"host_video,participant_video”)."
												}
											],
											"variable": [
												{
													"key": "groupId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) "
												}
											]
										},
										"description": "Get settings for a [group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-). \n**Prerequisite**: Pro, Business, or Education account<br>\n**Scopes**: `group:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**Error Code**: `200` <br>\nOnly available for paid account.\n\n**HTTP Status Code**: `200` <br>\nGroup Settings Returned.\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/settings?option=recording_authentication&custom_query_fields=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"settings"
													],
													"query": [
														{
															"key": "option",
															"value": "recording_authentication"
														},
														{
															"key": "custom_query_fields",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"schedule_meeting\": {\n  \"host_video\": true,\n  \"participant_video\": true,\n  \"audio_type\": \"both\",\n  \"join_before_host\": true,\n  \"force_pmi_jbh_password\": true,\n  \"require_password_for_scheduling_new_meetings\": true,\n  \"require_password_for_scheduled_meetings\": true,\n  \"require_password_for_instant_meetings\": false,\n  \"require_password_for_pmi_meetings\": \"all\",\n  \"pstn_password_protected\": true,\n  \"mute_upon_entry\": true,\n  \"upcoming_meeting_reminder\": true\n },\n \"in_meeting\": {\n  \"e2e_encryption\": true,\n  \"chat\": true,\n  \"allow_participants_chat_with\": 2,\n  \"allow_users_save_chats\": 2,\n  \"private_chat\": true,\n  \"auto_saving_chat\": true,\n  \"entry_exit_chime\": \"all\",\n  \"record_play_own_voice\": false,\n  \"feedback\": true,\n  \"post_meeting_feedback\": true,\n  \"co_host\": true,\n  \"polling\": true,\n  \"attendee_on_hold\": true,\n  \"show_meeting_control_toolbar\": true,\n  \"allow_show_zoom_windows\": true,\n  \"annotation\": true,\n  \"whiteboard\": true,\n  \"remote_control\": true,\n  \"non_verbal_feedback\": true,\n  \"breakout_room\": true,\n  \"breakout_room_schedule\": true,\n  \"remote_support\": true,\n  \"closed_caption\": true,\n  \"far_end_camera_control\": true,\n  \"group_hd\": true,\n  \"virtual_background\": true,\n  \"alert_guest_join\": true,\n  \"auto_answer\": true,\n  \"sending_default_email_invites\": true,\n  \"use_html_format_email\": true,\n  \"stereo_audio\": true,\n  \"original_audio\": true,\n  \"show_device_list\": false,\n  \"only_host_view_device_list\": false,\n  \"screen_sharing\": true,\n  \"waiting_room\": true,\n  \"show_browser_join_link\": true,\n  \"show_a_join_from_your_browser_link\": true,\n  \"join_from_mobile\": true,\n  \"join_from_desktop\": true,\n  \"allow_live_streaming\": true,\n  \"live_streaming_facebook\": true,\n  \"workplace_by_facebook\": true,\n  \"live_streaming_youtube\": true,\n  \"custom_live_streaming_service\": true,\n  \"custom_service_instructions\": \"specific instructions\",\n  \"webinar_live_streaming\": {\n   \"enable\": true,\n   \"live_streaming_service\": [\n    \"facebook\",\n    \"workplace_by_facebook\",\n    \"youtube\",\n    \"custom_live_streaming_service\"\n   ],\n   \"custom_service_instructions\": \"specific instructions\",\n   \"live_streaming_reminder\": true\n  },\n  \"webinar_question_answer\": true,\n  \"webinar_chat\": {\n   \"enable\": true,\n   \"allow_panelists_chat_with\": 1,\n   \"allow_attendees_chat_with\": 1,\n   \"default_attendees_chat_with\": 1,\n   \"allow_panelists_send_direct_message\": true,\n   \"allow_users_save_chats\": 1,\n   \"allow_auto_save_local_chat_file\": true\n  },\n  \"closed_captioning\": {\n   \"enable\": true,\n   \"third_party_captioning_service\": false,\n   \"auto_transcribing\": true,\n   \"view_full_transcript\": true,\n   \"save_caption\": true\n  },\n  \"slide_control\": true,\n  \"meeting_survey\": true,\n  \"webinar_polling\": {\n   \"enable\": true,\n   \"advanced_polls\": true\n  },\n  \"webinar_survey\": true\n },\n \"email_notification\": {\n  \"cloud_recording_available_reminder\": true,\n  \"recording_available_reminder_schedulers\": true,\n  \"recording_available_reminder_alternative_hosts\": true,\n  \"jbh_reminder\": true,\n  \"cancel_meeting_reminder\": true,\n  \"alternative_host_reminder\": true,\n  \"schedule_for_reminder\": true\n },\n \"recording\": {\n  \"local_recording\": true,\n  \"cloud_recording\": true,\n  \"record_speaker_view\": true,\n  \"record_gallery_view\": false,\n  \"record_audio_file\": true,\n  \"save_chat_text\": true,\n  \"show_timestamp\": false,\n  \"recording_audio_transcript\": false,\n  \"auto_recording\": \"none\",\n  \"cloud_recording_download\": true,\n  \"cloud_recording_download_host\": true,\n  \"account_user_access_recording\": false,\n  \"host_delete_cloud_recording\": true\n },\n \"telephony\": {\n  \"third_party_audio\": true,\n  \"audio_conference_info\": \"1234656\"\n },\n \"other_options\": {\n  \"blur_snapshot\": true,\n  \"allow_users_contact_support_via_chat\": true\n },\n \"audio_conferencing\": {\n  \"toll_free_and_fee_based_toll_call\": {\n   \"enable\": true,\n   \"numbers\": [\n    {\n     \"code\": \"64\",\n     \"country_code\": \"US\",\n     \"country_name\": \"United States\",\n     \"number\": \"+1 5550100\",\n     \"display_number\": \"+1 5550100(Atlanta)\"\n    },\n    {\n     \"code\": \"64\",\n     \"country_code\": \"US\",\n     \"country_name\": \"United States\",\n     \"number\": \"+1 5550101\",\n     \"display_number\": \"+1 5550101(SanJose)\"\n    }\n   ],\n   \"allow_webinar_attendees_dial\": true\n  }\n }\n}"
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\n**Error Code:** `4130` <br>\nGroup does not exist: {groupId}.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/settings?option=recording_authentication&custom_query_fields=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"settings"
													],
													"query": [
														{
															"key": "option",
															"value": "recording_authentication"
														},
														{
															"key": "custom_query_fields",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a group's settings",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "schedule_meeting",
													"value": "{\"host_video\":false,\"participant_video\":true,\"audio_type\":\"Ut anim nulla incididunt ut\",\"join_before_host\":false,\"require_password_for_all_meetings\":true,\"force_pmi_jbh_password\":false,\"require_password_for_scheduling_new_meetings\":false,\"require_password_for_scheduled_meetings\":true,\"require_password_for_instant_meetings\":false,\"require_password_for_pmi_meetings\":\"none\",\"pstn_password_protected\":true,\"mute_upon_entry\":false,\"upcoming_meeting_reminder\":true,\"embed_password_in_join_link\":true}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "in_meeting",
													"value": "{\"e2e_encryption\":true,\"chat\":true,\"allow_participants_chat_with\":3,\"allow_users_save_chats\":2,\"private_chat\":true,\"auto_saving_chat\":false,\"entry_exit_chime\":\"culpa ad ullamco\",\"record_play_own_voice\":true,\"feedback\":false,\"post_meeting_feedback\":true,\"co_host\":false,\"polling\":true,\"attendee_on_hold\":false,\"show_meeting_control_toolbar\":true,\"allow_show_zoom_windows\":false,\"annotation\":false,\"whiteboard\":true,\"remote_control\":true,\"non_verbal_feedback\":true,\"breakout_room\":false,\"breakout_room_schedule\":true,\"remote_support\":true,\"closed_caption\":true,\"far_end_camera_control\":true,\"group_hd\":true,\"virtual_background\":true,\"alert_guest_join\":false,\"auto_answer\":false,\"sending_default_email_invites\":true,\"use_html_format_email\":true,\"stereo_audio\":false,\"original_audio\":false,\"show_device_list\":true,\"only_host_view_device_list\":false,\"screen_sharing\":true,\"who_can_share_screen\":\"host\",\"who_can_share_screen_when_someone_is_sharing\":\"host\",\"waiting_room\":true,\"show_browser_join_link\":true,\"show_a_join_from_your_browser_link\":false,\"join_from_mobile\":false,\"join_from_desktop\":false,\"file_transfer\":true,\"custom_data_center_regions\":true,\"data_center_regions\":\"IN\",\"request_permission_to_unmute\":false,\"allow_live_streaming\":false,\"live_streaming_facebook\":false,\"workplace_by_facebook\":true,\"live_streaming_youtube\":true,\"custom_live_streaming_service\":false,\"custom_service_instructions\":\"nulla exercitation esse\",\"webinar_live_streaming\":{\"enable\":true,\"live_streaming_service\":[\"workplace_by_facebook\",\"youtube\"],\"custom_service_instructions\":\"ea ut s\",\"live_streaming_reminder\":false},\"webinar_question_answer\":true,\"webinar_chat\":{\"enable\":false,\"allow_panelists_chat_with\":2,\"allow_attendees_chat_with\":2,\"default_attendees_chat_with\":2,\"allow_panelists_send_direct_message\":true,\"allow_users_save_chats\":2,\"allow_auto_save_local_chat_file\":false},\"closed_captioning\":{\"enable\":false,\"third_party_captioning_service\":true,\"auto_transcribing\":true,\"view_full_transcript\":false,\"save_caption\":false},\"slide_control\":false,\"meeting_survey\":true,\"webinar_polling\":{\"enable\":false,\"advanced_polls\":false},\"webinar_survey\":false}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "email_notification",
													"value": "{\"cloud_recording_available_reminder\":true,\"recording_available_reminder_schedulers\":true,\"recording_available_reminder_alternative_hosts\":false,\"jbh_reminder\":false,\"cancel_meeting_reminder\":false,\"alternative_host_reminder\":false,\"schedule_for_reminder\":false}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "recording",
													"value": "{\"local_recording\":true,\"cloud_recording\":false,\"record_speaker_view\":false,\"record_gallery_view\":false,\"record_audio_file\":true,\"save_chat_text\":false,\"show_timestamp\":true,\"recording_audio_transcript\":true,\"auto_recording\":\"non sed labore\",\"cloud_recording_download\":true,\"cloud_recording_download_host\":false,\"account_user_access_recording\":true,\"host_delete_cloud_recording\":false,\"prevent_host_access_recording\":false,\"ip_address_access_control\":{\"enable\":true,\"ip_addresses_or_ranges\":\"voluptate\"},\"archive\":{\"enable\":false,\"type\":2,\"settings\":{\"chat_file\":true,\"chat_with_sender_email\":false,\"audio_file\":false,\"video_file\":false,\"cc_transcript_file\":true}}}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "telephony",
													"value": "{\"third_party_audio\":false,\"audio_conference_info\":\"voluptate adipisicing in consectetur do\"}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "profile",
													"value": "{\"recording_storage_location\":{\"allowed_values\":[\"enim\",\"sit aliqua in\"],\"value\":\"veniam anim est aliquip\"}}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "other_options",
													"value": "{\"blur_snapshot\":true,\"allow_users_contact_support_via_chat\":true}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "audio_conferencing",
													"value": "{\"toll_free_and_fee_based_toll_call\":{\"enable\":false,\"numbers\":[{\"code\":\"exercitation dolore mollit\",\"country_code\":\"dolore esse ex tempor amet\",\"country_name\":\"eiusmod laboris consectetur labore\",\"number\":\"minim\",\"display_number\":\"eiusmo\"},{\"code\":\"ut tempor\",\"country_code\":\"labo\",\"country_name\":\"labore laboris\",\"number\":\"fugiat\",\"display_number\":\"dolore\"}],\"allow_webinar_attendees_dial\":true}}",
													"description": "undefined",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId/settings?option=meeting_authentication&custom_query_fields=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId",
												"settings"
											],
											"query": [
												{
													"key": "option",
													"value": "meeting_authentication"
												},
												{
													"key": "custom_query_fields",
													"value": "culpa velit reprehenderit",
													"description": "Provide the name of the field by which you would like to filter the response. For example, if you provide \"host_video\" as the value of this field, you will get a response similar to the following:<br>\n{\n    \"schedule_meeting\": {\n        \"host_video\": false\n    }\n}\n<br>You can provide multiple values by separating them with commas(example: \"host_video,participant_video”)."
												}
											],
											"variable": [
												{
													"key": "groupId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Id of the group."
												}
											]
										},
										"description": "Update settings for a [group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-).<p style=\"background-color:#FEEFB3; color:#9F6000\"><br>Note:</b> The `force_pmi_jbh_password` field under meeting settings is planned to be deprecated on September 22, 2019. This field will be replaced by another field that will provide the same functionality.</p>\n**Prerequisite**: Pro, Business, or Education account<br> \n**Scopes**: `group:write:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**Error code:** `200`<br>\nOnly available for Paid account, {accountId}",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "schedule_meeting",
															"value": "{\"host_video\":false,\"participant_video\":false,\"audio_type\":\"in incididunt off\",\"join_before_host\":false,\"require_password_for_all_meetings\":false,\"force_pmi_jbh_password\":true,\"require_password_for_scheduling_new_meetings\":false,\"require_password_for_scheduled_meetings\":false,\"require_password_for_instant_meetings\":false,\"require_password_for_pmi_meetings\":\"all\",\"pstn_password_protected\":true,\"mute_upon_entry\":false,\"upcoming_meeting_reminder\":false,\"embed_password_in_join_link\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "in_meeting",
															"value": "{\"e2e_encryption\":true,\"chat\":false,\"allow_participants_chat_with\":1,\"allow_users_save_chats\":3,\"private_chat\":true,\"auto_saving_chat\":true,\"entry_exit_chime\":\"Ut enim non in\",\"record_play_own_voice\":false,\"feedback\":false,\"post_meeting_feedback\":false,\"co_host\":false,\"polling\":false,\"attendee_on_hold\":false,\"show_meeting_control_toolbar\":false,\"allow_show_zoom_windows\":true,\"annotation\":true,\"whiteboard\":false,\"remote_control\":true,\"non_verbal_feedback\":false,\"breakout_room\":true,\"breakout_room_schedule\":true,\"remote_support\":false,\"closed_caption\":false,\"far_end_camera_control\":false,\"group_hd\":true,\"virtual_background\":true,\"alert_guest_join\":true,\"auto_answer\":true,\"sending_default_email_invites\":false,\"use_html_format_email\":true,\"stereo_audio\":false,\"original_audio\":false,\"show_device_list\":true,\"only_host_view_device_list\":true,\"screen_sharing\":false,\"who_can_share_screen\":\"all\",\"who_can_share_screen_when_someone_is_sharing\":\"host\",\"waiting_room\":true,\"show_browser_join_link\":true,\"show_a_join_from_your_browser_link\":false,\"join_from_mobile\":false,\"join_from_desktop\":true,\"file_transfer\":true,\"custom_data_center_regions\":false,\"data_center_regions\":\"HK\",\"request_permission_to_unmute\":false,\"allow_live_streaming\":true,\"live_streaming_facebook\":false,\"workplace_by_facebook\":true,\"live_streaming_youtube\":true,\"custom_live_streaming_service\":false,\"custom_service_instructions\":\"commod\",\"webinar_live_streaming\":{\"enable\":true,\"live_streaming_service\":[\"youtube\",\"workplace_by_facebook\"],\"custom_service_instructions\":\"sit laborum occaecat\",\"live_streaming_reminder\":false},\"webinar_question_answer\":false,\"webinar_chat\":{\"enable\":true,\"allow_panelists_chat_with\":1,\"allow_attendees_chat_with\":2,\"default_attendees_chat_with\":1,\"allow_panelists_send_direct_message\":false,\"allow_users_save_chats\":0,\"allow_auto_save_local_chat_file\":false},\"closed_captioning\":{\"enable\":false,\"third_party_captioning_service\":true,\"auto_transcribing\":true,\"view_full_transcript\":false,\"save_caption\":false},\"slide_control\":true,\"meeting_survey\":true,\"webinar_polling\":{\"enable\":true,\"advanced_polls\":true},\"webinar_survey\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "email_notification",
															"value": "{\"cloud_recording_available_reminder\":true,\"recording_available_reminder_schedulers\":true,\"recording_available_reminder_alternative_hosts\":false,\"jbh_reminder\":true,\"cancel_meeting_reminder\":false,\"alternative_host_reminder\":false,\"schedule_for_reminder\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "recording",
															"value": "{\"local_recording\":false,\"cloud_recording\":false,\"record_speaker_view\":true,\"record_gallery_view\":false,\"record_audio_file\":true,\"save_chat_text\":true,\"show_timestamp\":false,\"recording_audio_transcript\":false,\"auto_recording\":\"eiusmod dolore Excepteur voluptate nostrud\",\"cloud_recording_download\":true,\"cloud_recording_download_host\":false,\"account_user_access_recording\":true,\"host_delete_cloud_recording\":false,\"prevent_host_access_recording\":true,\"ip_address_access_control\":{\"enable\":true,\"ip_addresses_or_ranges\":\"anim aute laborum\"},\"archive\":{\"enable\":true,\"type\":2,\"settings\":{\"chat_file\":true,\"chat_with_sender_email\":true,\"audio_file\":true,\"video_file\":false,\"cc_transcript_file\":false}}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "telephony",
															"value": "{\"third_party_audio\":true,\"audio_conference_info\":\"id tempor\"}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "profile",
															"value": "{\"recording_storage_location\":{\"allowed_values\":[\"in nostrud ullamco dolore\",\"do aute\"],\"value\":\"veli\"}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "other_options",
															"value": "{\"blur_snapshot\":true,\"allow_users_contact_support_via_chat\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "audio_conferencing",
															"value": "{\"toll_free_and_fee_based_toll_call\":{\"enable\":false,\"numbers\":[{\"code\":\"elit pa\",\"country_code\":\"aliquip quis nostrud tempor\",\"country_name\":\"fugiat ipsum\",\"number\":\"officia non nostr\",\"display_number\":\"sed\"},{\"code\":\"sit Ut sunt consectetur\",\"country_code\":\"adipisicing\",\"country_name\":\"ullamco amet voluptate\",\"number\":\"incididunt\",\"display_number\":\"minim dolore d\"}],\"allow_webinar_attendees_dial\":false}}",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/settings?option=meeting_authentication&custom_query_fields=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"settings"
													],
													"query": [
														{
															"key": "option",
															"value": "meeting_authentication"
														},
														{
															"key": "custom_query_fields",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Id of the group."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `204`<br>\nSettings updated successfully.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "schedule_meeting",
															"value": "{\"host_video\":false,\"participant_video\":false,\"audio_type\":\"in incididunt off\",\"join_before_host\":false,\"require_password_for_all_meetings\":false,\"force_pmi_jbh_password\":true,\"require_password_for_scheduling_new_meetings\":false,\"require_password_for_scheduled_meetings\":false,\"require_password_for_instant_meetings\":false,\"require_password_for_pmi_meetings\":\"all\",\"pstn_password_protected\":true,\"mute_upon_entry\":false,\"upcoming_meeting_reminder\":false,\"embed_password_in_join_link\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "in_meeting",
															"value": "{\"e2e_encryption\":true,\"chat\":false,\"allow_participants_chat_with\":1,\"allow_users_save_chats\":3,\"private_chat\":true,\"auto_saving_chat\":true,\"entry_exit_chime\":\"Ut enim non in\",\"record_play_own_voice\":false,\"feedback\":false,\"post_meeting_feedback\":false,\"co_host\":false,\"polling\":false,\"attendee_on_hold\":false,\"show_meeting_control_toolbar\":false,\"allow_show_zoom_windows\":true,\"annotation\":true,\"whiteboard\":false,\"remote_control\":true,\"non_verbal_feedback\":false,\"breakout_room\":true,\"breakout_room_schedule\":true,\"remote_support\":false,\"closed_caption\":false,\"far_end_camera_control\":false,\"group_hd\":true,\"virtual_background\":true,\"alert_guest_join\":true,\"auto_answer\":true,\"sending_default_email_invites\":false,\"use_html_format_email\":true,\"stereo_audio\":false,\"original_audio\":false,\"show_device_list\":true,\"only_host_view_device_list\":true,\"screen_sharing\":false,\"who_can_share_screen\":\"all\",\"who_can_share_screen_when_someone_is_sharing\":\"host\",\"waiting_room\":true,\"show_browser_join_link\":true,\"show_a_join_from_your_browser_link\":false,\"join_from_mobile\":false,\"join_from_desktop\":true,\"file_transfer\":true,\"custom_data_center_regions\":false,\"data_center_regions\":\"HK\",\"request_permission_to_unmute\":false,\"allow_live_streaming\":true,\"live_streaming_facebook\":false,\"workplace_by_facebook\":true,\"live_streaming_youtube\":true,\"custom_live_streaming_service\":false,\"custom_service_instructions\":\"commod\",\"webinar_live_streaming\":{\"enable\":true,\"live_streaming_service\":[\"youtube\",\"workplace_by_facebook\"],\"custom_service_instructions\":\"sit laborum occaecat\",\"live_streaming_reminder\":false},\"webinar_question_answer\":false,\"webinar_chat\":{\"enable\":true,\"allow_panelists_chat_with\":1,\"allow_attendees_chat_with\":2,\"default_attendees_chat_with\":1,\"allow_panelists_send_direct_message\":false,\"allow_users_save_chats\":0,\"allow_auto_save_local_chat_file\":false},\"closed_captioning\":{\"enable\":false,\"third_party_captioning_service\":true,\"auto_transcribing\":true,\"view_full_transcript\":false,\"save_caption\":false},\"slide_control\":true,\"meeting_survey\":true,\"webinar_polling\":{\"enable\":true,\"advanced_polls\":true},\"webinar_survey\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "email_notification",
															"value": "{\"cloud_recording_available_reminder\":true,\"recording_available_reminder_schedulers\":true,\"recording_available_reminder_alternative_hosts\":false,\"jbh_reminder\":true,\"cancel_meeting_reminder\":false,\"alternative_host_reminder\":false,\"schedule_for_reminder\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "recording",
															"value": "{\"local_recording\":false,\"cloud_recording\":false,\"record_speaker_view\":true,\"record_gallery_view\":false,\"record_audio_file\":true,\"save_chat_text\":true,\"show_timestamp\":false,\"recording_audio_transcript\":false,\"auto_recording\":\"eiusmod dolore Excepteur voluptate nostrud\",\"cloud_recording_download\":true,\"cloud_recording_download_host\":false,\"account_user_access_recording\":true,\"host_delete_cloud_recording\":false,\"prevent_host_access_recording\":true,\"ip_address_access_control\":{\"enable\":true,\"ip_addresses_or_ranges\":\"anim aute laborum\"},\"archive\":{\"enable\":true,\"type\":2,\"settings\":{\"chat_file\":true,\"chat_with_sender_email\":true,\"audio_file\":true,\"video_file\":false,\"cc_transcript_file\":false}}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "telephony",
															"value": "{\"third_party_audio\":true,\"audio_conference_info\":\"id tempor\"}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "profile",
															"value": "{\"recording_storage_location\":{\"allowed_values\":[\"in nostrud ullamco dolore\",\"do aute\"],\"value\":\"veli\"}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "other_options",
															"value": "{\"blur_snapshot\":true,\"allow_users_contact_support_via_chat\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "audio_conferencing",
															"value": "{\"toll_free_and_fee_based_toll_call\":{\"enable\":false,\"numbers\":[{\"code\":\"elit pa\",\"country_code\":\"aliquip quis nostrud tempor\",\"country_name\":\"fugiat ipsum\",\"number\":\"officia non nostr\",\"display_number\":\"sed\"},{\"code\":\"sit Ut sunt consectetur\",\"country_code\":\"adipisicing\",\"country_name\":\"ullamco amet voluptate\",\"number\":\"incididunt\",\"display_number\":\"minim dolore d\"}],\"allow_webinar_attendees_dial\":false}}",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/settings?option=meeting_authentication&custom_query_fields=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"settings"
													],
													"query": [
														{
															"key": "option",
															"value": "meeting_authentication"
														},
														{
															"key": "custom_query_fields",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Id of the group."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `4130`<br>\nGroup does not exist: {groupId}.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "schedule_meeting",
															"value": "{\"host_video\":false,\"participant_video\":false,\"audio_type\":\"in incididunt off\",\"join_before_host\":false,\"require_password_for_all_meetings\":false,\"force_pmi_jbh_password\":true,\"require_password_for_scheduling_new_meetings\":false,\"require_password_for_scheduled_meetings\":false,\"require_password_for_instant_meetings\":false,\"require_password_for_pmi_meetings\":\"all\",\"pstn_password_protected\":true,\"mute_upon_entry\":false,\"upcoming_meeting_reminder\":false,\"embed_password_in_join_link\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "in_meeting",
															"value": "{\"e2e_encryption\":true,\"chat\":false,\"allow_participants_chat_with\":1,\"allow_users_save_chats\":3,\"private_chat\":true,\"auto_saving_chat\":true,\"entry_exit_chime\":\"Ut enim non in\",\"record_play_own_voice\":false,\"feedback\":false,\"post_meeting_feedback\":false,\"co_host\":false,\"polling\":false,\"attendee_on_hold\":false,\"show_meeting_control_toolbar\":false,\"allow_show_zoom_windows\":true,\"annotation\":true,\"whiteboard\":false,\"remote_control\":true,\"non_verbal_feedback\":false,\"breakout_room\":true,\"breakout_room_schedule\":true,\"remote_support\":false,\"closed_caption\":false,\"far_end_camera_control\":false,\"group_hd\":true,\"virtual_background\":true,\"alert_guest_join\":true,\"auto_answer\":true,\"sending_default_email_invites\":false,\"use_html_format_email\":true,\"stereo_audio\":false,\"original_audio\":false,\"show_device_list\":true,\"only_host_view_device_list\":true,\"screen_sharing\":false,\"who_can_share_screen\":\"all\",\"who_can_share_screen_when_someone_is_sharing\":\"host\",\"waiting_room\":true,\"show_browser_join_link\":true,\"show_a_join_from_your_browser_link\":false,\"join_from_mobile\":false,\"join_from_desktop\":true,\"file_transfer\":true,\"custom_data_center_regions\":false,\"data_center_regions\":\"HK\",\"request_permission_to_unmute\":false,\"allow_live_streaming\":true,\"live_streaming_facebook\":false,\"workplace_by_facebook\":true,\"live_streaming_youtube\":true,\"custom_live_streaming_service\":false,\"custom_service_instructions\":\"commod\",\"webinar_live_streaming\":{\"enable\":true,\"live_streaming_service\":[\"youtube\",\"workplace_by_facebook\"],\"custom_service_instructions\":\"sit laborum occaecat\",\"live_streaming_reminder\":false},\"webinar_question_answer\":false,\"webinar_chat\":{\"enable\":true,\"allow_panelists_chat_with\":1,\"allow_attendees_chat_with\":2,\"default_attendees_chat_with\":1,\"allow_panelists_send_direct_message\":false,\"allow_users_save_chats\":0,\"allow_auto_save_local_chat_file\":false},\"closed_captioning\":{\"enable\":false,\"third_party_captioning_service\":true,\"auto_transcribing\":true,\"view_full_transcript\":false,\"save_caption\":false},\"slide_control\":true,\"meeting_survey\":true,\"webinar_polling\":{\"enable\":true,\"advanced_polls\":true},\"webinar_survey\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "email_notification",
															"value": "{\"cloud_recording_available_reminder\":true,\"recording_available_reminder_schedulers\":true,\"recording_available_reminder_alternative_hosts\":false,\"jbh_reminder\":true,\"cancel_meeting_reminder\":false,\"alternative_host_reminder\":false,\"schedule_for_reminder\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "recording",
															"value": "{\"local_recording\":false,\"cloud_recording\":false,\"record_speaker_view\":true,\"record_gallery_view\":false,\"record_audio_file\":true,\"save_chat_text\":true,\"show_timestamp\":false,\"recording_audio_transcript\":false,\"auto_recording\":\"eiusmod dolore Excepteur voluptate nostrud\",\"cloud_recording_download\":true,\"cloud_recording_download_host\":false,\"account_user_access_recording\":true,\"host_delete_cloud_recording\":false,\"prevent_host_access_recording\":true,\"ip_address_access_control\":{\"enable\":true,\"ip_addresses_or_ranges\":\"anim aute laborum\"},\"archive\":{\"enable\":true,\"type\":2,\"settings\":{\"chat_file\":true,\"chat_with_sender_email\":true,\"audio_file\":true,\"video_file\":false,\"cc_transcript_file\":false}}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "telephony",
															"value": "{\"third_party_audio\":true,\"audio_conference_info\":\"id tempor\"}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "profile",
															"value": "{\"recording_storage_location\":{\"allowed_values\":[\"in nostrud ullamco dolore\",\"do aute\"],\"value\":\"veli\"}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "other_options",
															"value": "{\"blur_snapshot\":true,\"allow_users_contact_support_via_chat\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "audio_conferencing",
															"value": "{\"toll_free_and_fee_based_toll_call\":{\"enable\":false,\"numbers\":[{\"code\":\"elit pa\",\"country_code\":\"aliquip quis nostrud tempor\",\"country_name\":\"fugiat ipsum\",\"number\":\"officia non nostr\",\"display_number\":\"sed\"},{\"code\":\"sit Ut sunt consectetur\",\"country_code\":\"adipisicing\",\"country_name\":\"ullamco amet voluptate\",\"number\":\"incididunt\",\"display_number\":\"minim dolore d\"}],\"allow_webinar_attendees_dial\":false}}",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/settings?option=meeting_authentication&custom_query_fields=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"settings"
													],
													"query": [
														{
															"key": "option",
															"value": "meeting_authentication"
														},
														{
															"key": "custom_query_fields",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Id of the group."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "lock settings",
							"item": [
								{
									"name": "Get locked settings",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId/lock_settings?option=culpa velit reprehenderit&custom_query_fields=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId",
												"lock_settings"
											],
											"query": [
												{
													"key": "option",
													"value": "culpa velit reprehenderit",
													"description": "Specify `meeting_security` as the value of this field if you would like to view security settings applied on a meeting hosted by the users in this group."
												},
												{
													"key": "custom_query_fields",
													"value": "culpa velit reprehenderit",
													"description": "Provide the name of the field by which you would like to filter the response. For example, if you provide \"host_video\" as the value of this field, you will get a response similar to the following:<br>\n{\n    \"schedule_meeting\": {\n        \"host_video\": false\n    }\n}\n<br>You can provide multiple values by separating them with commas(example: \"host_video,participant_video”)."
												}
											],
											"variable": [
												{
													"key": "groupId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Id of the group."
												}
											]
										},
										"description": "Retrieve a [group's](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-) locked settings. If you lock a setting, the group members will not be able to modify it individually. <p style=\"background-color:#FEEFB3; color:#9F6000\"><br>Note:</b> The `force_pmi_jbh_password` field under meeting settings is planned to be deprecated on September 22, 2019. This field will be replaced by another field that will provide the same functionality.</p>\n\n**Prerequisite**: Pro, Business, or Education account<br>\n**Scopes**: `group:read:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**Error Code:** `200`<br>\nOnly available for paid account.\n\n**Status Code:** `200`<br>\nLocked settings of group returned.\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/lock_settings?option=culpa velit reprehenderit&custom_query_fields=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"lock_settings"
													],
													"query": [
														{
															"key": "option",
															"value": "culpa velit reprehenderit"
														},
														{
															"key": "custom_query_fields",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Id of the group."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"schedule_meeting\": {\n  \"host_video\": true,\n  \"participant_video\": true,\n  \"audio_type\": true,\n  \"join_before_host\": true,\n  \"force_pmi_jbh_password\": true,\n  \"require_password_for_scheduling_new_meetings\": true,\n  \"require_password_for_instant_meetings\": false,\n  \"require_password_for_pmi_meetings\": true,\n  \"pstn_password_protected\": true,\n  \"mute_upon_entry\": true,\n  \"upcoming_meeting_reminder\": true\n },\n \"in_meeting\": {\n  \"e2e_encryption\": true,\n  \"chat\": true,\n  \"private_chat\": true,\n  \"auto_saving_chat\": true,\n  \"entry_exit_chime\": false,\n  \"feedback\": true,\n  \"post_meeting_feedback\": true,\n  \"co_host\": true,\n  \"polling\": true,\n  \"attendee_on_hold\": true,\n  \"show_meeting_control_toolbar\": true,\n  \"allow_show_zoom_windows\": true,\n  \"annotation\": true,\n  \"whiteboard\": true,\n  \"remote_control\": true,\n  \"non_verbal_feedback\": true,\n  \"breakout_room\": true,\n  \"remote_support\": true,\n  \"closed_caption\": true,\n  \"far_end_camera_control\": true,\n  \"group_hd\": true,\n  \"virtual_background\": true,\n  \"alert_guest_join\": true,\n  \"auto_answer\": true,\n  \"sending_default_email_invites\": true,\n  \"use_html_format_email\": true,\n  \"stereo_audio\": true,\n  \"original_audio\": true,\n  \"screen_sharing\": true,\n  \"waiting_room\": true,\n  \"show_browser_join_link\": true,\n  \"show_a_join_from_your_browser_link\": true,\n  \"allow_live_streaming\": true,\n  \"webinar_live_streaming\": true,\n  \"webinar_chat\": true,\n  \"webinar_question_answer\": true,\n  \"save_caption\": true,\n  \"slide_control\": true,\n  \"meeting_survey\": true,\n  \"webinar_polling\": true,\n  \"webinar_survey\": true\n },\n \"email_notification\": {\n  \"cloud_recording_available_reminder\": true,\n  \"jbh_reminder\": true,\n  \"cancel_meeting_reminder\": true,\n  \"alternative_host_reminder\": true,\n  \"schedule_for_reminder\": true\n },\n \"recording\": {\n  \"local_recording\": false,\n  \"cloud_recording\": false,\n  \"auto_recording\": false,\n  \"cloud_recording_download\": false,\n  \"account_user_access_recording\": false,\n  \"host_delete_cloud_recording\": false,\n  \"auto_delete_cmr\": false\n },\n \"telephony\": {\n  \"third_party_audio\": false\n },\n \"other_options\": {\n  \"blur_snapshot\": true\n },\n \"audio_conferencing\": {\n  \"toll_call\": true\n }\n}"
										},
										{
											"name": "**Status Code:** `404`<br>\nNot found.<br>\n**Error Code:** `4130`<br>\nGroup does not exist: {groupId}",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/lock_settings?option=culpa velit reprehenderit&custom_query_fields=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"lock_settings"
													],
													"query": [
														{
															"key": "option",
															"value": "culpa velit reprehenderit"
														},
														{
															"key": "custom_query_fields",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Id of the group."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update locked settings",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "schedule_meeting",
													"value": "{\"host_video\":true,\"participant_video\":false,\"audio_type\":true,\"join_before_host\":true,\"force_pmi_jbh_password\":true,\"require_password_for_scheduling_new_meetings\":true,\"require_password_for_instant_meetings\":false,\"require_password_for_pmi_meetings\":false,\"pstn_password_protected\":true,\"mute_upon_entry\":false,\"upcoming_meeting_reminder\":true,\"meeting_authentication\":false,\"embed_password_in_join_link\":false,\"personal_meeting\":true}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "in_meeting",
													"value": "{\"e2e_encryption\":true,\"chat\":false,\"private_chat\":true,\"auto_saving_chat\":true,\"entry_exit_chime\":\"Lorem no\",\"feedback\":false,\"post_meeting_feedback\":true,\"co_host\":true,\"polling\":false,\"attendee_on_hold\":false,\"show_meeting_control_toolbar\":false,\"allow_show_zoom_windows\":true,\"annotation\":false,\"whiteboard\":false,\"remote_control\":true,\"non_verbal_feedback\":false,\"breakout_room\":false,\"remote_support\":true,\"closed_caption\":false,\"far_end_camera_control\":false,\"group_hd\":false,\"virtual_background\":true,\"alert_guest_join\":true,\"auto_answer\":false,\"sending_default_email_invites\":false,\"use_html_format_email\":false,\"stereo_audio\":true,\"original_audio\":false,\"screen_sharing\":true,\"waiting_room\":false,\"show_browser_join_link\":true,\"show_a_join_from_your_browser_link\":false,\"custom_data_center_regions\":false,\"file_transfer\":false,\"request_permission_to_unmute\":true,\"webinar_question_answer\":false,\"allow_live_streaming\":true,\"webinar_live_streaming\":false,\"webinar_chat\":false,\"save_caption\":true,\"slide_control\":false,\"meeting_survey\":false,\"webinar_polling\":false,\"webinar_survey\":false}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "email_notification",
													"value": "{\"cloud_recording_available_reminder\":true,\"jbh_reminder\":false,\"cancel_meeting_reminder\":true,\"alternative_host_reminder\":true,\"schedule_for_reminder\":false}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "recording",
													"value": "{\"local_recording\":false,\"cloud_recording\":true,\"auto_recording\":\"sint enim do qu\",\"cloud_recording_download\":true,\"account_user_access_recording\":false,\"host_delete_cloud_recording\":true,\"auto_delete_cmr\":true,\"recording_authentication\":\"nostrud\",\"ip_address_access_control\":{\"enable\":false,\"ip_addresses_or_ranges\":\"voluptate ad\"}}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "telephony",
													"value": "{\"third_party_audio\":true,\"telephony_regions\":true}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "other_options",
													"value": "{\"blur_snapshot\":true}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "audio_conferencing",
													"value": "{\"toll_free_and_fee_based_toll_call\":true}",
													"description": "undefined",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId/lock_settings?option=culpa velit reprehenderit&custom_query_fields=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId",
												"lock_settings"
											],
											"query": [
												{
													"key": "option",
													"value": "culpa velit reprehenderit",
													"description": "Specify `meeting_security` as the value of this field if you would like to view security settings applied on a meeting hosted by the users in this group."
												},
												{
													"key": "custom_query_fields",
													"value": "culpa velit reprehenderit",
													"description": "Provide the name of the field by which you would like to filter the response. For example, if you provide \"host_video\" as the value of this field, you will get a response similar to the following:<br>\n{\n    \"schedule_meeting\": {\n        \"host_video\": false\n    }\n}\n<br>You can provide multiple values by separating them with commas(example: \"host_video,participant_video”)."
												}
											],
											"variable": [
												{
													"key": "groupId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The Id of the group."
												}
											]
										},
										"description": "Update a [group's](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-) locked settings. If you lock a setting, the group members will not be able to modify it individually. <p style=\"background-color:#FEEFB3; color:#9F6000\"><br>Note:</b> The `force_pmi_jbh_password` field under meeting settings is planned to be deprecated on September 22, 2019. This field will be replaced by another field that will provide the same functionality.</p>\n\n**Prerequisite**: Pro, Business, or Education account<br>\n**Scopes**: `group:write:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**Status Code:** `204`<br>\nGroup's locked settings updated.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "schedule_meeting",
															"value": "{\"host_video\":true,\"participant_video\":false,\"audio_type\":true,\"join_before_host\":true,\"force_pmi_jbh_password\":true,\"require_password_for_scheduling_new_meetings\":true,\"require_password_for_instant_meetings\":false,\"require_password_for_pmi_meetings\":false,\"pstn_password_protected\":true,\"mute_upon_entry\":false,\"upcoming_meeting_reminder\":true,\"meeting_authentication\":false,\"embed_password_in_join_link\":false,\"personal_meeting\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "in_meeting",
															"value": "{\"e2e_encryption\":true,\"chat\":false,\"private_chat\":true,\"auto_saving_chat\":true,\"entry_exit_chime\":\"Lorem no\",\"feedback\":false,\"post_meeting_feedback\":true,\"co_host\":true,\"polling\":false,\"attendee_on_hold\":false,\"show_meeting_control_toolbar\":false,\"allow_show_zoom_windows\":true,\"annotation\":false,\"whiteboard\":false,\"remote_control\":true,\"non_verbal_feedback\":false,\"breakout_room\":false,\"remote_support\":true,\"closed_caption\":false,\"far_end_camera_control\":false,\"group_hd\":false,\"virtual_background\":true,\"alert_guest_join\":true,\"auto_answer\":false,\"sending_default_email_invites\":false,\"use_html_format_email\":false,\"stereo_audio\":true,\"original_audio\":false,\"screen_sharing\":true,\"waiting_room\":false,\"show_browser_join_link\":true,\"show_a_join_from_your_browser_link\":false,\"custom_data_center_regions\":false,\"file_transfer\":false,\"request_permission_to_unmute\":true,\"webinar_question_answer\":false,\"allow_live_streaming\":true,\"webinar_live_streaming\":false,\"webinar_chat\":false,\"save_caption\":true,\"slide_control\":false,\"meeting_survey\":false,\"webinar_polling\":false,\"webinar_survey\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "email_notification",
															"value": "{\"cloud_recording_available_reminder\":true,\"jbh_reminder\":false,\"cancel_meeting_reminder\":true,\"alternative_host_reminder\":true,\"schedule_for_reminder\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "recording",
															"value": "{\"local_recording\":false,\"cloud_recording\":true,\"auto_recording\":\"sint enim do qu\",\"cloud_recording_download\":true,\"account_user_access_recording\":false,\"host_delete_cloud_recording\":true,\"auto_delete_cmr\":true,\"recording_authentication\":\"nostrud\",\"ip_address_access_control\":{\"enable\":false,\"ip_addresses_or_ranges\":\"voluptate ad\"}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "telephony",
															"value": "{\"third_party_audio\":true,\"telephony_regions\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "other_options",
															"value": "{\"blur_snapshot\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "audio_conferencing",
															"value": "{\"toll_free_and_fee_based_toll_call\":true}",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/lock_settings?option=culpa velit reprehenderit&custom_query_fields=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"lock_settings"
													],
													"query": [
														{
															"key": "option",
															"value": "culpa velit reprehenderit"
														},
														{
															"key": "custom_query_fields",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The Id of the group."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `200`<br>\nOnly available for paid account.\n",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "schedule_meeting",
															"value": "{\"host_video\":true,\"participant_video\":false,\"audio_type\":true,\"join_before_host\":true,\"force_pmi_jbh_password\":true,\"require_password_for_scheduling_new_meetings\":true,\"require_password_for_instant_meetings\":false,\"require_password_for_pmi_meetings\":false,\"pstn_password_protected\":true,\"mute_upon_entry\":false,\"upcoming_meeting_reminder\":true,\"meeting_authentication\":false,\"embed_password_in_join_link\":false,\"personal_meeting\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "in_meeting",
															"value": "{\"e2e_encryption\":true,\"chat\":false,\"private_chat\":true,\"auto_saving_chat\":true,\"entry_exit_chime\":\"Lorem no\",\"feedback\":false,\"post_meeting_feedback\":true,\"co_host\":true,\"polling\":false,\"attendee_on_hold\":false,\"show_meeting_control_toolbar\":false,\"allow_show_zoom_windows\":true,\"annotation\":false,\"whiteboard\":false,\"remote_control\":true,\"non_verbal_feedback\":false,\"breakout_room\":false,\"remote_support\":true,\"closed_caption\":false,\"far_end_camera_control\":false,\"group_hd\":false,\"virtual_background\":true,\"alert_guest_join\":true,\"auto_answer\":false,\"sending_default_email_invites\":false,\"use_html_format_email\":false,\"stereo_audio\":true,\"original_audio\":false,\"screen_sharing\":true,\"waiting_room\":false,\"show_browser_join_link\":true,\"show_a_join_from_your_browser_link\":false,\"custom_data_center_regions\":false,\"file_transfer\":false,\"request_permission_to_unmute\":true,\"webinar_question_answer\":false,\"allow_live_streaming\":true,\"webinar_live_streaming\":false,\"webinar_chat\":false,\"save_caption\":true,\"slide_control\":false,\"meeting_survey\":false,\"webinar_polling\":false,\"webinar_survey\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "email_notification",
															"value": "{\"cloud_recording_available_reminder\":true,\"jbh_reminder\":false,\"cancel_meeting_reminder\":true,\"alternative_host_reminder\":true,\"schedule_for_reminder\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "recording",
															"value": "{\"local_recording\":false,\"cloud_recording\":true,\"auto_recording\":\"sint enim do qu\",\"cloud_recording_download\":true,\"account_user_access_recording\":false,\"host_delete_cloud_recording\":true,\"auto_delete_cmr\":true,\"recording_authentication\":\"nostrud\",\"ip_address_access_control\":{\"enable\":false,\"ip_addresses_or_ranges\":\"voluptate ad\"}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "telephony",
															"value": "{\"third_party_audio\":true,\"telephony_regions\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "other_options",
															"value": "{\"blur_snapshot\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "audio_conferencing",
															"value": "{\"toll_free_and_fee_based_toll_call\":true}",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/lock_settings?option=culpa velit reprehenderit&custom_query_fields=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"lock_settings"
													],
													"query": [
														{
															"key": "option",
															"value": "culpa velit reprehenderit"
														},
														{
															"key": "custom_query_fields",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The Id of the group."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**Status Code:** `404`<br>\nNot found.<br>\n**Error Code:** `4130`<br>\nThis group does not exist.\n",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "schedule_meeting",
															"value": "{\"host_video\":true,\"participant_video\":false,\"audio_type\":true,\"join_before_host\":true,\"force_pmi_jbh_password\":true,\"require_password_for_scheduling_new_meetings\":true,\"require_password_for_instant_meetings\":false,\"require_password_for_pmi_meetings\":false,\"pstn_password_protected\":true,\"mute_upon_entry\":false,\"upcoming_meeting_reminder\":true,\"meeting_authentication\":false,\"embed_password_in_join_link\":false,\"personal_meeting\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "in_meeting",
															"value": "{\"e2e_encryption\":true,\"chat\":false,\"private_chat\":true,\"auto_saving_chat\":true,\"entry_exit_chime\":\"Lorem no\",\"feedback\":false,\"post_meeting_feedback\":true,\"co_host\":true,\"polling\":false,\"attendee_on_hold\":false,\"show_meeting_control_toolbar\":false,\"allow_show_zoom_windows\":true,\"annotation\":false,\"whiteboard\":false,\"remote_control\":true,\"non_verbal_feedback\":false,\"breakout_room\":false,\"remote_support\":true,\"closed_caption\":false,\"far_end_camera_control\":false,\"group_hd\":false,\"virtual_background\":true,\"alert_guest_join\":true,\"auto_answer\":false,\"sending_default_email_invites\":false,\"use_html_format_email\":false,\"stereo_audio\":true,\"original_audio\":false,\"screen_sharing\":true,\"waiting_room\":false,\"show_browser_join_link\":true,\"show_a_join_from_your_browser_link\":false,\"custom_data_center_regions\":false,\"file_transfer\":false,\"request_permission_to_unmute\":true,\"webinar_question_answer\":false,\"allow_live_streaming\":true,\"webinar_live_streaming\":false,\"webinar_chat\":false,\"save_caption\":true,\"slide_control\":false,\"meeting_survey\":false,\"webinar_polling\":false,\"webinar_survey\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "email_notification",
															"value": "{\"cloud_recording_available_reminder\":true,\"jbh_reminder\":false,\"cancel_meeting_reminder\":true,\"alternative_host_reminder\":true,\"schedule_for_reminder\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "recording",
															"value": "{\"local_recording\":false,\"cloud_recording\":true,\"auto_recording\":\"sint enim do qu\",\"cloud_recording_download\":true,\"account_user_access_recording\":false,\"host_delete_cloud_recording\":true,\"auto_delete_cmr\":true,\"recording_authentication\":\"nostrud\",\"ip_address_access_control\":{\"enable\":false,\"ip_addresses_or_ranges\":\"voluptate ad\"}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "telephony",
															"value": "{\"third_party_audio\":true,\"telephony_regions\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "other_options",
															"value": "{\"blur_snapshot\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "audio_conferencing",
															"value": "{\"toll_free_and_fee_based_toll_call\":true}",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/groups/:groupId/lock_settings?option=culpa velit reprehenderit&custom_query_fields=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":groupId",
														"lock_settings"
													],
													"query": [
														{
															"key": "option",
															"value": "culpa velit reprehenderit"
														},
														{
															"key": "custom_query_fields",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The Id of the group."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get a group",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/groups/:groupId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										":groupId"
									],
									"variable": [
										{
											"key": "groupId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
										}
									]
								},
								"description": "Get a [group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-) under an account.\n\n**Prerequisite**: Pro, Business, or Education account<br>\n**Scopes**: `group:read:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br> Group returned.<br>\n**Error Code:** `200`<br>\nOnly available for Paid account,{accountId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"chfhfhhfh_TKikJIX0\",\n \"name\": \"My test group\",\n \"total_members\": 0\n}"
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `1010`<br>\nGroup does not belong to your account.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nGroup not found.<br>\n**Error Code:** `4130`<br> A group with this {groupId} does not exist.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a group",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "Duis magna sint dolor qui",
											"description": "Group name. It must be unique to one account and less than 128 characters.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/groups/:groupId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										":groupId"
									],
									"variable": [
										{
											"key": "groupId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
										}
									]
								},
								"description": "Update a [group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-) under your account.\n\n**Prerequisite**: Pro, Business, or Education account<br>\n**Scopes**: `group:write:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "The group does not belong to this account:{accountId}.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "name",
													"value": "Duis magna sint dolor qui",
													"description": "Group name. It must be unique to one account and less than 128 characters.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Group updated.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "name",
													"value": "Duis magna sint dolor qui",
													"description": "Group name. It must be unique to one account and less than 128 characters.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Status Code:** `404`<br>\nNot found.<br>\n**Error Code:** `4130`<br>\nA group with this {groupId} does not exist.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "name",
													"value": "Duis magna sint dolor qui",
													"description": "Group name. It must be unique to one account and less than 128 characters.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Status Code:** `409`<br>\nConflict<br>\n**Error Code:** `4132`<br>\nGroup name {groupName} is already in use.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "name",
													"value": "Duis magna sint dolor qui",
													"description": "Group name. It must be unique to one account and less than 128 characters.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a group",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/groups/:groupId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										":groupId"
									],
									"variable": [
										{
											"key": "groupId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
										}
									]
								},
								"description": "Use this API to delete a [group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-).\n\n**Scopes:** `group:write:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* A Pro, Business, or Education account"
							},
							"response": [
								{
									"name": "**Error Code:** `200`<br>\nOnly available for Paid account,{accountId}.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `204`<br>\nGroup deleted.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Error Code:** `300`<br>\nGroup member not found.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nGroup not found.<br>\n**Error Code:** `4130`<br>\nA group with this {groupId} does not exist.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "List groups",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"groups"
							]
						},
						"description": "List [groups](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-) under an account.\n\n**Prerequisite**: Pro or higher account.<br>\n**Scopes**: `group:read:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nList of groups returned.<br>\n**Error Code:** `200`\nOnly available for paid accounts.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"total_records\": 2,\n \"groups\": [\n  {\n   \"id\": \"hFK_GtF_e_TaVA808\",\n   \"name\": \"ipsum\",\n   \"total_members\": 10\n  },\n  {\n   \"id\": \"TaVA8QKik_1233\",\n   \"name\": \"awesomegroup\",\n   \"total_members\": 0\n  }\n ]\n}"
						},
						{
							"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `4130`<br> A group with this {groupId} does not exist.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create a group",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "quis cillum eiusmod",
									"description": "Group name.",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"groups"
							]
						},
						"description": "Use this API to create a [group](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-). You can add a **maximum** of 100 groups in one account per day, and a maximum of 5000 groups in one account.\n\nIf you enabled a new group via the user interface, you can also choose whether to display the group and set its privacy level.\n\n**Scopes:** `group:write:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites**: \n* A Pro or higher account"
					},
					"response": [
						{
							"name": "**Error Code:** `200`<br>\nOnly available for Paid account,{accountId}",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "quis cillum eiusmod",
											"description": "Group name.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `201`<br>\nGroup created.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "quis cillum eiusmod",
											"description": "Group name.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Location",
									"value": "culpa velit reprehenderit",
									"description": "Location of created group"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"string\",\n \"name\": \"string\",\n \"total_members\": \"integer\"\n}"
						},
						{
							"name": "**Error Code:** `300`<br>\nMissing field: name.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "quis cillum eiusmod",
											"description": "Group name.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "Multiple Choices",
							"code": 300,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404`<br>**Error Code:** `4130`<br>A group with this {groupId} does not exist.\n\n\n\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "quis cillum eiusmod",
											"description": "Group name.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `409`<br> **Error Code:** `4132`<br> Group name {groupName} is already in use.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "quis cillum eiusmod",
											"description": "Group name.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `429`<br>\nYou have exceeded the daily rate limit ({0}) of Create a Group API request for this account. This limit resets at GMT 00:00:00.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "quis cillum eiusmod",
											"description": "Group name.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "h323/devices",
			"item": [
				{
					"name": "{device Id}",
					"item": [
						{
							"name": "Update a H.323/SIP device",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "dolor aliquip in qui",
											"description": "(Required) Device name.",
											"type": "text"
										},
										{
											"key": "protocol",
											"value": "SIP",
											"description": "(Required) Device protocol:<br>`H.323` - H.323.<br>`SIP` - SIP. (This can only be one of H.323,SIP)",
											"type": "text"
										},
										{
											"key": "ip",
											"value": "commodo aliquip dolor",
											"description": "(Required) Device IP.",
											"type": "text"
										},
										{
											"key": "encryption",
											"value": "yes",
											"description": "(Required) Device encryption:<br>`auto` - auto.<br>`yes` - yes.<br>`no` - no. (This can only be one of auto,yes,no)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/h323/devices/:deviceId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"h323",
										"devices",
										":deviceId"
									],
									"variable": [
										{
											"key": "deviceId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The device ID."
										}
									]
								},
								"description": "A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to edit information of a H.323/SIP device from your Zoom account.<br><br>\n**Scopes:** `h323:write:admin`<br>\n <br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204`<br>\nH.323/SIP device updated.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "name",
													"value": "dolor aliquip in qui",
													"description": "(Required) Device name.",
													"type": "text"
												},
												{
													"key": "protocol",
													"value": "SIP",
													"description": "(Required) Device protocol:<br>`H.323` - H.323.<br>`SIP` - SIP. (This can only be one of H.323,SIP)",
													"type": "text"
												},
												{
													"key": "ip",
													"value": "commodo aliquip dolor",
													"description": "(Required) Device IP.",
													"type": "text"
												},
												{
													"key": "encryption",
													"value": "yes",
													"description": "(Required) Device encryption:<br>`auto` - auto.<br>`yes` - yes.<br>`no` - no. (This can only be one of auto,yes,no)",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/h323/devices/:deviceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"h323",
												"devices",
												":deviceId"
											],
											"variable": [
												{
													"key": "deviceId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The device ID."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Error Code:** `300`<br>\nH.323 Device does not exist: {deviceId}.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "name",
													"value": "dolor aliquip in qui",
													"description": "(Required) Device name.",
													"type": "text"
												},
												{
													"key": "protocol",
													"value": "SIP",
													"description": "(Required) Device protocol:<br>`H.323` - H.323.<br>`SIP` - SIP. (This can only be one of H.323,SIP)",
													"type": "text"
												},
												{
													"key": "ip",
													"value": "commodo aliquip dolor",
													"description": "(Required) Device IP.",
													"type": "text"
												},
												{
													"key": "encryption",
													"value": "yes",
													"description": "(Required) Device encryption:<br>`auto` - auto.<br>`yes` - yes.<br>`no` - no. (This can only be one of auto,yes,no)",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/h323/devices/:deviceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"h323",
												"devices",
												":deviceId"
											],
											"variable": [
												{
													"key": "deviceId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The device ID."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `2020`<br>\nH.323 device's display name:{displayName} is already in use.\n",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "name",
													"value": "dolor aliquip in qui",
													"description": "(Required) Device name.",
													"type": "text"
												},
												{
													"key": "protocol",
													"value": "SIP",
													"description": "(Required) Device protocol:<br>`H.323` - H.323.<br>`SIP` - SIP. (This can only be one of H.323,SIP)",
													"type": "text"
												},
												{
													"key": "ip",
													"value": "commodo aliquip dolor",
													"description": "(Required) Device IP.",
													"type": "text"
												},
												{
													"key": "encryption",
													"value": "yes",
													"description": "(Required) Device encryption:<br>`auto` - auto.<br>`yes` - yes.<br>`no` - no. (This can only be one of auto,yes,no)",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/h323/devices/:deviceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"h323",
												"devices",
												":deviceId"
											],
											"variable": [
												{
													"key": "deviceId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The device ID."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a H.323/SIP device",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/h323/devices/:deviceId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"h323",
										"devices",
										":deviceId"
									],
									"variable": [
										{
											"key": "deviceId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The device ID."
										}
									]
								},
								"description": "A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to delete a H.323/SIP device from your Zoom account.<br><br>\n**Scopes:** `h323:write:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>"
							},
							"response": [
								{
									"name": "You do not have the permission to delete this device.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/h323/devices/:deviceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"h323",
												"devices",
												":deviceId"
											],
											"variable": [
												{
													"key": "deviceId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The device ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "H.323/SIP device deleted.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/h323/devices/:deviceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"h323",
												"devices",
												":deviceId"
											],
											"variable": [
												{
													"key": "deviceId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The device ID."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "H.323 device does not exist: {deviceId}.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/h323/devices/:deviceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"h323",
												"devices",
												":deviceId"
											],
											"variable": [
												{
													"key": "deviceId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The device ID."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "H.323/SIP device not found.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/h323/devices/:deviceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"h323",
												"devices",
												":deviceId"
											],
											"variable": [
												{
													"key": "deviceId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The device ID."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "List H.323/SIP devices",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/h323/devices?page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"h323",
								"devices"
							],
							"query": [
								{
									"key": "page_size",
									"value": "30",
									"description": "The number of records returned within a single API call."
								},
								{
									"key": "page_number",
									"value": "1",
									"description": "\n**Deprecated** - This field has been deprecated and we will stop supporting it completely in a future release. Please use \"next_page_token\" for pagination instead of this field.\n\nThe page number of the current page in the returned records."
								},
								{
									"key": "next_page_token",
									"value": "culpa velit reprehenderit",
									"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
								}
							]
						},
						"description": "A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to list all H.323/SIP Devices on a Zoom account.<br><br>\n**Scopes:** `h323:read:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nList of H.323/SIP devices returned.<br>\n**Error Code:** `200`<br>\nNo permission.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/h323/devices?page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"h323",
										"devices"
									],
									"query": [
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "page_number",
											"value": "1"
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"page_count\": 1,\n \"page_number\": 1,\n \"page_size\": 1,\n \"total_records\": 1,\n \"devices\": [\n  {\n   \"id\": \"abceHewahkrehwiK\",\n   \"name\": \"api_test_20190508\",\n   \"protocol\": \"H.323\",\n   \"ip\": \"127.0.0.1\",\n   \"encryption\": \"auto\"\n  }\n ]\n}"
						}
					]
				},
				{
					"name": "Create a H.323/SIP device",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "dolor aliquip in qui",
									"description": "(Required) Device name.",
									"type": "text"
								},
								{
									"key": "protocol",
									"value": "SIP",
									"description": "(Required) Device protocol:<br>`H.323` - H.323.<br>`SIP` - SIP. (This can only be one of H.323,SIP)",
									"type": "text"
								},
								{
									"key": "ip",
									"value": "commodo aliquip dolor",
									"description": "(Required) Device IP.",
									"type": "text"
								},
								{
									"key": "encryption",
									"value": "yes",
									"description": "(Required) Device encryption:<br>`auto` - auto.<br>`yes` - yes.<br>`no` - no. (This can only be one of auto,yes,no)",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/h323/devices",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"h323",
								"devices"
							]
						},
						"description": "A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to add a H.323/SIP device to your Zoom account<br><br>\n**Scopes:** `h323:write:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` <br>"
					},
					"response": [
						{
							"name": "**Error Code:** `200`<br>\nNo permission.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "dolor aliquip in qui",
											"description": "(Required) Device name.",
											"type": "text"
										},
										{
											"key": "protocol",
											"value": "SIP",
											"description": "(Required) Device protocol:<br>`H.323` - H.323.<br>`SIP` - SIP. (This can only be one of H.323,SIP)",
											"type": "text"
										},
										{
											"key": "ip",
											"value": "commodo aliquip dolor",
											"description": "(Required) Device IP.",
											"type": "text"
										},
										{
											"key": "encryption",
											"value": "yes",
											"description": "(Required) Device encryption:<br>`auto` - auto.<br>`yes` - yes.<br>`no` - no. (This can only be one of auto,yes,no)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/h323/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"h323",
										"devices"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `201`<br>\nH.323/SIP device created.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "dolor aliquip in qui",
											"description": "(Required) Device name.",
											"type": "text"
										},
										{
											"key": "protocol",
											"value": "SIP",
											"description": "(Required) Device protocol:<br>`H.323` - H.323.<br>`SIP` - SIP. (This can only be one of H.323,SIP)",
											"type": "text"
										},
										{
											"key": "ip",
											"value": "commodo aliquip dolor",
											"description": "(Required) Device IP.",
											"type": "text"
										},
										{
											"key": "encryption",
											"value": "yes",
											"description": "(Required) Device encryption:<br>`auto` - auto.<br>`yes` - yes.<br>`no` - no. (This can only be one of auto,yes,no)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/h323/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"h323",
										"devices"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Location",
									"value": "culpa velit reprehenderit",
									"description": "Location of created device"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"string\",\n \"name\": \"string\",\n \"protocol\": \"string\",\n \"ip\": \"string\",\n \"encryption\": \"string\"\n}"
						},
						{
							"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `2020`<br>\nH.323 device's display name:{displayName} is already in use.\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "dolor aliquip in qui",
											"description": "(Required) Device name.",
											"type": "text"
										},
										{
											"key": "protocol",
											"value": "SIP",
											"description": "(Required) Device protocol:<br>`H.323` - H.323.<br>`SIP` - SIP. (This can only be one of H.323,SIP)",
											"type": "text"
										},
										{
											"key": "ip",
											"value": "commodo aliquip dolor",
											"description": "(Required) Device IP.",
											"type": "text"
										},
										{
											"key": "encryption",
											"value": "yes",
											"description": "(Required) Device encryption:<br>`auto` - auto.<br>`yes` - yes.<br>`no` - no. (This can only be one of auto,yes,no)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/h323/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"h323",
										"devices"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "tracking fields",
			"item": [
				{
					"name": "{field Id}",
					"item": [
						{
							"name": "Get a tracking field",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tracking_fields/:fieldId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracking_fields",
										":fieldId"
									],
									"variable": [
										{
											"key": "fieldId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The Tracking Field ID"
										}
									]
								},
								"description": "Use this API to return information about a [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields). \n\n**Scopes:** `tracking_fields:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n**Prerequisites:** \n* A Business, Education, API or higher plan."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nTracking Field object returned",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/tracking_fields/:fieldId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tracking_fields",
												":fieldId"
											],
											"variable": [
												{
													"key": "fieldId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The Tracking Field ID"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"fdfgdfgr23gr1\",\n \"field\": \"Meeting Purpose\",\n \"required\": true,\n \"visible\": false,\n \"recommended_values\": [\n  \"Support\",\n  \"Onboarding\",\n  \"Sales\",\n  \"Other\"\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nTracking Field not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/tracking_fields/:fieldId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tracking_fields",
												":fieldId"
											],
											"variable": [
												{
													"key": "fieldId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The Tracking Field ID"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a tracking field",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "field",
											"value": "in tempor culpa",
											"description": "Label/ Name for the tracking field.",
											"type": "text"
										},
										{
											"key": "required",
											"value": "true",
											"description": "Tracking Field Required",
											"type": "text"
										},
										{
											"key": "visible",
											"value": "false",
											"description": "Tracking Field Visible",
											"type": "text"
										},
										{
											"key": "recommended_values",
											"value": "[\"ex sunt in\",\"deserunt dolor\"]",
											"description": "Array of recommended values",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/tracking_fields/:fieldId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracking_fields",
										":fieldId"
									],
									"variable": [
										{
											"key": "fieldId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The Tracking Field ID"
										}
									]
								},
								"description": "Use this API to update a [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields). \n\n**Scope:** `tracking_fields:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n**Prerequisites:** \n* A Business, Education, API or higher plan."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204`<br>\nTracking Field updated",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "field",
													"value": "dolore sunt aliqua",
													"description": "Label/ Name for the tracking field.",
													"type": "text"
												},
												{
													"key": "required",
													"value": "false",
													"description": "Tracking Field Required",
													"type": "text"
												},
												{
													"key": "visible",
													"value": "false",
													"description": "Tracking Field Visible",
													"type": "text"
												},
												{
													"key": "recommended_values",
													"value": "[\"amet sit proident\",\"aute non ea\"]",
													"description": "Array of recommended values",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/tracking_fields/:fieldId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tracking_fields",
												":fieldId"
											],
											"variable": [
												{
													"key": "fieldId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The Tracking Field ID"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nTracking Field not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "field",
													"value": "dolore sunt aliqua",
													"description": "Label/ Name for the tracking field.",
													"type": "text"
												},
												{
													"key": "required",
													"value": "false",
													"description": "Tracking Field Required",
													"type": "text"
												},
												{
													"key": "visible",
													"value": "false",
													"description": "Tracking Field Visible",
													"type": "text"
												},
												{
													"key": "recommended_values",
													"value": "[\"amet sit proident\",\"aute non ea\"]",
													"description": "Array of recommended values",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/tracking_fields/:fieldId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tracking_fields",
												":fieldId"
											],
											"variable": [
												{
													"key": "fieldId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The Tracking Field ID"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a tracking field",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tracking_fields/:fieldId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracking_fields",
										":fieldId"
									],
									"variable": [
										{
											"key": "fieldId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The Tracking Field ID"
										}
									]
								},
								"description": "Use this API to delete a [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields). \n\n**Scope:** `tracking_fields:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n**Prerequisites:** \n* A Business, Education, API or higher plan."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204`<br>\nTracking Field deleted",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/tracking_fields/:fieldId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tracking_fields",
												":fieldId"
											],
											"variable": [
												{
													"key": "fieldId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The Tracking Field ID"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nTracking Field not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/tracking_fields/:fieldId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tracking_fields",
												":fieldId"
											],
											"variable": [
												{
													"key": "fieldId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The Tracking Field ID"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "List tracking fields",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tracking_fields",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tracking_fields"
							]
						},
						"description": "Use this API to list all the [tracking fields](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) on your Zoom account. Tracking fields let you analyze usage by various fields within an organization. \n\n**Scopes:** `tracking_fields:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` \n\n**Prerequisites:** \n* A Business, Education, API or higher plan."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nList of Tracking Fields returned.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tracking_fields",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracking_fields"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"{\\n  \\\"total_records\\\": 1,\\n  \\\"tracking_fields\\\": [\\n  {\\n  \\\"id\\\": \\\"3746374637\\\",\\n  \\\"field\\\": \\\"Meeting Purpose\\\",\\n  \\\"required\\\": true,\\n  \\\"visible\\\": false,\\n  \\\"recommended_values\\\": [\\n    \\\"Support\\\",\\n    \\\"Onboarding\\\",\\n    \\\"Sales\\\",\\n    \\\"Other\\\"\\n  ]\\n}\\n}\""
						}
					]
				},
				{
					"name": "Create a tracking field",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "field",
									"value": "in tempor culpa",
									"description": "Label/ Name for the tracking field.",
									"type": "text"
								},
								{
									"key": "required",
									"value": "true",
									"description": "Tracking Field Required",
									"type": "text"
								},
								{
									"key": "visible",
									"value": "false",
									"description": "Tracking Field Visible",
									"type": "text"
								},
								{
									"key": "recommended_values",
									"value": "[\"ex sunt in\",\"deserunt dolor\"]",
									"description": "Array of recommended values",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/tracking_fields",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tracking_fields"
							]
						},
						"description": "Use this API to create a new [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields). Tracking fields let you analyze usage by various fields within an organization. When scheduling a meeting, tracking fields will be included in the meeting options. \n\n**Scope:** `tracking_fields:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n**Prerequisites:** \n* A Business, Education, API or higher plan."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `201`<br>\nTracking Field created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "field",
											"value": "dolore sunt aliqua",
											"description": "Label/ Name for the tracking field.",
											"type": "text"
										},
										{
											"key": "required",
											"value": "false",
											"description": "Tracking Field Required",
											"type": "text"
										},
										{
											"key": "visible",
											"value": "false",
											"description": "Tracking Field Visible",
											"type": "text"
										},
										{
											"key": "recommended_values",
											"value": "[\"amet sit proident\",\"aute non ea\"]",
											"description": "Array of recommended values",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/tracking_fields",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tracking_fields"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Location",
									"value": "culpa velit reprehenderit",
									"description": "Location of created tracking field"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"cillum sunt commodo\",\n \"field\": \"ut nostrud ad reprehenderit qui\",\n \"required\": true,\n \"visible\": true,\n \"recommended_values\": [\n  \"mollit cillum sed dolor\",\n  \"minim anim aute\"\n ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "im",
			"item": [
				{
					"name": "groups",
					"item": [
						{
							"name": "{group Id}",
							"item": [
								{
									"name": "members",
									"item": [
										{
											"name": "List IM directory group members",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/im/groups/:groupId/members?page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"groups",
														":groupId",
														"members"
													],
													"query": [
														{
															"key": "page_size",
															"value": "30",
															"description": "The number of records returned within a single API call."
														},
														{
															"key": "page_number",
															"value": "1",
															"description": "\n**Deprecated** - This field has been deprecated and we will stop supporting it completely in a future release. Please use \"next_page_token\" for pagination instead of this field.\n\nThe page number of the current page in the returned records."
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit",
															"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
														}
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														}
													]
												},
												"description": "List the members of an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management).<br><br>\n**Scope:** `imgroup:read:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200` <br>\nIM group member list returned.<br>\n**Error Code:** `200` <br> \nOnly available for paid account:{accountId}.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/im/groups/:groupId/members?page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"im",
																"groups",
																":groupId",
																"members"
															],
															"query": [
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "page_number",
																	"value": "1"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"page_count\": \"1\",\n \"page_number\": \"1\",\n \"page_size\": \"1\",\n \"total_records\": \"1\",\n \"members\": [\n  {\n   \"id\": \"dlfjdhq3430394\",\n   \"email\": \"example@example.com\",\n   \"first_name\": \"Rahul\",\n   \"last_name\": \"Ghimire\",\n   \"type\": \"2\"\n  }\n ]\n}"
												},
												{
													"name": "**Error Code:** `300` <br>\nMissing field: name.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/im/groups/:groupId/members?page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"im",
																"groups",
																":groupId",
																"members"
															],
															"query": [
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "page_number",
																	"value": "1"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
																}
															]
														}
													},
													"status": "Multiple Choices",
													"code": 300,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` <br>\nIM Group not found.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/im/groups/:groupId/members?page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"im",
																"groups",
																":groupId",
																"members"
															],
															"query": [
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "page_number",
																	"value": "1"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Add IM directory group members",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "members",
															"value": "[{\"id\":\"incididunt quis in\",\"email\":\"eiusmod in\"},{\"id\":\"minim velit Duis elit ea\",\"email\":\"quis voluptate laboris\"}]",
															"description": "List of IM group members.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/im/groups/:groupId/members",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"groups",
														":groupId",
														"members"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														}
													]
												},
												"description": "Add members to an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under an account.<br><br>\n**Scope:** `imgroup:write:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
											},
											"response": [
												{
													"name": "**Error Code:** `200` <br>\nOnly available for paid account:{accountId}.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "members",
																	"value": "[{\"id\":\"Lorem\",\"email\":\"dolore nostrud non eu\"},{\"id\":\"incididunt cupidatat pariatur elit\",\"email\":\"consequat non\"}]",
																	"description": "List of IM group members.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/im/groups/:groupId/members",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"im",
																"groups",
																":groupId",
																"members"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `201` <br>\nMember added.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "members",
																	"value": "[{\"id\":\"Lorem\",\"email\":\"dolore nostrud non eu\"},{\"id\":\"incididunt cupidatat pariatur elit\",\"email\":\"consequat non\"}]",
																	"description": "List of IM group members.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/im/groups/:groupId/members",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"im",
																"groups",
																":groupId",
																"members"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"ids\": \"string\",\n \"added_at\": \"string [date-time]\"\n}"
												},
												{
													"name": "**Error Code:** `300` <br>\nMissing field: name.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "members",
																	"value": "[{\"id\":\"Lorem\",\"email\":\"dolore nostrud non eu\"},{\"id\":\"incididunt cupidatat pariatur elit\",\"email\":\"consequat non\"}]",
																	"description": "List of IM group members.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/im/groups/:groupId/members",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"im",
																"groups",
																":groupId",
																"members"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
																}
															]
														}
													},
													"status": "Multiple Choices",
													"code": 300,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` <br>\nIM Group not found",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "members",
																	"value": "[{\"id\":\"Lorem\",\"email\":\"dolore nostrud non eu\"},{\"id\":\"incididunt cupidatat pariatur elit\",\"email\":\"consequat non\"}]",
																	"description": "List of IM group members.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/im/groups/:groupId/members",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"im",
																"groups",
																":groupId",
																"members"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Delete IM directory group member",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/im/groups/:groupId/members/:memberId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"groups",
														":groupId",
														"members",
														":memberId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														},
														{
															"key": "memberId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The member ID."
														}
													]
												},
												"description": "Delete a member from an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under an account.<br><br>\nScopes: `imgroup:write:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
											},
											"response": [
												{
													"name": "**Error Code:** `200` <br>\nOnly available for paid account, {accountId}.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/im/groups/:groupId/members/:memberId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"im",
																"groups",
																":groupId",
																"members",
																":memberId"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
																},
																{
																	"key": "memberId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The member ID."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `204` <br>\nIM group member deleted.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/im/groups/:groupId/members/:memberId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"im",
																"groups",
																":groupId",
																"members",
																":memberId"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
																},
																{
																	"key": "memberId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The member ID."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**Error Code:** `300` <br>\nMissing field: name.<br>\nCan not delete account from default group:{groupId}.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/im/groups/:groupId/members/:memberId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"im",
																"groups",
																":groupId",
																"members",
																":memberId"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
																},
																{
																	"key": "memberId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The member ID."
																}
															]
														}
													},
													"status": "Multiple Choices",
													"code": 300,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` <br>\nIM Group or IM Group member not found.<br>\n**Error Code:** `4130` <br>\nGroup does not exist:{groupId}.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/im/groups/:groupId/members/:memberId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"im",
																"groups",
																":groupId",
																"members",
																":memberId"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
																},
																{
																	"key": "memberId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The member ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Retrieve an IM directory group",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/im/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
												}
											]
										},
										"description": "Retrieve an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under your account.<br><br>\nScopes: `imgroup:read:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` "
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` <br>\nIM group object returned.<br>\n**Error Code:** `200` <br>\nOnly available for paid account:{accountId}.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/im/groups/:groupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"groups",
														":groupId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"string\",\n \"name\": \"string\",\n \"total_members\": \"integer\",\n \"type\": \"string\",\n \"search_by_domain\": \"boolean\",\n \"search_by_account\": \"boolean\",\n \"search_by_ma_account\": \"boolean\"\n}"
										},
										{
											"name": "**Error Code:** `300` <br>\nMissing field: name.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/im/groups/:groupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"groups",
														":groupId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** <br>\nIM Group not found.<br>\n**Error Code:** `4130` <br>\nGroup does not exist:{groupId}.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/im/groups/:groupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"groups",
														":groupId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update an IM directory group",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "name",
													"value": "anim eu quis",
													"description": "Group name: must be unique to one account.",
													"type": "text"
												},
												{
													"key": "type",
													"value": "normal",
													"description": "IM Group types:<br>`normal` - Only group members can automatically see others in their group. Other people can search for members in the group.<br>`shared` - Everyone under the account can see the group and members automatically.<br>`restricted` - Nobody can see the group or search for members except for the members in the group. (This can only be one of normal,shared,restricted)",
													"type": "text"
												},
												{
													"key": "search_by_domain",
													"value": "true",
													"description": "Members can search for others in the same email domain.",
													"type": "text"
												},
												{
													"key": "search_by_account",
													"value": "false",
													"description": "Members can search for others under same account.",
													"type": "text"
												},
												{
													"key": "search_by_ma_account",
													"value": "false",
													"description": "Members can search for others under same master account, including all sub accounts.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/im/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
												}
											]
										},
										"description": "Update an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under your account.<br><br>\n**Scopes**: `imgroup:write:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` <br>\nIM group updated.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"value": "anim eu quis",
															"description": "Group name: must be unique to one account.",
															"type": "text"
														},
														{
															"key": "type",
															"value": "normal",
															"description": "IM Group types:<br>`normal` - Only group members can automatically see others in their group. Other people can search for members in the group.<br>`shared` - Everyone under the account can see the group and members automatically.<br>`restricted` - Nobody can see the group or search for members except for the members in the group. (This can only be one of normal,shared,restricted)",
															"type": "text"
														},
														{
															"key": "search_by_domain",
															"value": "true",
															"description": "Members can search for others in the same email domain.",
															"type": "text"
														},
														{
															"key": "search_by_account",
															"value": "false",
															"description": "Members can search for others under same account.",
															"type": "text"
														},
														{
															"key": "search_by_ma_account",
															"value": "false",
															"description": "Members can search for others under same master account, including all sub accounts.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/im/groups/:groupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"groups",
														":groupId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**Error Code:** `300` <br>\nMissing field: name",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"value": "anim eu quis",
															"description": "Group name: must be unique to one account.",
															"type": "text"
														},
														{
															"key": "type",
															"value": "normal",
															"description": "IM Group types:<br>`normal` - Only group members can automatically see others in their group. Other people can search for members in the group.<br>`shared` - Everyone under the account can see the group and members automatically.<br>`restricted` - Nobody can see the group or search for members except for the members in the group. (This can only be one of normal,shared,restricted)",
															"type": "text"
														},
														{
															"key": "search_by_domain",
															"value": "true",
															"description": "Members can search for others in the same email domain.",
															"type": "text"
														},
														{
															"key": "search_by_account",
															"value": "false",
															"description": "Members can search for others under same account.",
															"type": "text"
														},
														{
															"key": "search_by_ma_account",
															"value": "false",
															"description": "Members can search for others under same master account, including all sub accounts.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/im/groups/:groupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"groups",
														":groupId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\nIM Group not found.\n**Error Code:** `4130`<br>\nGroup does not exist:{groupId}.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"value": "anim eu quis",
															"description": "Group name: must be unique to one account.",
															"type": "text"
														},
														{
															"key": "type",
															"value": "normal",
															"description": "IM Group types:<br>`normal` - Only group members can automatically see others in their group. Other people can search for members in the group.<br>`shared` - Everyone under the account can see the group and members automatically.<br>`restricted` - Nobody can see the group or search for members except for the members in the group. (This can only be one of normal,shared,restricted)",
															"type": "text"
														},
														{
															"key": "search_by_domain",
															"value": "true",
															"description": "Members can search for others in the same email domain.",
															"type": "text"
														},
														{
															"key": "search_by_account",
															"value": "false",
															"description": "Members can search for others under same account.",
															"type": "text"
														},
														{
															"key": "search_by_ma_account",
															"value": "false",
															"description": "Members can search for others under same master account, including all sub accounts.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/im/groups/:groupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"groups",
														":groupId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete an IM directory group",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/im/groups/:groupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"groups",
												":groupId"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
												}
											]
										},
										"description": "Delete an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under your account.<br><br>\nScopes: `imgroup:write:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` <br>\nIM group deleted.\n\n",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/im/groups/:groupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"groups",
														":groupId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**Error Code:** `300` <br>\nMissing field: name.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/im/groups/:groupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"groups",
														":groupId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\nIM Group not found.\n**Error Code:** `4130` <br>\nGroup does not exist:{groupId}.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/im/groups/:groupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"groups",
														":groupId"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The group ID.<br>\nCan be retrieved by calling [GET /groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups)."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "List IM directory groups",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/im/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"im",
										"groups"
									]
								},
								"description": "List [IM directory groups](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management).<br><br>\n**Scopes**: `imgroup:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` <br>\nList of groups returned.\n**Error Code:** `200` <br>\nList of IM groups returned.<br>\nOnly available for paid account:{accountId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/im/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"groups"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"page_count\": \"1\",\n \"page_number\": \"1\",\n \"page_size\": \"1\",\n \"total_records\": \"1\",\n \"groups\": [\n  {\n   \"id\": \"sjvfkjfew34535\",\n   \"name\": \"MyAdminDirectoryGroup\",\n   \"total_members\": \"10\",\n   \"type\": \"shared\",\n   \"search_by_domain\": \"true\",\n   \"search_by_account\": \"false\",\n   \"search_by_ma_account\": \"false\"\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `404` <br>\n**Error Code:** `4130` <br>\nGroup does not exist:{groupId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/im/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"groups"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create an IM directory group",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "dolore",
											"description": "Group name: must be unique to one account.",
											"type": "text"
										},
										{
											"key": "type",
											"value": "normal",
											"description": "IM Group types:<br>`normal` - Only members can see automatically see the other members of this group. Other people can search for members within this group. <br>`shared` - Everyone under an account can see the group members automatically.<br>`restricted` - Nobody can see the group or search for members except the members in the group. (This can only be one of normal,shared,restricted)",
											"type": "text"
										},
										{
											"key": "search_by_domain",
											"value": "false",
											"description": "Members can search for others in the same email domain.",
											"type": "text"
										},
										{
											"key": "search_by_account",
											"value": "true",
											"description": "Members can search for others under same account.",
											"type": "text"
										},
										{
											"key": "search_by_ma_account",
											"value": "true",
											"description": "Members can search for others under same master account, including all sub accounts.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/im/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"im",
										"groups"
									]
								},
								"description": "Create an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under your account.<br><br>\n**Scopes**: `imgroup:write:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**Error Code:** `200` <br>\nOnly available for paid account:{accountId}.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "name",
													"value": "dolore",
													"description": "Group name: must be unique to one account.",
													"type": "text"
												},
												{
													"key": "type",
													"value": "normal",
													"description": "IM Group types:<br>`normal` - Only members can see automatically see the other members of this group. Other people can search for members within this group. <br>`shared` - Everyone under an account can see the group members automatically.<br>`restricted` - Nobody can see the group or search for members except the members in the group. (This can only be one of normal,shared,restricted)",
													"type": "text"
												},
												{
													"key": "search_by_domain",
													"value": "false",
													"description": "Members can search for others in the same email domain.",
													"type": "text"
												},
												{
													"key": "search_by_account",
													"value": "true",
													"description": "Members can search for others under same account.",
													"type": "text"
												},
												{
													"key": "search_by_ma_account",
													"value": "true",
													"description": "Members can search for others under same master account, including all sub accounts.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/im/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"groups"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `201`<br>\nIM Group created.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "name",
													"value": "dolore",
													"description": "Group name: must be unique to one account.",
													"type": "text"
												},
												{
													"key": "type",
													"value": "normal",
													"description": "IM Group types:<br>`normal` - Only members can see automatically see the other members of this group. Other people can search for members within this group. <br>`shared` - Everyone under an account can see the group members automatically.<br>`restricted` - Nobody can see the group or search for members except the members in the group. (This can only be one of normal,shared,restricted)",
													"type": "text"
												},
												{
													"key": "search_by_domain",
													"value": "false",
													"description": "Members can search for others in the same email domain.",
													"type": "text"
												},
												{
													"key": "search_by_account",
													"value": "true",
													"description": "Members can search for others under same account.",
													"type": "text"
												},
												{
													"key": "search_by_ma_account",
													"value": "true",
													"description": "Members can search for others under same master account, including all sub accounts.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/im/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"groups"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Location",
											"value": "culpa velit reprehenderit",
											"description": "Location of created IM Group"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "**HTTP Status Code:** `404` <br>\n**Error Code:** `4130` <br>\nGroup does not exist:{groupId}.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "name",
													"value": "dolore",
													"description": "Group name: must be unique to one account.",
													"type": "text"
												},
												{
													"key": "type",
													"value": "normal",
													"description": "IM Group types:<br>`normal` - Only members can see automatically see the other members of this group. Other people can search for members within this group. <br>`shared` - Everyone under an account can see the group members automatically.<br>`restricted` - Nobody can see the group or search for members except the members in the group. (This can only be one of normal,shared,restricted)",
													"type": "text"
												},
												{
													"key": "search_by_domain",
													"value": "false",
													"description": "Members can search for others in the same email domain.",
													"type": "text"
												},
												{
													"key": "search_by_account",
													"value": "true",
													"description": "Members can search for others under same account.",
													"type": "text"
												},
												{
													"key": "search_by_ma_account",
													"value": "true",
													"description": "Members can search for others under same master account, including all sub accounts.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/im/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"groups"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `409` <br>\n**Error Code:** `4132` <br>\nGroup name {groupName} is already in use.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "name",
													"value": "dolore",
													"description": "Group name: must be unique to one account.",
													"type": "text"
												},
												{
													"key": "type",
													"value": "normal",
													"description": "IM Group types:<br>`normal` - Only members can see automatically see the other members of this group. Other people can search for members within this group. <br>`shared` - Everyone under an account can see the group members automatically.<br>`restricted` - Nobody can see the group or search for members except the members in the group. (This can only be one of normal,shared,restricted)",
													"type": "text"
												},
												{
													"key": "search_by_domain",
													"value": "false",
													"description": "Members can search for others in the same email domain.",
													"type": "text"
												},
												{
													"key": "search_by_account",
													"value": "true",
													"description": "Members can search for others under same account.",
													"type": "text"
												},
												{
													"key": "search_by_ma_account",
													"value": "true",
													"description": "Members can search for others under same master account, including all sub accounts.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/im/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"groups"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "chat",
					"item": [
						{
							"name": "sessions",
							"item": [
								{
									"name": "Get IM chat sessions",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/im/chat/sessions?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"chat",
												"sessions"
											],
											"query": [
												{
													"key": "from",
													"value": "1948-05-09",
													"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
												},
												{
													"key": "to",
													"value": "1948-05-09",
													"description": "(Required) End date."
												},
												{
													"key": "page_size",
													"value": "30",
													"description": "The number of records returned within a single API call."
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit",
													"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
												}
											]
										},
										"description": "Retrieve IM Chat sessions for a specified period of time. This API only supports Oauth2.<br>\n\t\n**Scopes:** `imchat:read, imchat:read:admin`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`\n <br><br>\n  <p style=\"background-color:#e1f5fe; color:#000000; padding:8px\"><b>Deprecated:</b> By end of 2021, Zoom is deprecating this API in favor of a consolidated set of APIs. The API will still be available for you to use, though Zoom will no longer provide support for it. For further information, see <a href=\"https://marketplace.zoom.us/docs/guides/stay-up-to-date/announcements#im-api-notice\">Announcements: IM APIs Deprecation</a>.</p>\n \n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` <br>\nArchived IM chat sessions returned.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/im/chat/sessions?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"chat",
														"sessions"
													],
													"query": [
														{
															"key": "from",
															"value": "1948-05-09"
														},
														{
															"key": "to",
															"value": "1948-05-09"
														},
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"from\": \"2019-08-31\",\n \"to\": \"2019-09-12\",\n \"page_size\": 30,\n \"next_page_token\": \"vsdfjesfdhs\",\n \"sessions\": [\n  {\n   \"session_id\": \"dkhfgjd\",\n   \"type\": \"Group\",\n   \"name\": \"API overview meeting\",\n   \"last_message_sent_time\": \"2016-12-16T05:04:08.470Z\"\n  }\n ]\n}"
										},
										{
											"name": "**Error Code:** `300` <br>\nThe next page token is invalid or expired. <br>\nReport requested exceeds 6 month limit.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/im/chat/sessions?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"chat",
														"sessions"
													],
													"query": [
														{
															"key": "from",
															"value": "1948-05-09"
														},
														{
															"key": "to",
															"value": "1948-05-09"
														},
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit"
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get IM chat messages",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/im/chat/sessions/:sessionId?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"chat",
												"sessions",
												":sessionId"
											],
											"query": [
												{
													"key": "from",
													"value": "1948-05-09",
													"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
												},
												{
													"key": "to",
													"value": "1948-05-09",
													"description": "(Required) End date."
												},
												{
													"key": "page_size",
													"value": "30",
													"description": "The number of records returned within a single API call."
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit",
													"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
												}
											],
											"variable": [
												{
													"key": "sessionId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Chat session ID."
												}
											]
										},
										"description": "Retrieve IM chat messages for a specified period of time. This API only supports oauth2.<br>\n\n**Scopes:** `imchat:read`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n \n <br>\n \n <p style=\"background-color:#e1f5fe; color:#000000; padding:8px\"><b>Deprecated:</b> By end of 2021, Zoom is deprecating this API in favor of a consolidated set of APIs. The API will still be available for you to use, though Zoom will no longer provide support for it. For further information, see <a href=\"https://marketplace.zoom.us/docs/guides/stay-up-to-date/announcements#im-api-notice\">Announcements: IM APIs Deprecation</a>.</p>\n\n\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` <br>\nArchived IM chat messages returned.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/im/chat/sessions/:sessionId?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"chat",
														"sessions",
														":sessionId"
													],
													"query": [
														{
															"key": "from",
															"value": "1948-05-09"
														},
														{
															"key": "to",
															"value": "1948-05-09"
														},
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "sessionId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Chat session ID."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"session_id\": \"string\",\n \"from\": \"string [date]\",\n \"to\": \"string [date]\",\n \"page_size\": \"integer\",\n \"next_page_token\": \"string\",\n \"messages\": [\n  {\n   \"message\": \"string\",\n   \"sender\": \"string\",\n   \"date_time\": \"string [date-time]\",\n   \"action\": \"string\",\n   \"action_time\": \"string [date-time]\"\n  }\n ]\n}"
										},
										{
											"name": "**Error Code:**`300` <br>\nThe next page token is either invalid or has expired.<br>\nReport requested exceeds 6 month limit.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/im/chat/sessions/:sessionId?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"chat",
														"sessions",
														":sessionId"
													],
													"query": [
														{
															"key": "from",
															"value": "1948-05-09"
														},
														{
															"key": "to",
															"value": "1948-05-09"
														},
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "sessionId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Chat session ID."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "messages",
							"item": [
								{
									"name": "{message id}",
									"item": [
										{
											"name": "Edit a chatbot message",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "robot_jid",
															"value": "cil",
															"description": "(Required) Robot JID created when enabling chatbot features on your marketplace app.",
															"type": "text"
														},
														{
															"key": "account_id",
															"value": "dolore proident cupidatat",
															"description": "(Required) The AccountID of the Zoom account to which the message was sent. Retrieve this from the Chatbot request sent to your server as shown in the example [here]( https://marketplace.zoom.us/docs/guides/chatbots/sending-messages).",
															"type": "text"
														},
														{
															"key": "content",
															"value": "{}",
															"description": "(Required) JSON template describing how the edited message should be displayed for the user. For more information please see our [\"Send Message\" templates](https://marketplace.zoom.us/docs/guides/chatbots/sending-messages#example-request).",
															"type": "text"
														},
														{
															"key": "user_jid",
															"value": "est officia",
															"description": "**Optional**<br>\nThe UserJID of the user on whose behalf the message is being sent. Use this field to prevent members of a channel from getting notifications that were set up by a user who has left the channel.",
															"type": "text"
														},
														{
															"key": "is_markdown_support",
															"value": "false",
															"description": "**Optional**<br>\nEnable or disable markdown parser to your chatbot message. Applies the markdown parser to your chatbot message if the value of this field is set to `true`.<br> To learn more, refer to the Chatbot message [markdown reference](https://marketplace.zoom.us/docs/guides/chatbots/customizing-messages/message-with-markdown).",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/im/chat/messages/:message_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"chat",
														"messages",
														":message_id"
													],
													"variable": [
														{
															"key": "message_id",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Unique Identifier of the message that needs to be updated. This should be retrieved from the response of [Send Chatbot Message API](https://marketplace.zoom.us/docs/api-reference/zoom-api/im-chat/sendchatbot)."
														}
													]
												},
												"description": "Edit a message that was [sent](https://marketplace.zoom.us/docs/api-reference/zoom-api/im-chat/sendchatbot) by your Chatbot app.<br> After sending a message using the Send Chatbot Message API, you must store the messageId returned in the response so that you can make edits to the associated message using this API.\n\n**Scope:** `imchat:bot`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n**Authorization Flow**: Client Credentials Flow<br><br>\nTo get authorized, make a POST request to `/oauth/token` endpoint with grant type as `client_credentials`. <br>Use `https://api.zoom.us/oauth/token?grant_type=client_credentials` as the endpoint for the request. \nYou will need to send your ClientID and Secret as a Basic base64 encoded AUthorization header. Ex. `Basic base64Encode({client_id}:{client_sceret})`<br><br> Next, use the token received (access_token) as a bearer token while making the PUT /im/chat/messages/{message_id} request to edit a chatbot message.<br><br>\nLearn more about how to authotize chatbots in the [Chatbot Authorization](https://marketplace.zoom.us/docs/guides/chatbots/authorization) guide."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200` **OK**<br>\nMessage updated.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "robot_jid",
																	"value": "cil",
																	"description": "(Required) Robot JID created when enabling chatbot features on your marketplace app.",
																	"type": "text"
																},
																{
																	"key": "account_id",
																	"value": "dolore proident cupidatat",
																	"description": "(Required) The AccountID of the Zoom account to which the message was sent. Retrieve this from the Chatbot request sent to your server as shown in the example [here]( https://marketplace.zoom.us/docs/guides/chatbots/sending-messages).",
																	"type": "text"
																},
																{
																	"key": "content",
																	"value": "{}",
																	"description": "(Required) JSON template describing how the edited message should be displayed for the user. For more information please see our [\"Send Message\" templates](https://marketplace.zoom.us/docs/guides/chatbots/sending-messages#example-request).",
																	"type": "text"
																},
																{
																	"key": "user_jid",
																	"value": "est officia",
																	"description": "**Optional**<br>\nThe UserJID of the user on whose behalf the message is being sent. Use this field to prevent members of a channel from getting notifications that were set up by a user who has left the channel.",
																	"type": "text"
																},
																{
																	"key": "is_markdown_support",
																	"value": "false",
																	"description": "**Optional**<br>\nEnable or disable markdown parser to your chatbot message. Applies the markdown parser to your chatbot message if the value of this field is set to `true`.<br> To learn more, refer to the Chatbot message [markdown reference](https://marketplace.zoom.us/docs/guides/chatbots/customizing-messages/message-with-markdown).",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/im/chat/messages/:message_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"im",
																"chat",
																"messages",
																":message_id"
															],
															"variable": [
																{
																	"key": "message_id",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique Identifier of the message that needs to be updated. This should be retrieved from the response of [Send Chatbot Message API](https://marketplace.zoom.us/docs/api-reference/zoom-api/im-chat/sendchatbot)."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message_id\": \"201910tryyRFjM_main\",\n \"robot_jid\": \"v1pky3tyBBB5pl8q@xmpp.zoom.us\",\n \"sent_time\": \"2019-10-17 01:40:24\",\n \"to_jid\": \"xghfd@shj.zoom.us\",\n \"user_jid\": \"jnrgfjp6w@xmpp.zoom.us\"\n}"
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `8001`<br>\nInvalid message_id",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "robot_jid",
																	"value": "cil",
																	"description": "(Required) Robot JID created when enabling chatbot features on your marketplace app.",
																	"type": "text"
																},
																{
																	"key": "account_id",
																	"value": "dolore proident cupidatat",
																	"description": "(Required) The AccountID of the Zoom account to which the message was sent. Retrieve this from the Chatbot request sent to your server as shown in the example [here]( https://marketplace.zoom.us/docs/guides/chatbots/sending-messages).",
																	"type": "text"
																},
																{
																	"key": "content",
																	"value": "{}",
																	"description": "(Required) JSON template describing how the edited message should be displayed for the user. For more information please see our [\"Send Message\" templates](https://marketplace.zoom.us/docs/guides/chatbots/sending-messages#example-request).",
																	"type": "text"
																},
																{
																	"key": "user_jid",
																	"value": "est officia",
																	"description": "**Optional**<br>\nThe UserJID of the user on whose behalf the message is being sent. Use this field to prevent members of a channel from getting notifications that were set up by a user who has left the channel.",
																	"type": "text"
																},
																{
																	"key": "is_markdown_support",
																	"value": "false",
																	"description": "**Optional**<br>\nEnable or disable markdown parser to your chatbot message. Applies the markdown parser to your chatbot message if the value of this field is set to `true`.<br> To learn more, refer to the Chatbot message [markdown reference](https://marketplace.zoom.us/docs/guides/chatbots/customizing-messages/message-with-markdown).",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/im/chat/messages/:message_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"im",
																"chat",
																"messages",
																":message_id"
															],
															"variable": [
																{
																	"key": "message_id",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) Unique Identifier of the message that needs to be updated. This should be retrieved from the response of [Send Chatbot Message API](https://marketplace.zoom.us/docs/api-reference/zoom-api/im-chat/sendchatbot)."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Delete a chatbot message",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "robot_jid",
															"value": "Excepteur officia",
															"description": "(Required) The BotJID found in the Chat Subscription Section on the Features page of your App Dashboard.",
															"type": "text"
														},
														{
															"key": "account_id",
															"value": "nisi occa",
															"description": "(Required) The AccountID of the Zoom account to which the message was sent. Retrieve this from the Chatbot request sent to your server as shown in the example [here]( https://marketplace.zoom.us/docs/guides/chatbots/sending-messages).",
															"type": "text"
														},
														{
															"key": "user_jid",
															"value": "aute anim irure cillum",
															"description": "The UserJID of the user on whose behalf the message is being sent. Used to prevent members of a channel from getting notifications that were set up by a user who has left the channel.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/im/chat/messages/:message_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"chat",
														"messages",
														":message_id"
													],
													"variable": [
														{
															"key": "message_id",
															"value": "culpa velit reprehenderit",
															"description": "(Required) "
														}
													]
												},
												"description": "Delete a message that was sent by your chatbot app.<br><br> **Scopes:** `imchat:bot`<br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>**Authorization Flow**: Client Credentials Flow<br><br>To get authorized, make a POST request to `/oauth/token` endpoint with grant type as `client_credentials`. <br>Use `https://api.zoom.us/oauth/token?grant_type=client_credentials` as the endpoint for the request. \nYou will need to send your ClientID and Secret as a Basic base64 encoded AUthorization header. Ex. `Basic base64Encode({client_id}:{client_sceret})`<br><br> Next, use the token received (access_token) as a bearer token while making the DELETE /im/chat/messages/{message_id} request to delete a message.<br><br>\nLearn more about how to authotize chatbots in the [Chatbot Authorization](https://marketplace.zoom.us/docs/guides/chatbots/authorization) guide."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200` **OK**<br>\nMessage deleted.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "robot_jid",
																	"value": "Excepteur officia",
																	"description": "(Required) The BotJID found in the Chat Subscription Section on the Features page of your App Dashboard.",
																	"type": "text"
																},
																{
																	"key": "account_id",
																	"value": "nisi occa",
																	"description": "(Required) The AccountID of the Zoom account to which the message was sent. Retrieve this from the Chatbot request sent to your server as shown in the example [here]( https://marketplace.zoom.us/docs/guides/chatbots/sending-messages).",
																	"type": "text"
																},
																{
																	"key": "user_jid",
																	"value": "aute anim irure cillum",
																	"description": "The UserJID of the user on whose behalf the message is being sent. Used to prevent members of a channel from getting notifications that were set up by a user who has left the channel.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/im/chat/messages/:message_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"im",
																"chat",
																"messages",
																":message_id"
															],
															"variable": [
																{
																	"key": "message_id",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message_id\": \"20191017014024747_XYYRFjM_main\",\n \"robot_jid\": \"v1pky3qsaoqqwdfdsaf5pl8q@xmppdev.zoom.us\",\n \"sent_time\": \"2019-10-17 01:40:24\",\n \"to_jid\": \"xxx@conference.xmppdev.zoom.us\",\n \"user_jid\": \"jnr_3e_eq4cveeafp3qp6w@xmppdev.zoom.us\"\n}"
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `8001`<br>\nInvalid message_id",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "robot_jid",
																	"value": "Excepteur officia",
																	"description": "(Required) The BotJID found in the Chat Subscription Section on the Features page of your App Dashboard.",
																	"type": "text"
																},
																{
																	"key": "account_id",
																	"value": "nisi occa",
																	"description": "(Required) The AccountID of the Zoom account to which the message was sent. Retrieve this from the Chatbot request sent to your server as shown in the example [here]( https://marketplace.zoom.us/docs/guides/chatbots/sending-messages).",
																	"type": "text"
																},
																{
																	"key": "user_jid",
																	"value": "aute anim irure cillum",
																	"description": "The UserJID of the user on whose behalf the message is being sent. Used to prevent members of a channel from getting notifications that were set up by a user who has left the channel.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/im/chat/messages/:message_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"im",
																"chat",
																"messages",
																":message_id"
															],
															"variable": [
																{
																	"key": "message_id",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Send chatbot messages",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "robot_jid",
													"value": "occaecat proident",
													"description": "(Required) Robot JID created when enabling chatbot features on your marketplace app.",
													"type": "text"
												},
												{
													"key": "to_jid",
													"value": "est aute id sunt",
													"description": "(Required) Unique JID of reciever. Can be a group or user.",
													"type": "text"
												},
												{
													"key": "account_id",
													"value": "qui sint",
													"description": "(Required) Account ID of the authorized account.",
													"type": "text"
												},
												{
													"key": "content",
													"value": "{}",
													"description": "(Required) JSON template describing how the message should be displayed for the user. For more information please see our [\"Send Message\" templates](https://marketplace.zoom.us/docs/guides/chatbots/sending-messages#example-request).",
													"type": "text"
												},
												{
													"key": "visible_to_user",
													"value": "non in Except",
													"description": "**Optional**<br>Allow a Chatbot to send a message to a group channel, but have only one designated person in that group channel see the message by providing the person's UserID in this field.",
													"type": "text"
												},
												{
													"key": "user_jid",
													"value": "dolore",
													"description": "**Optional**<br>\nThe UserJID of the user on whose behalf the message is being sent. Use this field to prevent members of a channel from getting notifications that were set up by a user who has left the channel.",
													"type": "text"
												},
												{
													"key": "is_markdown_support",
													"value": "false",
													"description": "**Optional**<br>\nApplies the markdown parser to your chatbot message if the value of this field is set to `true`.<br> To learn more, refer to the Chatbot message [markdown reference](https://marketplace.zoom.us/docs/guides/chatbots/customizing-messages/message-with-markdown).",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/im/chat/messages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"chat",
												"messages"
											]
										},
										"description": "Send chatbot messages from your marketplace chatbot app.<br><br>\n**Scopes:** `imchat:bot`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n**Authorization Flow**: Client Credentials Flow<br><br>\nTo get authorized, make a POST request to `/oauth/token` endpoint with grant type as `client_credentials`. <br>Use `https://api.zoom.us/oauth/token?grant_type=client_credentials` as the endpoint for the request. \nYou will need to send your ClientID and Secret as a Basic base64 encoded AUthorization header. Ex. `Basic base64Encode({client_id}:{client_sceret})`<br><br> Next, use the token recieved (access_token) as a bearer token while making the POST /im/chat/messages request to send chatbot messages.<br><br>\nLearn more about how to authorize chatbots in the [Chatbot Authorization](https://marketplace.zoom.us/docs/guides/chatbots/authorization) guide."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` **OK**<br>\nMessage Sent.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "robot_jid",
															"value": "occaecat proident",
															"description": "(Required) Robot JID created when enabling chatbot features on your marketplace app.",
															"type": "text"
														},
														{
															"key": "to_jid",
															"value": "est aute id sunt",
															"description": "(Required) Unique JID of reciever. Can be a group or user.",
															"type": "text"
														},
														{
															"key": "account_id",
															"value": "qui sint",
															"description": "(Required) Account ID of the authorized account.",
															"type": "text"
														},
														{
															"key": "content",
															"value": "{}",
															"description": "(Required) JSON template describing how the message should be displayed for the user. For more information please see our [\"Send Message\" templates](https://marketplace.zoom.us/docs/guides/chatbots/sending-messages#example-request).",
															"type": "text"
														},
														{
															"key": "visible_to_user",
															"value": "non in Except",
															"description": "**Optional**<br>Allow a Chatbot to send a message to a group channel, but have only one designated person in that group channel see the message by providing the person's UserID in this field.",
															"type": "text"
														},
														{
															"key": "user_jid",
															"value": "dolore",
															"description": "**Optional**<br>\nThe UserJID of the user on whose behalf the message is being sent. Use this field to prevent members of a channel from getting notifications that were set up by a user who has left the channel.",
															"type": "text"
														},
														{
															"key": "is_markdown_support",
															"value": "false",
															"description": "**Optional**<br>\nApplies the markdown parser to your chatbot message if the value of this field is set to `true`.<br> To learn more, refer to the Chatbot message [markdown reference](https://marketplace.zoom.us/docs/guides/chatbots/customizing-messages/message-with-markdown).",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/im/chat/messages",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"chat",
														"messages"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `7001`<br>\nInvalid request body format",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "robot_jid",
															"value": "occaecat proident",
															"description": "(Required) Robot JID created when enabling chatbot features on your marketplace app.",
															"type": "text"
														},
														{
															"key": "to_jid",
															"value": "est aute id sunt",
															"description": "(Required) Unique JID of reciever. Can be a group or user.",
															"type": "text"
														},
														{
															"key": "account_id",
															"value": "qui sint",
															"description": "(Required) Account ID of the authorized account.",
															"type": "text"
														},
														{
															"key": "content",
															"value": "{}",
															"description": "(Required) JSON template describing how the message should be displayed for the user. For more information please see our [\"Send Message\" templates](https://marketplace.zoom.us/docs/guides/chatbots/sending-messages#example-request).",
															"type": "text"
														},
														{
															"key": "visible_to_user",
															"value": "non in Except",
															"description": "**Optional**<br>Allow a Chatbot to send a message to a group channel, but have only one designated person in that group channel see the message by providing the person's UserID in this field.",
															"type": "text"
														},
														{
															"key": "user_jid",
															"value": "dolore",
															"description": "**Optional**<br>\nThe UserJID of the user on whose behalf the message is being sent. Use this field to prevent members of a channel from getting notifications that were set up by a user who has left the channel.",
															"type": "text"
														},
														{
															"key": "is_markdown_support",
															"value": "false",
															"description": "**Optional**<br>\nApplies the markdown parser to your chatbot message if the value of this field is set to `true`.<br> To learn more, refer to the Chatbot message [markdown reference](https://marketplace.zoom.us/docs/guides/chatbots/customizing-messages/message-with-markdown).",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/im/chat/messages",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"chat",
														"messages"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `401` **Unauthorized**<br>\n**Error Code:** `7010`<br>\nMissing authorization header<br>\nInvalid authorization token",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "robot_jid",
															"value": "occaecat proident",
															"description": "(Required) Robot JID created when enabling chatbot features on your marketplace app.",
															"type": "text"
														},
														{
															"key": "to_jid",
															"value": "est aute id sunt",
															"description": "(Required) Unique JID of reciever. Can be a group or user.",
															"type": "text"
														},
														{
															"key": "account_id",
															"value": "qui sint",
															"description": "(Required) Account ID of the authorized account.",
															"type": "text"
														},
														{
															"key": "content",
															"value": "{}",
															"description": "(Required) JSON template describing how the message should be displayed for the user. For more information please see our [\"Send Message\" templates](https://marketplace.zoom.us/docs/guides/chatbots/sending-messages#example-request).",
															"type": "text"
														},
														{
															"key": "visible_to_user",
															"value": "non in Except",
															"description": "**Optional**<br>Allow a Chatbot to send a message to a group channel, but have only one designated person in that group channel see the message by providing the person's UserID in this field.",
															"type": "text"
														},
														{
															"key": "user_jid",
															"value": "dolore",
															"description": "**Optional**<br>\nThe UserJID of the user on whose behalf the message is being sent. Use this field to prevent members of a channel from getting notifications that were set up by a user who has left the channel.",
															"type": "text"
														},
														{
															"key": "is_markdown_support",
															"value": "false",
															"description": "**Optional**<br>\nApplies the markdown parser to your chatbot message if the value of this field is set to `true`.<br> To learn more, refer to the Chatbot message [markdown reference](https://marketplace.zoom.us/docs/guides/chatbots/customizing-messages/message-with-markdown).",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/im/chat/messages",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"chat",
														"messages"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `403` **Forbidden**<br>\n**Error Code:** `7003`<br>\nNo chatbot can be found with the given robot_jid<br>\n**Error Code:** `7004`<br>\nNot authorized<br>\nNo channel or user can be found with the given to_jid",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "robot_jid",
															"value": "occaecat proident",
															"description": "(Required) Robot JID created when enabling chatbot features on your marketplace app.",
															"type": "text"
														},
														{
															"key": "to_jid",
															"value": "est aute id sunt",
															"description": "(Required) Unique JID of reciever. Can be a group or user.",
															"type": "text"
														},
														{
															"key": "account_id",
															"value": "qui sint",
															"description": "(Required) Account ID of the authorized account.",
															"type": "text"
														},
														{
															"key": "content",
															"value": "{}",
															"description": "(Required) JSON template describing how the message should be displayed for the user. For more information please see our [\"Send Message\" templates](https://marketplace.zoom.us/docs/guides/chatbots/sending-messages#example-request).",
															"type": "text"
														},
														{
															"key": "visible_to_user",
															"value": "non in Except",
															"description": "**Optional**<br>Allow a Chatbot to send a message to a group channel, but have only one designated person in that group channel see the message by providing the person's UserID in this field.",
															"type": "text"
														},
														{
															"key": "user_jid",
															"value": "dolore",
															"description": "**Optional**<br>\nThe UserJID of the user on whose behalf the message is being sent. Use this field to prevent members of a channel from getting notifications that were set up by a user who has left the channel.",
															"type": "text"
														},
														{
															"key": "is_markdown_support",
															"value": "false",
															"description": "**Optional**<br>\nApplies the markdown parser to your chatbot message if the value of this field is set to `true`.<br> To learn more, refer to the Chatbot message [markdown reference](https://marketplace.zoom.us/docs/guides/chatbots/customizing-messages/message-with-markdown).",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/im/chat/messages",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"chat",
														"messages"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `7002`<br>\nInvalid robot_jid specified in the request body",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "robot_jid",
															"value": "occaecat proident",
															"description": "(Required) Robot JID created when enabling chatbot features on your marketplace app.",
															"type": "text"
														},
														{
															"key": "to_jid",
															"value": "est aute id sunt",
															"description": "(Required) Unique JID of reciever. Can be a group or user.",
															"type": "text"
														},
														{
															"key": "account_id",
															"value": "qui sint",
															"description": "(Required) Account ID of the authorized account.",
															"type": "text"
														},
														{
															"key": "content",
															"value": "{}",
															"description": "(Required) JSON template describing how the message should be displayed for the user. For more information please see our [\"Send Message\" templates](https://marketplace.zoom.us/docs/guides/chatbots/sending-messages#example-request).",
															"type": "text"
														},
														{
															"key": "visible_to_user",
															"value": "non in Except",
															"description": "**Optional**<br>Allow a Chatbot to send a message to a group channel, but have only one designated person in that group channel see the message by providing the person's UserID in this field.",
															"type": "text"
														},
														{
															"key": "user_jid",
															"value": "dolore",
															"description": "**Optional**<br>\nThe UserJID of the user on whose behalf the message is being sent. Use this field to prevent members of a channel from getting notifications that were set up by a user who has left the channel.",
															"type": "text"
														},
														{
															"key": "is_markdown_support",
															"value": "false",
															"description": "**Optional**<br>\nApplies the markdown parser to your chatbot message if the value of this field is set to `true`.<br> To learn more, refer to the Chatbot message [markdown reference](https://marketplace.zoom.us/docs/guides/chatbots/customizing-messages/message-with-markdown).",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/im/chat/messages",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"im",
														"chat",
														"messages"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "users",
					"item": [
						{
							"name": "Get user’s IM messages",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/im/users/:userId/chat/messages?chat_user=culpa velit reprehenderit&channel=culpa velit reprehenderit&date=culpa velit reprehenderit&page_size=30&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"im",
										"users",
										":userId",
										"chat",
										"messages"
									],
									"query": [
										{
											"key": "chat_user",
											"value": "culpa velit reprehenderit",
											"description": "Chat user's ID or email address."
										},
										{
											"key": "channel",
											"value": "culpa velit reprehenderit",
											"description": "IM Channel's ID."
										},
										{
											"key": "date",
											"value": "culpa velit reprehenderit",
											"description": "IM message's query date time, format as yyyy-MM-dd."
										},
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The user ID or email address."
										}
									]
								},
								"description": "Get IM Chat messages for a specified period of time. This API only supports Oauth2.<br>\n**Scopes:** `imchat:read`<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n<br><br>\n  <p style=\"background-color:#e1f5fe; color:#000000; padding:8px\"><b>Deprecated:</b> By end of 2021, Zoom is deprecating this API in favor of a consolidated set of APIs. The API will still be available for you to use, though Zoom will no longer provide support for it. For further information, see <a href=\"https://marketplace.zoom.us/docs/guides/stay-up-to-date/announcements#im-api-notice\">Announcements: IM APIs Deprecation</a>.</p>\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nUser's IM messages returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/im/users/:userId/chat/messages?chat_user=culpa velit reprehenderit&channel=culpa velit reprehenderit&date=culpa velit reprehenderit&page_size=30&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"users",
												":userId",
												"chat",
												"messages"
											],
											"query": [
												{
													"key": "chat_user",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "channel",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "date",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"date\": \"string [date]\",\n \"page_size\": \"integer\",\n \"next_page_token\": \"string\",\n \"messages\": [\n  {\n   \"id\": \"string\",\n   \"message\": \"string\",\n   \"sender\": \"string\",\n   \"date_time\": \"string [date-time]\",\n   \"timstamp\": \"Long\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Send IM messages",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "message",
											"value": "tempor est sed ullamc",
											"description": "IM message content.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/im/users/me/chat/messages?chat_user=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"im",
										"users",
										"me",
										"chat",
										"messages"
									],
									"query": [
										{
											"key": "chat_user",
											"value": "culpa velit reprehenderit",
											"description": "The email address (registered with Zoom) or the userId of the chat user."
										}
									]
								},
								"description": "Send chat message to a user. <aside>Note: This API only supports OAuth 2.0.</aside><br><br>**Scope:** `imchat:write`\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` "
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `201`<br>\nMessage Sent.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "message",
													"value": "tempor est sed ullamc",
													"description": "IM message content.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/im/users/me/chat/messages?chat_user=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"im",
												"users",
												"me",
												"chat",
												"messages"
											],
											"query": [
												{
													"key": "chat_user",
													"value": "culpa velit reprehenderit"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"string\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "{user Id}",
					"item": [
						{
							"name": "meetings",
							"item": [
								{
									"name": "List meetings",
									"request": {
										
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/meetings?type=previous&page_size=30&next_page_token=&page_number=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"meetings"
											],
											"query": [
												{
													"key": "type",
													"value": "previous",
													"description": "The meeting types: <br>`scheduled` - This includes all valid past meetings (unexpired), live meetings and upcoming scheduled meetings. It is equivalent to the combined list of \"Previous Meetings\" and \"Upcoming Meetings\" displayed in the user's [Meetings page](https://zoom.us/meeting) on the Zoom Web Portal.<br>`live` - All the ongoing meetings.<br>`upcoming` - All upcoming meetings including live meetings."
												},
												{
													"key": "page_size",
													"value": "30",
													"description": "The number of records returned within a single API call."
												},
												{
													"key": "next_page_token",
													"value": "",
													"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
												},
												{
													"key": "page_number",
													"value": "1",
													"description": "The page number of the current page in the returned records."
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "william.berriel+byok@test.zoom.us",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										},
										"description": "List all the meetings that were scheduled for a user (meeting host). For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nThis API **only** supports scheduled meetings. This API does not return information about instant meetings.\n\n**Scopes:** `meeting:read:admin`, `meeting:read`</br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nList of meeting objects returned.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/meetings?type=live&page_size=30&next_page_token=culpa velit reprehenderit&page_number=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"meetings"
													],
													"query": [
														{
															"key": "type",
															"value": "live"
														},
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit"
														},
														{
															"key": "page_number",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"page_count\": 1,\n \"page_number\": 1,\n \"page_size\": 30,\n \"total_records\": 4,\n \"meetings\": [\n  {\n   \"uuid\": \"mlghmfghlBBB\",\n   \"id\": 11111,\n   \"host_id\": \"abckjdfhsdkjf\",\n   \"topic\": \"Zoom Meeting\",\n   \"type\": 2,\n   \"start_time\": \"2019-08-16T02:00:00Z\",\n   \"duration\": 30,\n   \"timezone\": \"America/Los_Angeles\",\n   \"created_at\": \"2019-08-16T01:13:12Z\",\n   \"join_url\": \"https://zoom.us/j/11111\"\n  },\n  {\n   \"uuid\": \"J8H8eavweUcd321==\",\n   \"id\": 2222,\n   \"host_id\": \"abckjdfhsdkjf\",\n   \"topic\": \"TestMeeting\",\n   \"type\": 2,\n   \"start_time\": \"2019-08-16T19:00:00Z\",\n   \"duration\": 60,\n   \"timezone\": \"America/Los_Angeles\",\n   \"agenda\": \"RegistrationDeniedTest\",\n   \"created_at\": \"2019-08-16T18:30:46Z\",\n   \"join_url\": \"https://zoom.us/j/2222\"\n  },\n  {\n   \"uuid\": \"SGVTAcfSfCbbbb\",\n   \"id\": 33333,\n   \"host_id\": \"abckjdfhsdkjf\",\n   \"topic\": \"My Meeting\",\n   \"type\": 2,\n   \"start_time\": \"2019-08-16T22:00:00Z\",\n   \"duration\": 60,\n   \"timezone\": \"America/Los_Angeles\",\n   \"created_at\": \"2019-08-16T21:15:56Z\",\n   \"join_url\": \"https://zoom.us/j/33333\"\n  },\n  {\n   \"uuid\": \"64123avdfsMVA==\",\n   \"id\": 44444,\n   \"host_id\": \"abckjdfhsdkjf\",\n   \"topic\": \"MyTestPollMeeting\",\n   \"type\": 2,\n   \"start_time\": \"2019-08-29T18:00:00Z\",\n   \"duration\": 60,\n   \"timezone\": \"America/Los_Angeles\",\n   \"created_at\": \"2019-08-29T17:32:33Z\",\n   \"join_url\": \"https://zoom.us/j/4444\"\n  }\n ]\n}"
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nUser ID not found.<br>\n**Error Code:** `1001`<br>\nUser {userId} not exist or not belong to this account.<br>",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/meetings?type=live&page_size=30&next_page_token=culpa velit reprehenderit&page_number=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"meetings"
													],
													"query": [
														{
															"key": "type",
															"value": "live"
														},
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit"
														},
														{
															"key": "page_number",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create a meeting",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "topic",
													"value": "sunt proident ad",
													"description": "The meeting's topic.",
													"type": "text"
												},
												{
													"key": "type",
													"value": "2",
													"description": "The type of meeting:\n* `1` — An instant meeting. \n* `2` — A scheduled meeting. \n* `3` — A recurring meeting with no fixed time. \n* `8` — A recurring meeting with fixed time. (This can only be one of 1,2,3,8)",
													"type": "text"
												},
												{
													"key": "pre_schedule",
													"value": "false",
													"description": "Whether to create a prescheduled meeting via the [GSuite app](https://support.zoom.us/hc/en-us/articles/360020187492-Zoom-for-GSuite-add-on). This **only** supports the meeting `type` value of `2` (scheduled meetings) and `3` (recurring meetings with no fixed time): \n* `true` — Create a prescheduled meeting. \n* `false` — Create a regular meeting.",
													"type": "text"
												},
												{
													"key": "start_time",
													"value": "2013-05-20T18:21:53.958Z",
													"description": "The meeting's start time. This field is only used for scheduled and/or recurring meetings with a fixed time. This supports local time and GMT formats. \n* To set a meeting's start time in GMT, use the `yyyy-MM-ddTHH:mm:ssZ` date-time format. For example, `2020-03-31T12:02:00Z`. \n* To set a meeting's start time using a specific timezone, use the `yyyy-MM-ddTHH:mm:ss` date-time format and specify the [timezone ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones) in the `timezone` field. If you do not specify a timezone, the `timezone` value defaults to your Zoom account's timezone. You can also use `UTC` for the `timezone` value.",
													"type": "text"
												},
												{
													"key": "duration",
													"value": "-71119250",
													"description": "The meeting's scheduled duration, in minutes. This field is only used for scheduled meetings (`2`).",
													"type": "text"
												},
												{
													"key": "schedule_for",
													"value": "reprehenderit et",
													"description": "The email address or user ID of the user to schedule a meeting for.",
													"type": "text"
												},
												{
													"key": "timezone",
													"value": "reprehenderit nisi do commodo",
													"description": "The timezome to assign to the `start_time` value. This field is only used for scheduled meetings (`2`).\n\nFor a list of supported timezones and their format, refer to our [timezone list documentation](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones).",
													"type": "text"
												},
												{
													"key": "password",
													"value": "labo",
													"description": "The password required to join the meeting. By default, a password can **only** have a maximum length of 10 characters and only contain alphanumeric characters and the `@`, `-`, `_`, and `*` characters. \n* If the account owner or administrator has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the password **must** meet those requirements. \n* If password requirements are enabled, use the [**Get User Settings**](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) API or the [**Get Account Settings**](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API to get the requirements.",
													"type": "text"
												},
												{
													"key": "default_password",
													"value": "false",
													"description": "Whether to generate a default password using the user's settings. This value defaults to `false`. \n\nIf this value is `true` and the user has the PMI setting enabled with a password, then the user's meetings will use the PMI password. It will **not** use a default password.",
													"type": "text"
												},
												{
													"key": "agenda",
													"value": "dolor minim",
													"description": "The meeting's agenda. This value has a maximum length of 2,000 characters.",
													"type": "text"
												},
												{
													"key": "tracking_fields",
													"value": "[{\"field\":\"sint et\",\"value\":\"adipisicing incididunt labore officia\"},{\"field\":\"do laborum\",\"value\":\"eu\"}]",
													"description": "Information about the meeting's tracking fields.",
													"type": "text"
												},
												{
													"key": "recurrence",
													"value": "{\"type\":2,\"repeat_interval\":16088147,\"weekly_days\":\"1\",\"monthly_day\":1,\"monthly_week\":4,\"monthly_week_day\":7,\"end_times\":1,\"end_date_time\":\"1948-03-07T17:11:45.888Z\"}",
													"description": "Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time. ",
													"type": "text"
												},
												{
													"key": "settings",
													"value": "{\"host_video\":false,\"participant_video\":true,\"cn_meeting\":false,\"in_meeting\":false,\"join_before_host\":false,\"jbh_time\":0,\"mute_upon_entry\":false,\"watermark\":false,\"use_pmi\":false,\"approval_type\":2,\"registration_type\":1,\"audio\":\"both\",\"auto_recording\":\"none\",\"alternative_hosts\":\"ut incididunt\",\"close_registration\":false,\"waiting_room\":true,\"global_dial_in_countries\":[\"est\",\"Lorem ut irure\"],\"contact_name\":\"pariatur\",\"contact_email\":\"nisi et\",\"registrants_email_notification\":true,\"registrants_confirmation_email\":true,\"meeting_authentication\":false,\"authentication_option\":\"anim\",\"authentication_domains\":\"Excepteur in laborum ut aliquip\",\"authentication_exception\":[{\"name\":\"consectetur aute occaecat Ut sed\",\"email\":\"cPS79mXvRUqvf8r@CXjIrapP.oaus\"},{\"name\":\"laboris incididunt sunt\",\"email\":\"EMUUnMX31YN9K@heLyHS.decm\"}],\"additional_data_center_regions\":[\"dolor laboris reprehenderit\",\"Duis Lorem veniam cupidatat\"],\"breakout_room\":{\"enable\":true,\"rooms\":[{\"name\":\"velit tempor id mollit\",\"participants\":[\"magna ea\",\"ipsum irure nulla deserunt\"]},{\"name\":\"sit Duis qui quis cillum\",\"participants\":[\"dolore\",\"nisi\"]}]},\"language_interpretation\":{\"enable\":true,\"interpreters\":[{\"email\":\"l0f0vGGN4@PllGVknMikQfUEgGoMOAFMwuTC.zhdx\",\"languages\":\"in laboris elit\"},{\"email\":\"Ezxp4YQk@iddIUiikfCcyriRzbwKjmKbKGRGyHN.qp\",\"languages\":\"laboris velit\"}]},\"show_share_button\":true,\"allow_multiple_devices\":true,\"encryption_type\":\"e2ee\",\"approved_or_denied_countries_or_regions\":{\"enable\":false,\"method\":\"deny\",\"approved_list\":[\"consequat\",\"voluptate dolor quis\"],\"denied_list\":[\"sint mollit do labore\",\"minim consectetur\"]},\"alternative_hosts_email_notification\":true,\"focus_mode\":true,\"meeting_invitees\":[{\"email\":\"zNEdTQEJunC@wPKSwadCXEigUKaMJiPqhsEbLKus.eg\"},{\"email\":\"tbkyiQ@QVAwjFQelLREorIYhq.li\"}]}",
													"description": "Information about the meeting's settings.",
													"type": "text"
												},
												{
													"key": "template_id",
													"value": "incididunt sed labore mollit ullamco",
													"description": "The **account admin meeting template** ID with which to schedule a meeting using a [meeting template](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates). For a list of account admin-provided meeting templates, use the [**List meeting templates**](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/listmeetingtemplates) API. \n* At this time, this field **only** accepts account admin meeting template IDs. \n* To enable the account admin meeting templates feature, [contact Zoom support](https://support.zoom.us/hc/en-us).",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/meetings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"meetings"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										},
										"description": "Use this API to [create a meeting](https://support.zoom.us/hc/en-us/articles/201362413-Scheduling-meetings) for a user. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\n* A meeting's `start_url` value is the URL a host or an alternative host can use to start a meeting. The expiration time for the `start_url` value is **two hours** for all regular users.\n* For `custCreate` meeting hosts (users created with the `custCreate` parameter via the **[Create Users](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usercreate)** API), the expiration time of the `start_url` parameter is **90 days** from the generation of the `start_url`.\n\n**Note:** \n\nFor security reasons, the recommended way to programmatically (after expiry) get the updated `start_url` value is to call the [**Retrieve a Meeting**](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meeting) API. Refer to the `start_url` value in the response. \n\n **Scopes:** `meeting:write:admin`, `meeting:write`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` <br>\n* This API has a daily rate limit of **100 requests per day**. The rate limit is applied against the `userId` of the **meeting host** used to make the request."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `201`<br>\nMeeting created.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "topic",
															"value": "dolore labore nostrud ut",
															"description": "The meeting's topic.",
															"type": "text"
														},
														{
															"key": "type",
															"value": "2",
															"description": "The type of meeting:\n* `1` — An instant meeting. \n* `2` — A scheduled meeting. \n* `3` — A recurring meeting with no fixed time. \n* `8` — A recurring meeting with fixed time. (This can only be one of 1,2,3,8)",
															"type": "text"
														},
														{
															"key": "pre_schedule",
															"value": "false",
															"description": "Whether to create a prescheduled meeting via the [GSuite app](https://support.zoom.us/hc/en-us/articles/360020187492-Zoom-for-GSuite-add-on). This **only** supports the meeting `type` value of `2` (scheduled meetings) and `3` (recurring meetings with no fixed time): \n* `true` — Create a prescheduled meeting. \n* `false` — Create a regular meeting.",
															"type": "text"
														},
														{
															"key": "start_time",
															"value": "1976-02-17T08:53:17.456Z",
															"description": "The meeting's start time. This field is only used for scheduled and/or recurring meetings with a fixed time. This supports local time and GMT formats. \n* To set a meeting's start time in GMT, use the `yyyy-MM-ddTHH:mm:ssZ` date-time format. For example, `2020-03-31T12:02:00Z`. \n* To set a meeting's start time using a specific timezone, use the `yyyy-MM-ddTHH:mm:ss` date-time format and specify the [timezone ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones) in the `timezone` field. If you do not specify a timezone, the `timezone` value defaults to your Zoom account's timezone. You can also use `UTC` for the `timezone` value.",
															"type": "text"
														},
														{
															"key": "duration",
															"value": "-54448090",
															"description": "The meeting's scheduled duration, in minutes. This field is only used for scheduled meetings (`2`).",
															"type": "text"
														},
														{
															"key": "schedule_for",
															"value": "incididunt",
															"description": "The email address or user ID of the user to schedule a meeting for.",
															"type": "text"
														},
														{
															"key": "timezone",
															"value": "laboris Excepteur commodo",
															"description": "The timezome to assign to the `start_time` value. This field is only used for scheduled meetings (`2`).\n\nFor a list of supported timezones and their format, refer to our [timezone list documentation](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones).",
															"type": "text"
														},
														{
															"key": "password",
															"value": "occaeca",
															"description": "The password required to join the meeting. By default, a password can **only** have a maximum length of 10 characters and only contain alphanumeric characters and the `@`, `-`, `_`, and `*` characters. \n* If the account owner or administrator has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the password **must** meet those requirements. \n* If password requirements are enabled, use the [**Get User Settings**](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) API or the [**Get Account Settings**](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API to get the requirements.",
															"type": "text"
														},
														{
															"key": "default_password",
															"value": "false",
															"description": "Whether to generate a default password using the user's settings. This value defaults to `false`. \n\nIf this value is `true` and the user has the PMI setting enabled with a password, then the user's meetings will use the PMI password. It will **not** use a default password.",
															"type": "text"
														},
														{
															"key": "agenda",
															"value": "reprehenderit fugiat incididunt exercitation",
															"description": "The meeting's agenda. This value has a maximum length of 2,000 characters.",
															"type": "text"
														},
														{
															"key": "tracking_fields",
															"value": "[{\"field\":\"Excepteur ipsum exercitation\",\"value\":\"eu aliquip Ut velit\"},{\"field\":\"in esse Ut enim in\",\"value\":\"aliqua\"}]",
															"description": "Information about the meeting's tracking fields.",
															"type": "text"
														},
														{
															"key": "recurrence",
															"value": "{\"type\":1,\"repeat_interval\":-28930834,\"weekly_days\":\"1\",\"monthly_day\":1,\"monthly_week\":2,\"monthly_week_day\":3,\"end_times\":1,\"end_date_time\":\"1988-08-19T10:27:22.202Z\"}",
															"description": "Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time. ",
															"type": "text"
														},
														{
															"key": "settings",
															"value": "{\"host_video\":true,\"participant_video\":true,\"cn_meeting\":false,\"in_meeting\":false,\"join_before_host\":false,\"jbh_time\":10,\"mute_upon_entry\":false,\"watermark\":false,\"use_pmi\":false,\"approval_type\":2,\"registration_type\":1,\"audio\":\"both\",\"auto_recording\":\"none\",\"alternative_hosts\":\"dolor laboris et occaecat\",\"close_registration\":false,\"waiting_room\":false,\"global_dial_in_countries\":[\"quis Duis\",\"do adipisicing exercitat\"],\"contact_name\":\"occaecat Lorem\",\"contact_email\":\"aute nisi\",\"registrants_email_notification\":false,\"registrants_confirmation_email\":false,\"meeting_authentication\":true,\"authentication_option\":\"cupidatat sit officia adipisicing\",\"authentication_domains\":\"ut\",\"authentication_exception\":[{\"name\":\"exercitation sint\",\"email\":\"am4T@wKpmHFsjtEvdNVzH.ayka\"},{\"name\":\"Lorem incididunt sunt Excepteur\",\"email\":\"PCwybEtFS@MKgLnCLlWhfa.qme\"}],\"additional_data_center_regions\":[\"sit consequat labore\",\"consectetur ut Duis\"],\"breakout_room\":{\"enable\":false,\"rooms\":[{\"name\":\"fugiat dolor\",\"participants\":[\"nisi ut enim Duis\",\"nostrud elit voluptate\"]},{\"name\":\"in\",\"participants\":[\"cupidatat ad nostrud\",\"aliqua Lorem\"]}]},\"language_interpretation\":{\"enable\":true,\"interpreters\":[{\"email\":\"Lntg0bAj2z4ub@sdppYYfPAxkEgVpZjyWEzdqRgWwXet.or\",\"languages\":\"amet magna minim\"},{\"email\":\"ZrxfD@WwsIbxmwVak.owrq\",\"languages\":\"do enim Duis reprehenderit\"}]},\"show_share_button\":true,\"allow_multiple_devices\":false,\"encryption_type\":\"e2ee\",\"approved_or_denied_countries_or_regions\":{\"enable\":false,\"method\":\"approve\",\"approved_list\":[\"ut commodo dolore velit\",\"aliquip Duis dolore ei\"],\"denied_list\":[\"minim ipsum velit Duis\",\"aliquip sit\"]},\"alternative_hosts_email_notification\":true,\"focus_mode\":false,\"meeting_invitees\":[{\"email\":\"S-M@GPPwL.vjkd\"},{\"email\":\"KSO@rOXNSG.xeam\"}]}",
															"description": "Information about the meeting's settings.",
															"type": "text"
														},
														{
															"key": "template_id",
															"value": "cupidatat amet commodo",
															"description": "The **account admin meeting template** ID with which to schedule a meeting using a [meeting template](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates). For a list of account admin-provided meeting templates, use the [**List meeting templates**](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/listmeetingtemplates) API. \n* At this time, this field **only** accepts account admin meeting template IDs. \n* To enable the account admin meeting templates feature, [contact Zoom support](https://support.zoom.us/hc/en-us).",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/meetings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"meetings"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Location",
													"value": "culpa velit reprehenderit",
													"description": "Location of created Meeting"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"created_at\": \"2019-09-05T16:54:14Z\",\n \"duration\": 60,\n \"host_id\": \"AbcDefGHi\",\n \"id\": 1100000,\n \"join_url\": \"https://zoom.us/j/1100000\",\n \"settings\": {\n  \"alternative_hosts\": \"\",\n  \"approval_type\": 2,\n  \"audio\": \"both\",\n  \"auto_recording\": \"local\",\n  \"close_registration\": false,\n  \"cn_meeting\": false,\n  \"enforce_login\": false,\n  \"enforce_login_domains\": \"\",\n  \"global_dial_in_countries\": [\n   \"US\"\n  ],\n  \"global_dial_in_numbers\": [\n   {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"country_name\": \"US\",\n    \"number\": \"+1 1000200200\",\n    \"type\": \"toll\"\n   },\n   {\n    \"city\": \"San Jose\",\n    \"country\": \"US\",\n    \"country_name\": \"US\",\n    \"number\": \"+1 6699006833\",\n    \"type\": \"toll\"\n   },\n   {\n    \"city\": \"San Jose\",\n    \"country\": \"US\",\n    \"country_name\": \"US\",\n    \"number\": \"+1 408000000\",\n    \"type\": \"toll\"\n   }\n  ],\n  \"breakout_room\": {\n   \"enable\": false,\n   \"rooms\": [\n    {\n     \"name\": \"room1\",\n     \"participants\": [\n      \"james.user01@somemail1234.com\",\n      \"james.user02@somemail1234.com\"\n     ]\n    },\n    {\n     \"name\": \"room2\",\n     \"participants\": [\n      \"james.user03@somemail1234.com\"\n     ]\n    }\n   ],\n   \"host_video\": false,\n   \"in_meeting\": false,\n   \"join_before_host\": true,\n   \"mute_upon_entry\": false,\n   \"participant_video\": false,\n   \"registrants_confirmation_email\": true,\n   \"use_pmi\": false,\n   \"waiting_room\": false,\n   \"watermark\": false,\n   \"registrants_email_notification\": true\n  },\n  \"start_time\": \"2019-08-30T22:00:00Z\",\n  \"start_url\": \"https://zoom.us/s/1100000?iIifQ.wfY2ldlb82SWo3TsR77lBiJjR53TNeFUiKbLyCvZZjw\",\n  \"status\": \"waiting\",\n  \"timezone\": \"America/New_York\",\n  \"topic\": \"API Test\",\n  \"type\": 2,\n  \"uuid\": \"ng1MzyWNQaObxcf3+Gfm6A==\"\n }\n}"
										},
										{
											"name": "**HTTP Status Code:** `300`<br>\nInvalid enforce_login_domains, separate multiple domains by semicolon.<br>\nA maximum of {rateLimitNumber} meetings can be created/updated for a single user in one day.\n",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "topic",
															"value": "dolore labore nostrud ut",
															"description": "The meeting's topic.",
															"type": "text"
														},
														{
															"key": "type",
															"value": "2",
															"description": "The type of meeting:\n* `1` — An instant meeting. \n* `2` — A scheduled meeting. \n* `3` — A recurring meeting with no fixed time. \n* `8` — A recurring meeting with fixed time. (This can only be one of 1,2,3,8)",
															"type": "text"
														},
														{
															"key": "pre_schedule",
															"value": "false",
															"description": "Whether to create a prescheduled meeting via the [GSuite app](https://support.zoom.us/hc/en-us/articles/360020187492-Zoom-for-GSuite-add-on). This **only** supports the meeting `type` value of `2` (scheduled meetings) and `3` (recurring meetings with no fixed time): \n* `true` — Create a prescheduled meeting. \n* `false` — Create a regular meeting.",
															"type": "text"
														},
														{
															"key": "start_time",
															"value": "1976-02-17T08:53:17.456Z",
															"description": "The meeting's start time. This field is only used for scheduled and/or recurring meetings with a fixed time. This supports local time and GMT formats. \n* To set a meeting's start time in GMT, use the `yyyy-MM-ddTHH:mm:ssZ` date-time format. For example, `2020-03-31T12:02:00Z`. \n* To set a meeting's start time using a specific timezone, use the `yyyy-MM-ddTHH:mm:ss` date-time format and specify the [timezone ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones) in the `timezone` field. If you do not specify a timezone, the `timezone` value defaults to your Zoom account's timezone. You can also use `UTC` for the `timezone` value.",
															"type": "text"
														},
														{
															"key": "duration",
															"value": "-54448090",
															"description": "The meeting's scheduled duration, in minutes. This field is only used for scheduled meetings (`2`).",
															"type": "text"
														},
														{
															"key": "schedule_for",
															"value": "incididunt",
															"description": "The email address or user ID of the user to schedule a meeting for.",
															"type": "text"
														},
														{
															"key": "timezone",
															"value": "laboris Excepteur commodo",
															"description": "The timezome to assign to the `start_time` value. This field is only used for scheduled meetings (`2`).\n\nFor a list of supported timezones and their format, refer to our [timezone list documentation](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones).",
															"type": "text"
														},
														{
															"key": "password",
															"value": "occaeca",
															"description": "The password required to join the meeting. By default, a password can **only** have a maximum length of 10 characters and only contain alphanumeric characters and the `@`, `-`, `_`, and `*` characters. \n* If the account owner or administrator has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the password **must** meet those requirements. \n* If password requirements are enabled, use the [**Get User Settings**](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) API or the [**Get Account Settings**](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API to get the requirements.",
															"type": "text"
														},
														{
															"key": "default_password",
															"value": "false",
															"description": "Whether to generate a default password using the user's settings. This value defaults to `false`. \n\nIf this value is `true` and the user has the PMI setting enabled with a password, then the user's meetings will use the PMI password. It will **not** use a default password.",
															"type": "text"
														},
														{
															"key": "agenda",
															"value": "reprehenderit fugiat incididunt exercitation",
															"description": "The meeting's agenda. This value has a maximum length of 2,000 characters.",
															"type": "text"
														},
														{
															"key": "tracking_fields",
															"value": "[{\"field\":\"Excepteur ipsum exercitation\",\"value\":\"eu aliquip Ut velit\"},{\"field\":\"in esse Ut enim in\",\"value\":\"aliqua\"}]",
															"description": "Information about the meeting's tracking fields.",
															"type": "text"
														},
														{
															"key": "recurrence",
															"value": "{\"type\":1,\"repeat_interval\":-28930834,\"weekly_days\":\"1\",\"monthly_day\":1,\"monthly_week\":2,\"monthly_week_day\":3,\"end_times\":1,\"end_date_time\":\"1988-08-19T10:27:22.202Z\"}",
															"description": "Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time. ",
															"type": "text"
														},
														{
															"key": "settings",
															"value": "{\"host_video\":true,\"participant_video\":true,\"cn_meeting\":false,\"in_meeting\":false,\"join_before_host\":false,\"jbh_time\":10,\"mute_upon_entry\":false,\"watermark\":false,\"use_pmi\":false,\"approval_type\":2,\"registration_type\":1,\"audio\":\"both\",\"auto_recording\":\"none\",\"alternative_hosts\":\"dolor laboris et occaecat\",\"close_registration\":false,\"waiting_room\":false,\"global_dial_in_countries\":[\"quis Duis\",\"do adipisicing exercitat\"],\"contact_name\":\"occaecat Lorem\",\"contact_email\":\"aute nisi\",\"registrants_email_notification\":false,\"registrants_confirmation_email\":false,\"meeting_authentication\":true,\"authentication_option\":\"cupidatat sit officia adipisicing\",\"authentication_domains\":\"ut\",\"authentication_exception\":[{\"name\":\"exercitation sint\",\"email\":\"am4T@wKpmHFsjtEvdNVzH.ayka\"},{\"name\":\"Lorem incididunt sunt Excepteur\",\"email\":\"PCwybEtFS@MKgLnCLlWhfa.qme\"}],\"additional_data_center_regions\":[\"sit consequat labore\",\"consectetur ut Duis\"],\"breakout_room\":{\"enable\":false,\"rooms\":[{\"name\":\"fugiat dolor\",\"participants\":[\"nisi ut enim Duis\",\"nostrud elit voluptate\"]},{\"name\":\"in\",\"participants\":[\"cupidatat ad nostrud\",\"aliqua Lorem\"]}]},\"language_interpretation\":{\"enable\":true,\"interpreters\":[{\"email\":\"Lntg0bAj2z4ub@sdppYYfPAxkEgVpZjyWEzdqRgWwXet.or\",\"languages\":\"amet magna minim\"},{\"email\":\"ZrxfD@WwsIbxmwVak.owrq\",\"languages\":\"do enim Duis reprehenderit\"}]},\"show_share_button\":true,\"allow_multiple_devices\":false,\"encryption_type\":\"e2ee\",\"approved_or_denied_countries_or_regions\":{\"enable\":false,\"method\":\"approve\",\"approved_list\":[\"ut commodo dolore velit\",\"aliquip Duis dolore ei\"],\"denied_list\":[\"minim ipsum velit Duis\",\"aliquip sit\"]},\"alternative_hosts_email_notification\":true,\"focus_mode\":false,\"meeting_invitees\":[{\"email\":\"S-M@GPPwL.vjkd\"},{\"email\":\"KSO@rOXNSG.xeam\"}]}",
															"description": "Information about the meeting's settings.",
															"type": "text"
														},
														{
															"key": "template_id",
															"value": "cupidatat amet commodo",
															"description": "The **account admin meeting template** ID with which to schedule a meeting using a [meeting template](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates). For a list of account admin-provided meeting templates, use the [**List meeting templates**](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/listmeetingtemplates) API. \n* At this time, this field **only** accepts account admin meeting template IDs. \n* To enable the account admin meeting templates feature, [contact Zoom support](https://support.zoom.us/hc/en-us).",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/meetings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"meetings"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `3000`<br> \n* Instant meetings do not support the schedule_for parameter; you cannot schedule an instant meeting for another user.<br>\n* Users in '{0}' have been blocked from joining meetings",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "topic",
															"value": "dolore labore nostrud ut",
															"description": "The meeting's topic.",
															"type": "text"
														},
														{
															"key": "type",
															"value": "2",
															"description": "The type of meeting:\n* `1` — An instant meeting. \n* `2` — A scheduled meeting. \n* `3` — A recurring meeting with no fixed time. \n* `8` — A recurring meeting with fixed time. (This can only be one of 1,2,3,8)",
															"type": "text"
														},
														{
															"key": "pre_schedule",
															"value": "false",
															"description": "Whether to create a prescheduled meeting via the [GSuite app](https://support.zoom.us/hc/en-us/articles/360020187492-Zoom-for-GSuite-add-on). This **only** supports the meeting `type` value of `2` (scheduled meetings) and `3` (recurring meetings with no fixed time): \n* `true` — Create a prescheduled meeting. \n* `false` — Create a regular meeting.",
															"type": "text"
														},
														{
															"key": "start_time",
															"value": "1976-02-17T08:53:17.456Z",
															"description": "The meeting's start time. This field is only used for scheduled and/or recurring meetings with a fixed time. This supports local time and GMT formats. \n* To set a meeting's start time in GMT, use the `yyyy-MM-ddTHH:mm:ssZ` date-time format. For example, `2020-03-31T12:02:00Z`. \n* To set a meeting's start time using a specific timezone, use the `yyyy-MM-ddTHH:mm:ss` date-time format and specify the [timezone ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones) in the `timezone` field. If you do not specify a timezone, the `timezone` value defaults to your Zoom account's timezone. You can also use `UTC` for the `timezone` value.",
															"type": "text"
														},
														{
															"key": "duration",
															"value": "-54448090",
															"description": "The meeting's scheduled duration, in minutes. This field is only used for scheduled meetings (`2`).",
															"type": "text"
														},
														{
															"key": "schedule_for",
															"value": "incididunt",
															"description": "The email address or user ID of the user to schedule a meeting for.",
															"type": "text"
														},
														{
															"key": "timezone",
															"value": "laboris Excepteur commodo",
															"description": "The timezome to assign to the `start_time` value. This field is only used for scheduled meetings (`2`).\n\nFor a list of supported timezones and their format, refer to our [timezone list documentation](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones).",
															"type": "text"
														},
														{
															"key": "password",
															"value": "occaeca",
															"description": "The password required to join the meeting. By default, a password can **only** have a maximum length of 10 characters and only contain alphanumeric characters and the `@`, `-`, `_`, and `*` characters. \n* If the account owner or administrator has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the password **must** meet those requirements. \n* If password requirements are enabled, use the [**Get User Settings**](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) API or the [**Get Account Settings**](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API to get the requirements.",
															"type": "text"
														},
														{
															"key": "default_password",
															"value": "false",
															"description": "Whether to generate a default password using the user's settings. This value defaults to `false`. \n\nIf this value is `true` and the user has the PMI setting enabled with a password, then the user's meetings will use the PMI password. It will **not** use a default password.",
															"type": "text"
														},
														{
															"key": "agenda",
															"value": "reprehenderit fugiat incididunt exercitation",
															"description": "The meeting's agenda. This value has a maximum length of 2,000 characters.",
															"type": "text"
														},
														{
															"key": "tracking_fields",
															"value": "[{\"field\":\"Excepteur ipsum exercitation\",\"value\":\"eu aliquip Ut velit\"},{\"field\":\"in esse Ut enim in\",\"value\":\"aliqua\"}]",
															"description": "Information about the meeting's tracking fields.",
															"type": "text"
														},
														{
															"key": "recurrence",
															"value": "{\"type\":1,\"repeat_interval\":-28930834,\"weekly_days\":\"1\",\"monthly_day\":1,\"monthly_week\":2,\"monthly_week_day\":3,\"end_times\":1,\"end_date_time\":\"1988-08-19T10:27:22.202Z\"}",
															"description": "Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time. ",
															"type": "text"
														},
														{
															"key": "settings",
															"value": "{\"host_video\":true,\"participant_video\":true,\"cn_meeting\":false,\"in_meeting\":false,\"join_before_host\":false,\"jbh_time\":10,\"mute_upon_entry\":false,\"watermark\":false,\"use_pmi\":false,\"approval_type\":2,\"registration_type\":1,\"audio\":\"both\",\"auto_recording\":\"none\",\"alternative_hosts\":\"dolor laboris et occaecat\",\"close_registration\":false,\"waiting_room\":false,\"global_dial_in_countries\":[\"quis Duis\",\"do adipisicing exercitat\"],\"contact_name\":\"occaecat Lorem\",\"contact_email\":\"aute nisi\",\"registrants_email_notification\":false,\"registrants_confirmation_email\":false,\"meeting_authentication\":true,\"authentication_option\":\"cupidatat sit officia adipisicing\",\"authentication_domains\":\"ut\",\"authentication_exception\":[{\"name\":\"exercitation sint\",\"email\":\"am4T@wKpmHFsjtEvdNVzH.ayka\"},{\"name\":\"Lorem incididunt sunt Excepteur\",\"email\":\"PCwybEtFS@MKgLnCLlWhfa.qme\"}],\"additional_data_center_regions\":[\"sit consequat labore\",\"consectetur ut Duis\"],\"breakout_room\":{\"enable\":false,\"rooms\":[{\"name\":\"fugiat dolor\",\"participants\":[\"nisi ut enim Duis\",\"nostrud elit voluptate\"]},{\"name\":\"in\",\"participants\":[\"cupidatat ad nostrud\",\"aliqua Lorem\"]}]},\"language_interpretation\":{\"enable\":true,\"interpreters\":[{\"email\":\"Lntg0bAj2z4ub@sdppYYfPAxkEgVpZjyWEzdqRgWwXet.or\",\"languages\":\"amet magna minim\"},{\"email\":\"ZrxfD@WwsIbxmwVak.owrq\",\"languages\":\"do enim Duis reprehenderit\"}]},\"show_share_button\":true,\"allow_multiple_devices\":false,\"encryption_type\":\"e2ee\",\"approved_or_denied_countries_or_regions\":{\"enable\":false,\"method\":\"approve\",\"approved_list\":[\"ut commodo dolore velit\",\"aliquip Duis dolore ei\"],\"denied_list\":[\"minim ipsum velit Duis\",\"aliquip sit\"]},\"alternative_hosts_email_notification\":true,\"focus_mode\":false,\"meeting_invitees\":[{\"email\":\"S-M@GPPwL.vjkd\"},{\"email\":\"KSO@rOXNSG.xeam\"}]}",
															"description": "Information about the meeting's settings.",
															"type": "text"
														},
														{
															"key": "template_id",
															"value": "cupidatat amet commodo",
															"description": "The **account admin meeting template** ID with which to schedule a meeting using a [meeting template](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates). For a list of account admin-provided meeting templates, use the [**List meeting templates**](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/listmeetingtemplates) API. \n* At this time, this field **only** accepts account admin meeting template IDs. \n* To enable the account admin meeting templates feature, [contact Zoom support](https://support.zoom.us/hc/en-us).",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/meetings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"meetings"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br>\nUser not found.<br>\n\n**Error Code:** `1001`<br> User {userId} not exist or not belong to this account.\n",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "topic",
															"value": "dolore labore nostrud ut",
															"description": "The meeting's topic.",
															"type": "text"
														},
														{
															"key": "type",
															"value": "2",
															"description": "The type of meeting:\n* `1` — An instant meeting. \n* `2` — A scheduled meeting. \n* `3` — A recurring meeting with no fixed time. \n* `8` — A recurring meeting with fixed time. (This can only be one of 1,2,3,8)",
															"type": "text"
														},
														{
															"key": "pre_schedule",
															"value": "false",
															"description": "Whether to create a prescheduled meeting via the [GSuite app](https://support.zoom.us/hc/en-us/articles/360020187492-Zoom-for-GSuite-add-on). This **only** supports the meeting `type` value of `2` (scheduled meetings) and `3` (recurring meetings with no fixed time): \n* `true` — Create a prescheduled meeting. \n* `false` — Create a regular meeting.",
															"type": "text"
														},
														{
															"key": "start_time",
															"value": "1976-02-17T08:53:17.456Z",
															"description": "The meeting's start time. This field is only used for scheduled and/or recurring meetings with a fixed time. This supports local time and GMT formats. \n* To set a meeting's start time in GMT, use the `yyyy-MM-ddTHH:mm:ssZ` date-time format. For example, `2020-03-31T12:02:00Z`. \n* To set a meeting's start time using a specific timezone, use the `yyyy-MM-ddTHH:mm:ss` date-time format and specify the [timezone ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones) in the `timezone` field. If you do not specify a timezone, the `timezone` value defaults to your Zoom account's timezone. You can also use `UTC` for the `timezone` value.",
															"type": "text"
														},
														{
															"key": "duration",
															"value": "-54448090",
															"description": "The meeting's scheduled duration, in minutes. This field is only used for scheduled meetings (`2`).",
															"type": "text"
														},
														{
															"key": "schedule_for",
															"value": "incididunt",
															"description": "The email address or user ID of the user to schedule a meeting for.",
															"type": "text"
														},
														{
															"key": "timezone",
															"value": "laboris Excepteur commodo",
															"description": "The timezome to assign to the `start_time` value. This field is only used for scheduled meetings (`2`).\n\nFor a list of supported timezones and their format, refer to our [timezone list documentation](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones).",
															"type": "text"
														},
														{
															"key": "password",
															"value": "occaeca",
															"description": "The password required to join the meeting. By default, a password can **only** have a maximum length of 10 characters and only contain alphanumeric characters and the `@`, `-`, `_`, and `*` characters. \n* If the account owner or administrator has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the password **must** meet those requirements. \n* If password requirements are enabled, use the [**Get User Settings**](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) API or the [**Get Account Settings**](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API to get the requirements.",
															"type": "text"
														},
														{
															"key": "default_password",
															"value": "false",
															"description": "Whether to generate a default password using the user's settings. This value defaults to `false`. \n\nIf this value is `true` and the user has the PMI setting enabled with a password, then the user's meetings will use the PMI password. It will **not** use a default password.",
															"type": "text"
														},
														{
															"key": "agenda",
															"value": "reprehenderit fugiat incididunt exercitation",
															"description": "The meeting's agenda. This value has a maximum length of 2,000 characters.",
															"type": "text"
														},
														{
															"key": "tracking_fields",
															"value": "[{\"field\":\"Excepteur ipsum exercitation\",\"value\":\"eu aliquip Ut velit\"},{\"field\":\"in esse Ut enim in\",\"value\":\"aliqua\"}]",
															"description": "Information about the meeting's tracking fields.",
															"type": "text"
														},
														{
															"key": "recurrence",
															"value": "{\"type\":1,\"repeat_interval\":-28930834,\"weekly_days\":\"1\",\"monthly_day\":1,\"monthly_week\":2,\"monthly_week_day\":3,\"end_times\":1,\"end_date_time\":\"1988-08-19T10:27:22.202Z\"}",
															"description": "Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time. ",
															"type": "text"
														},
														{
															"key": "settings",
															"value": "{\"host_video\":true,\"participant_video\":true,\"cn_meeting\":false,\"in_meeting\":false,\"join_before_host\":false,\"jbh_time\":10,\"mute_upon_entry\":false,\"watermark\":false,\"use_pmi\":false,\"approval_type\":2,\"registration_type\":1,\"audio\":\"both\",\"auto_recording\":\"none\",\"alternative_hosts\":\"dolor laboris et occaecat\",\"close_registration\":false,\"waiting_room\":false,\"global_dial_in_countries\":[\"quis Duis\",\"do adipisicing exercitat\"],\"contact_name\":\"occaecat Lorem\",\"contact_email\":\"aute nisi\",\"registrants_email_notification\":false,\"registrants_confirmation_email\":false,\"meeting_authentication\":true,\"authentication_option\":\"cupidatat sit officia adipisicing\",\"authentication_domains\":\"ut\",\"authentication_exception\":[{\"name\":\"exercitation sint\",\"email\":\"am4T@wKpmHFsjtEvdNVzH.ayka\"},{\"name\":\"Lorem incididunt sunt Excepteur\",\"email\":\"PCwybEtFS@MKgLnCLlWhfa.qme\"}],\"additional_data_center_regions\":[\"sit consequat labore\",\"consectetur ut Duis\"],\"breakout_room\":{\"enable\":false,\"rooms\":[{\"name\":\"fugiat dolor\",\"participants\":[\"nisi ut enim Duis\",\"nostrud elit voluptate\"]},{\"name\":\"in\",\"participants\":[\"cupidatat ad nostrud\",\"aliqua Lorem\"]}]},\"language_interpretation\":{\"enable\":true,\"interpreters\":[{\"email\":\"Lntg0bAj2z4ub@sdppYYfPAxkEgVpZjyWEzdqRgWwXet.or\",\"languages\":\"amet magna minim\"},{\"email\":\"ZrxfD@WwsIbxmwVak.owrq\",\"languages\":\"do enim Duis reprehenderit\"}]},\"show_share_button\":true,\"allow_multiple_devices\":false,\"encryption_type\":\"e2ee\",\"approved_or_denied_countries_or_regions\":{\"enable\":false,\"method\":\"approve\",\"approved_list\":[\"ut commodo dolore velit\",\"aliquip Duis dolore ei\"],\"denied_list\":[\"minim ipsum velit Duis\",\"aliquip sit\"]},\"alternative_hosts_email_notification\":true,\"focus_mode\":false,\"meeting_invitees\":[{\"email\":\"S-M@GPPwL.vjkd\"},{\"email\":\"KSO@rOXNSG.xeam\"}]}",
															"description": "Information about the meeting's settings.",
															"type": "text"
														},
														{
															"key": "template_id",
															"value": "cupidatat amet commodo",
															"description": "The **account admin meeting template** ID with which to schedule a meeting using a [meeting template](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates). For a list of account admin-provided meeting templates, use the [**List meeting templates**](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/listmeetingtemplates) API. \n* At this time, this field **only** accepts account admin meeting template IDs. \n* To enable the account admin meeting templates feature, [contact Zoom support](https://support.zoom.us/hc/en-us).",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/meetings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"meetings"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "assistants",
							"item": [
								{
									"name": "List user assistants",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/assistants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"assistants"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										},
										"description": "List a user's assistants. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nAssistants are the users to whom the current user has assigned [scheduling privilege](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-Privilege). These assistants can schedule meeting on behalf of the current user as well as manage and act as an alternative host for all meetings if the admin has enabled [Co-host option](https://zoom.us/account/setting) on the account.\n\n**Scopes:** `user:read:admin`, `user:read`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n**Prerequisites:** \n* Current user as well as the assistant must have Licensed or an On-prem license.\n* Assistants must be under the current user's account."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nSuccess.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/assistants",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"assistants"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"assistants\": [\n  {\n   \"id\": \"ddgdfgfdgfgg\",\n   \"email\": \"example@example.com\"\n  }\n ]\n}"
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.<br>",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/assistants",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"assistants"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add assistants",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "assistants",
													"value": "[{\"id\":\"sint eu eiusmod Duis\",\"email\":\"esse sunt Duis\"},{\"id\":\"fugiat culpa\",\"email\":\"ea qui mollit sit\"}]",
													"description": "List of User's assistants.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/assistants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"assistants"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										},
										"description": "Use this API to assign assistants to a user. In the request body, provide either the user's ID or the user's email address. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter. \n\n Assistants are users to whom the current user has assigned the [scheduling privilege](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-Privilege). These assistants can schedule meetings on behalf of the current user. Assistants can also manage and act as an alternative host for the user's meetings if the administrator has enabled the [co-host feature](https://support.zoom.us/hc/en-us/articles/206330935-Enabling-and-adding-a-co-host) on the account.\n\n**Scopes:** `user:write:admin`, `user:write` </br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` \n\n**Prerequisites:** \n* The user and the assistant must have a Licensed or an On-prem license. \n* Assistants must be under the current user's account or in the same organization with the current user's account."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `201`<br>\nAssistant added.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "assistants",
															"value": "[{\"id\":\"id nisi consectetur\",\"email\":\"reprehenderit\"},{\"id\":\"deserunt dolore\",\"email\":\"amet est\"}]",
															"description": "List of User's assistants.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/assistants",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"assistants"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Location",
													"value": "culpa velit reprehenderit",
													"description": "Location of created assistant"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"ids\": \"string\",\n \"add_at\": \"string [date-time]\"\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br><br>\n**Error Code:** `200`<br>\nCurrent account must be paid account: $userId <br>\nThe user must either be a Licensed user or an On-prem user : $userId. <br>\nCan't assign scheduling privilege to yourself.<br>\n",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "assistants",
															"value": "[{\"id\":\"id nisi consectetur\",\"email\":\"reprehenderit\"},{\"id\":\"deserunt dolore\",\"email\":\"amet est\"}]",
															"description": "List of User's assistants.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/assistants",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"assistants"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.<br>",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "assistants",
															"value": "[{\"id\":\"id nisi consectetur\",\"email\":\"reprehenderit\"},{\"id\":\"deserunt dolore\",\"email\":\"amet est\"}]",
															"description": "List of User's assistants.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/assistants",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"assistants"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete user assistants",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/assistants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"assistants"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										},
										"description": "Delete all assistants of the current user. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nAssistants are the users to whom the current user has assigned [scheduling privilege](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-Privilege). These assistants can schedule meeting on behalf of the current user as well as manage and act as an alternative host for all meetings if the admin has enabled [Co-host option](https://zoom.us/account/setting) on the account.\n\n**Scopes:** `user:write:admin`, `user:write`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* The user as well as the assistant must have Licensed or an On-prem license.\n* Assistants must be under the current user's account."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` **No Content**<br>\nAssistants deleted.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/assistants",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"assistants"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.<br>",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/assistants",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"assistants"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a user assistant",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/assistants/:assistantId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"assistants",
												":assistantId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												},
												{
													"key": "assistantId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Assistant ID."
												}
											]
										},
										"description": "Delete a specific assistant of a user. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nAssistants are the users to whom the current user has assigned [scheduling privilege](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-Privilege). These assistants can schedule meeting on behalf of the current user as well as manage and act as an alternative host for all meetings if the admin has enabled [Co-host option](https://zoom.us/account/setting) on the account.\n\n**Scopes:** `user:write:admin`, `user:write`</br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* The user as well as the assistant must have Licensed or an On-prem license.\n* Assistants must be under the current user's account."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` **OK**<br>\nAssistant deleted.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/assistants/:assistantId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"assistants",
														":assistantId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														},
														{
															"key": "assistantId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Assistant ID."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.\n",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/assistants/:assistantId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"assistants",
														":assistantId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														},
														{
															"key": "assistantId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Assistant ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "schedulers",
							"item": [
								{
									"name": "List user schedulers",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/schedulers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"schedulers"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										},
										"description": "List all the schedulers of a user. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nSchedulers in this context are the users for whom the current user can schedule meetings for. For example, if the current user (the user whose `userId` was passed in the `path` parameter) is \"user A\", the response of this API will contain a list of user(s), for whom user A can schedule and manage meetings. User A is the assistant of these users and thus has scheduling privilege for these user(s).\n\n**Scopes:** `user:read:admin`, `user:read`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n**Prerequisites:** \n* Current user must be under the same account as the scheduler."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>Successfully listed all schedulers of the user.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/schedulers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"schedulers"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"schedulers\": [\n  {\n   \"id\": \"abXXXsfsidfhjdsfhd768944\",\n   \"email\": \"example@example.com\"\n  },\n  {\n   \"id\": \"abXXbbbbioepur8944\",\n   \"email\": \"example-2@example.com\"\n  }\n ]\n}"
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/schedulers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"schedulers"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete user schedulers",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/schedulers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"schedulers"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										},
										"description": "Delete all of a user's schedulers. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nSchedulers are users on whose behalf the current user (assistant) can schedule meetings for. By calling this API, the current user will no longer be a scheduling assistant of any user. \n\n**Scopes:** `user:write:admin`, `user:write`</br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* Current user (assistant) must be under the same account as the scheduler."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204`<br> All schedulers deleted.\n",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/schedulers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"schedulers"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"\""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.\n",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/schedulers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"schedulers"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a scheduler",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/schedulers/:schedulerId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"schedulers",
												":schedulerId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												},
												{
													"key": "schedulerId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Scheduler's ID."
												}
											]
										},
										"description": "Delete a scheduler. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nSchedulers are users on whose behalf the current user (assistant) can schedule meetings for. By calling this API, the current user will no longer be a scheduling assistant of this scheduler.\n\n**Scopes:** `user:write:admin`, `user:write`</br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* Current user must be under the same account as the scheduler."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204`<br>\nScheduler deleted.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/schedulers/:schedulerId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"schedulers",
														":schedulerId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														},
														{
															"key": "schedulerId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Scheduler's ID."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.\n",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/schedulers/:schedulerId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"schedulers",
														":schedulerId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														},
														{
															"key": "schedulerId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Scheduler's ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "picture",
							"item": [
								{
									"name": "Upload a user's profile picture",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "pic_file",
													"description": "(Required) The file's path. ",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/picture",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"picture"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										},
										"description": "Upload a user's profile picture. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nProvide `multipart/form-data` as the value of the `content-type` header for this request. This API supports `.jpeg` and `.png` file formats.\n\n**Scopes:** `user:write:admin`, `user:write`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `201`<br>Picture uploaded.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "pic_file",
															"description": "(Required) The file's path. ",
															"type": "file",
															"src": []
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/picture",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"picture"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Location",
													"value": "culpa velit reprehenderit",
													"description": "Location of user's picture"
												},
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `300`<br>\nYour request was not accepted because the profile picture contains invalid or explicit content.<br>\n**Error Code:** `200`<br>\nOnly an account administrator can change a profile pict",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "pic_file",
															"description": "(Required) The file's path. ",
															"type": "file",
															"src": []
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/picture",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"picture"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.\n",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "pic_file",
															"description": "(Required) The file's path. ",
															"type": "file",
															"src": []
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/picture",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"picture"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a user's profile picture",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/picture",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"picture"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										},
										"description": "Use this API to delete a user's profile picture. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter. \n\n**Scopes:** `user:write:admin`, `user:write` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204`<br>\nNo Content<br>\nUser picture deleted.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/picture",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"picture"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400`<br>\nBad request<br><br>\n**Error Code:** `200`<br>\nOnly an account administrator can change a profile picture.<br>",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/picture",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"picture"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nNot Found<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.\n",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/picture",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"picture"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "settings",
							"item": [
								{
									"name": "virtual backgrounds",
									"item": [
										{
											"name": "Upload virtual background file",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "laboris consequat sunt ut irure",
															"description": "The virtual background's file path.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/settings/virtual_backgrounds",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"settings",
														"virtual_backgrounds"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user's ID. To get a user's ID, use the [**List users**](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/users) API. For user-level apps, pass the `me` value instead of the user ID value."
														}
													]
												},
												"description": "Use this API to [upload a virtual background file](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background) to a user's profile. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter. \n\n **Note:** \n* A user profile cannot exceed more than 10 virtual background files. \n* You can only upload image files that are in JPG/JPEG, GIF or PNG format. \n* Video files must be in MP4 or MOV file format with a minimum resolution of 480 by 360 pixels (360p) and a maximum resolution of 1920 by 1080 pixels (1080p). \n* The virtual background file size cannot exceed 15 megabytes (MB). \n\n**Scopes:** `user:write`, `user:write:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` \n\n**Prerequisites:** \n* The [**Virtual Background**](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background#h_2ef28080-fce9-4ac2-b567-dc958afab1b7) feature must be enabled on the account."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `201` **Created**",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"value": "laboris consequat sunt ut irure",
																	"description": "The virtual background's file path.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/users/:userId/settings/virtual_backgrounds",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"settings",
																"virtual_backgrounds"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The user's ID. To get a user's ID, use the [**List users**](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/users) API. For user-level apps, pass the `me` value instead of the user ID value."
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"id\": \"_Tcj7354w6eHw\",\n \"name\": \"u=mdbhhfg3y7&fm=2fdjs0.jpg\",\n \"type\": \"image\",\n \"is_default\": false,\n \"size\": 53434\n}"
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request** \n\n**Error Code:** `120`<br>\nNo file uploaded, verify that a file has been uploaded.<br>\nFile size cannot exceed 15M.<br>\nA maximum of 10 files are allowed for a user.<br>\nOnly jpg/jpeg, gif or png image file can",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"value": "laboris consequat sunt ut irure",
																	"description": "The virtual background's file path.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/users/:userId/settings/virtual_backgrounds",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"settings",
																"virtual_backgrounds"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The user's ID. To get a user's ID, use the [**List users**](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/users) API. For user-level apps, pass the `me` value instead of the user ID value."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found** <br>\nGroup not found.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"value": "laboris consequat sunt ut irure",
																	"description": "The virtual background's file path.",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/users/:userId/settings/virtual_backgrounds",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"settings",
																"virtual_backgrounds"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The user's ID. To get a user's ID, use the [**List users**](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/users) API. For user-level apps, pass the `me` value instead of the user ID value."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Delete virtual background files",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/settings/virtual_backgrounds?file_ids=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"settings",
														"virtual_backgrounds"
													],
													"query": [
														{
															"key": "file_ids",
															"value": "culpa velit reprehenderit",
															"description": "A comma-seprated list of the virtual background file IDs to delete."
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user's ID. To get a user's ID, use the [**List users**](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/users) API. For user-level apps, pass the `me` value instead of the user ID value."
														}
													]
												},
												"description": "Use this API to delete a user's virtual background files. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter. \n\n**Scopes:** `user:write`, `user:write:admin` <br >**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n**Prerequisites:** \n* The [**Virtual Background**](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background#h_2ef28080-fce9-4ac2-b567-dc958afab1b7) feature must be enabled on the account."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `204` **No Content** <br>\nDeleted.\n",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/settings/virtual_backgrounds?file_ids=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"settings",
																"virtual_backgrounds"
															],
															"query": [
																{
																	"key": "file_ids",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The user's ID. To get a user's ID, use the [**List users**](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/users) API. For user-level apps, pass the `me` value instead of the user ID value."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `400` **Bad Request** \n\n**Error Code:** `300` <br>\nInvalid parameter: file_ids.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/settings/virtual_backgrounds?file_ids=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"settings",
																"virtual_backgrounds"
															],
															"query": [
																{
																	"key": "file_ids",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The user's ID. To get a user's ID, use the [**List users**](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/users) API. For user-level apps, pass the `me` value instead of the user ID value."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404` **Not Found** \n\n**Error Code:** `1001` <br>\nUser not exist. <br>\nUser {userId} does not exist or does not belong to this account.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/settings/virtual_backgrounds?file_ids=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"settings",
																"virtual_backgrounds"
															],
															"query": [
																{
																	"key": "file_ids",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The user's ID. To get a user's ID, use the [**List users**](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/users) API. For user-level apps, pass the `me` value instead of the user ID value."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get user settings",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/settings?login_type=1&option=recording_authentication&custom_query_fields=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"settings"
											],
											"query": [
												{
													"key": "login_type",
													"value": "1",
													"description": "The user's login method:\n\n`0` — Facebook OAuth</br>`1` — Google OAuth</br>`24` — Apple OAuth</br>`27` — Microsoft OAuth</br>`97` — Mobile device</br>`98` — RingCentral OAuth</br>`99` — API user</br>`100` — Zoom Work email</br>`101` — Single Sign-On (SSO)\n\nThe following login methods are only available in China:\n\n`11` — Phone number</br>`21` — WeChat</br>`23` — Alipay"
												},
												{
													"key": "option",
													"value": "recording_authentication",
													"description": "`meeting_authentication`: Use this query parameter to view [meeting authentication configuration](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) applied on the user's account.<br>`recording_authentication`: Use this query parameter to view [recording authentication configuration](https://support.zoom.us/hc/en-us/articles/360037756671-Authentication-Profiles-for-Cloud-Recordings) applied on the user's account.<br>\n`meeting_security`: Use this query parameter to view meeting security settings applied on the user's account.<br>"
												},
												{
													"key": "custom_query_fields",
													"value": "culpa velit reprehenderit",
													"description": "Provide the name of the field by which you would like to filter the response. For example, if you provide \"host_video\" as the value of this field, you will get a response similar to the following:<br>\n{\n    \"schedule_meeting\": {\n        \"host_video\": false\n    }\n}\n<br>You can provide multiple values by separating them with commas(example: \"host_video,participant_video”)."
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										},
										"description": "Retrieve a user's settings. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\n**Scopes:** `user:read:admin`, `user:read`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nUser settings returned.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/settings?login_type=1&option=recording_authentication&custom_query_fields=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"settings"
													],
													"query": [
														{
															"key": "login_type",
															"value": "1"
														},
														{
															"key": "option",
															"value": "recording_authentication"
														},
														{
															"key": "custom_query_fields",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"schedule_meeting\": {\n  \"audio_type\": \"both\",\n  \"embed_password_in_join_link\": false,\n  \"force_pmi_jbh_password\": true,\n  \"host_video\": true,\n  \"join_before_host\": false,\n  \"meeting_password_requirement\": {\n   \"have_letter\": true,\n   \"have_number\": false,\n   \"have_special_character\": false,\n   \"length\": 6,\n   \"only_allow_numeric\": false\n  },\n  \"not_store_meeting_topic\": false,\n  \"participants_video\": false,\n  \"pmi_password\": \"98654\",\n  \"pstn_password_protected\": false,\n  \"require_password_for_pmi_meetings\": \"all\",\n  \"require_password_for_scheduling_new_meetings\": false,\n  \"use_pmi_for_instant_meetings\": true,\n  \"use_pmi_for_scheduled_meetings\": false\n },\n \"in_meeting\": {\n  \"allow_live_streaming\": false,\n  \"annotation\": true,\n  \"attendee_on_hold\": false,\n  \"auto_saving_chat\": false,\n  \"breakout_room\": true,\n  \"breakout_room_schedule\": true,\n  \"chat\": true,\n  \"allow_participants_chat_with\": 2,\n  \"allow_users_save_chats\": 2,\n  \"closed_caption\": true,\n  \"co_host\": false,\n  \"custom_data_center_regions\": true,\n  \"data_center_regions\": [\n   \"AU\",\n   \"CN\",\n   \"EU\",\n   \"HK\",\n   \"LA\",\n   \"TY\",\n   \"US\"\n  ],\n  \"e2e_encryption\": false,\n  \"entry_exit_chime\": \"all\",\n  \"far_end_camera_control\": false,\n  \"feedback\": true,\n  \"group_hd\": false,\n  \"non_verbal_feedback\": false,\n  \"polling\": true,\n  \"private_chat\": true,\n  \"record_play_voice\": false,\n  \"remote_control\": true,\n  \"remote_support\": false,\n  \"show_meeting_control_toolbar\": false,\n  \"virtual_background\": true,\n  \"waiting_room\": false,\n  \"show_a_join_from_your_browser_link\": true,\n  \"join_from_mobile\": true,\n  \"join_from_desktop\": true,\n  \"live_streaming_facebook\": true,\n  \"workplace_by_facebook\": true,\n  \"live_streaming_youtube\": true,\n  \"custom_live_streaming_service\": true,\n  \"webinar_live_streaming\": {\n   \"enable\": true,\n   \"live_streaming_service\": [\n    \"facebook\",\n    \"workplace_by_facebook\",\n    \"youtube\",\n    \"custom_live_streaming_service\"\n   ],\n   \"custom_service_instructions\": \"specific instructions\",\n   \"live_streaming_reminder\": true\n  },\n  \"webinar_chat\": {\n   \"enable\": true,\n   \"allow_panelists_chat_with\": 1,\n   \"allow_attendees_chat_with\": 1,\n   \"default_attendees_chat_with\": 1,\n   \"allow_panelists_send_direct_message\": true,\n   \"allow_users_save_chats\": 1,\n   \"allow_auto_save_local_chat_file\": true\n  },\n  \"closed_captioning\": {\n   \"enable\": true,\n   \"third_party_captioning_service\": false,\n   \"auto_transcribing\": true,\n   \"view_full_transcript\": true,\n   \"save_caption\": true\n  },\n  \"slide_control\": true,\n  \"meeting_survey\": true,\n  \"webinar_polling\": {\n   \"enable\": true,\n   \"advanced_polls\": true\n  },\n  \"webinar_survey\": true\n },\n \"email_notification\": {\n  \"cloud_recording_available_reminder\": true,\n  \"recording_available_reminder_schedulers\": true,\n  \"recording_available_reminder_alternative_hosts\": true,\n  \"jbh_reminder\": false,\n  \"cancel_meeting_reminder\": false,\n  \"alternative_host_reminder\": false,\n  \"schedule_for_reminder\": false\n },\n \"recording\": {\n  \"auto_delete_cmr\": false,\n  \"auto_recording\": \"none\",\n  \"cloud_recording\": true,\n  \"local_recording\": true,\n  \"record_audio_file\": true,\n  \"record_gallery_view\": false,\n  \"record_speaker_view\": true,\n  \"recording_audio_transcript\": true,\n  \"recording_password_requirement\": {\n   \"have_letter\": true,\n   \"have_number\": true,\n   \"have_special_character\": true,\n   \"length\": 8,\n   \"only_allow_numeric\": false\n  },\n  \"save_chat_text\": true,\n  \"show_timestamp\": false\n },\n \"telephony\": {\n  \"third_party_audio\": false,\n  \"audio_conference_info\": \"\",\n  \"show_international_numbers_link\": false\n },\n \"feature\": {\n  \"meeting_capacity\": 100,\n  \"large_meeting\": false,\n  \"webinar\": false,\n  \"cn_meeting\": true,\n  \"in_meeting\": false,\n  \"zoom_phone\": false,\n  \"concurrent_meeting\": \"Plus\"\n },\n \"tsp\": {\n  \"call_out\": true,\n  \"call_out_countries\": [\n   \"USA\"\n  ],\n  \"show_international_numbers_link\": false\n }\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n\n**Error Code:** `1120`<br>\nA valid invitation to join the Zoom account was not found for this user. <br>\nThis error is thrown if you added a user in your account but the user did not accept the invitation o",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/settings?login_type=1&option=recording_authentication&custom_query_fields=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"settings"
													],
													"query": [
														{
															"key": "login_type",
															"value": "1"
														},
														{
															"key": "option",
															"value": "recording_authentication"
														},
														{
															"key": "custom_query_fields",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/settings?login_type=1&option=recording_authentication&custom_query_fields=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"settings"
													],
													"query": [
														{
															"key": "login_type",
															"value": "1"
														},
														{
															"key": "option",
															"value": "recording_authentication"
														},
														{
															"key": "custom_query_fields",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update user settings",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "schedule_meeting",
													"value": "{\"host_video\":true,\"participants_video\":false,\"audio_type\":\"voip\",\"join_before_host\":false,\"force_pmi_jbh_password\":true,\"pstn_password_protected\":false,\"use_pmi_for_scheduled_meetings\":true,\"use_pmi_for_instant_meetings\":true,\"require_password_for_scheduling_new_meetings\":false,\"require_password_for_scheduled_meetings\":false,\"default_password_for_scheduled_meetings\":\"dolore nisi eu dolore\",\"require_password_for_instant_meetings\":true,\"require_password_for_pmi_meetings\":\"all\",\"pmi_password\":\"ut\",\"embed_password_in_join_link\":true,\"meeting_password_requirement\":{\"length\":88910602,\"have_letter\":false,\"have_number\":true,\"have_special_character\":true,\"only_allow_numeric\":false,\"have_upper_and_lower_characters\":false,\"consecutive_characters_length\":6,\"weak_enhance_detection\":false},\"personal_meeting\":false}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "in_meeting",
													"value": "{\"e2e_encryption\":false,\"chat\":false,\"allow_participants_chat_with\":1,\"allow_users_save_chats\":3,\"private_chat\":false,\"auto_saving_chat\":false,\"entry_exit_chime\":\"all\",\"record_play_voice\":false,\"feedback\":false,\"co_host\":false,\"polling\":false,\"attendee_on_hold\":false,\"annotation\":false,\"remote_control\":false,\"non_verbal_feedback\":false,\"breakout_room\":false,\"breakout_room_schedule\":true,\"remote_support\":false,\"closed_caption\":false,\"group_hd\":false,\"virtual_background\":false,\"virtual_background_settings\":{\"enable\":true,\"allow_videos\":false,\"allow_upload_custom\":true,\"files\":[{\"id\":\"qui sit amet ut\",\"name\":\"commodo reprehenderit ut aliquip\",\"type\":\"labore Lorem\",\"is_default\":false,\"size\":\"Duis Ut\"},{\"id\":\"ut id\",\"name\":\"dolore\",\"type\":\"in id officia\",\"is_default\":true,\"size\":\"est ex cupidatat sunt\"}]},\"far_end_camera_control\":false,\"share_dual_camera\":false,\"waiting_room\":false,\"allow_live_streaming\":false,\"live_streaming_facebook\":false,\"workplace_by_facebook\":true,\"live_streaming_youtube\":true,\"custom_live_streaming_service\":false,\"custom_service_instructions\":\"nostrud ad\",\"show_meeting_control_toolbar\":true,\"custom_data_center_regions\":false,\"data_center_regions\":\"HK\",\"meeting_reactions\":true,\"screen_sharing\":true,\"who_can_share_screen\":\"host\",\"who_can_share_screen_when_someone_is_sharing\":\"host\",\"file_transfer\":true,\"request_permission_to_unmute\":true,\"show_a_join_from_your_browser_link\":true,\"join_from_mobile\":true,\"join_from_desktop\":false,\"webinar_live_streaming\":{\"enable\":false,\"live_streaming_service\":[\"youtube\",\"facebook\"],\"custom_service_instructions\":\"dolore pariatur proident eu\",\"live_streaming_reminder\":true},\"webinar_chat\":{\"enable\":true,\"allow_panelists_chat_with\":2,\"allow_attendees_chat_with\":3,\"default_attendees_chat_with\":2,\"allow_panelists_send_direct_message\":false,\"allow_users_save_chats\":1,\"allow_auto_save_local_chat_file\":false},\"closed_captioning\":{\"enable\":true,\"third_party_captioning_service\":true,\"auto_transcribing\":true,\"view_full_transcript\":false,\"save_caption\":false},\"slide_control\":false,\"meeting_survey\":true,\"webinar_polling\":{\"enable\":true,\"advanced_polls\":false},\"webinar_survey\":false}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "email_notification",
													"value": "{\"cloud_recording_available_reminder\":false,\"recording_available_reminder_schedulers\":true,\"recording_available_reminder_alternative_hosts\":true,\"jbh_reminder\":false,\"cancel_meeting_reminder\":false,\"alternative_host_reminder\":false,\"schedule_for_reminder\":false}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "recording",
													"value": "{\"local_recording\":true,\"cloud_recording\":false,\"record_speaker_view\":false,\"record_gallery_view\":false,\"record_audio_file\":false,\"save_chat_text\":false,\"show_timestamp\":false,\"recording_audio_transcript\":true,\"auto_recording\":\"local\",\"host_pause_stop_recording\":false,\"auto_delete_cmr\":false,\"auto_delete_cmr_days\":30,\"recording_disclaimer\":false,\"ask_participants_to_consent_disclaimer\":false,\"ask_host_to_confirm_disclaimer\":false,\"recording_password_requirement\":{\"length\":-66663020,\"have_letter\":true,\"have_number\":false,\"have_special_character\":false,\"only_allow_numeric\":true},\"ip_address_access_control\":{\"enable\":true,\"ip_addresses_or_ranges\":\"labore incididunt\"}}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "telephony",
													"value": "{\"third_party_audio\":false,\"audio_conference_info\":\"\",\"show_international_numbers_link\":true,\"telephony_regions\":{\"selection_values\":\"adipisicing irure anim\"}}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "feature",
													"value": "{\"meeting_capacity\":57013941,\"large_meeting\":false,\"large_meeting_capacity\":45049248,\"webinar\":false,\"webinar_capacity\":22063214,\"zoom_events\":true,\"zoom_events_capacity\":50000,\"zoom_phone\":true,\"concurrent_meeting\":\"Plus\"}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "tsp",
													"value": "{\"call_out\":false,\"show_international_numbers_link\":true}",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "profile",
													"value": "{\"recording_storage_location\":{\"allowed_values\":[\"incididunt adipisicing in Excepteur\",\"cupi\"],\"value\":\"officia enim mollit voluptate in\"}}",
													"description": "undefined",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/settings?option=recording_authentication",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"settings"
											],
											"query": [
												{
													"key": "option",
													"value": "recording_authentication"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										},
										"description": "Update a user's settings. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\n**Scopes:** `user:write:admin`, `user:write`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nUser settings updated",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "schedule_meeting",
															"value": "{\"host_video\":false,\"participants_video\":true,\"audio_type\":\"voip\",\"join_before_host\":true,\"force_pmi_jbh_password\":false,\"pstn_password_protected\":true,\"use_pmi_for_scheduled_meetings\":false,\"use_pmi_for_instant_meetings\":false,\"require_password_for_scheduling_new_meetings\":false,\"require_password_for_scheduled_meetings\":true,\"default_password_for_scheduled_meetings\":\"in aute irure deserunt laboris\",\"require_password_for_instant_meetings\":false,\"require_password_for_pmi_meetings\":\"none\",\"pmi_password\":\"a\",\"embed_password_in_join_link\":false,\"meeting_password_requirement\":{\"length\":46782816,\"have_letter\":true,\"have_number\":false,\"have_special_character\":false,\"only_allow_numeric\":true,\"have_upper_and_lower_characters\":true,\"consecutive_characters_length\":0,\"weak_enhance_detection\":true},\"personal_meeting\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "in_meeting",
															"value": "{\"e2e_encryption\":false,\"chat\":false,\"allow_participants_chat_with\":2,\"allow_users_save_chats\":1,\"private_chat\":false,\"auto_saving_chat\":false,\"entry_exit_chime\":\"all\",\"record_play_voice\":false,\"feedback\":false,\"co_host\":false,\"polling\":false,\"attendee_on_hold\":false,\"annotation\":false,\"remote_control\":false,\"non_verbal_feedback\":false,\"breakout_room\":false,\"breakout_room_schedule\":false,\"remote_support\":false,\"closed_caption\":false,\"group_hd\":false,\"virtual_background\":false,\"virtual_background_settings\":{\"enable\":false,\"allow_videos\":true,\"allow_upload_custom\":false,\"files\":[{\"id\":\"dolore\",\"name\":\"labore nulla laboris proident\",\"type\":\"mollit magna\",\"is_default\":false,\"size\":\"dolor\"},{\"id\":\"sint enim consectetur\",\"name\":\"id nisi amet\",\"type\":\"labore anim amet veniam\",\"is_default\":true,\"size\":\"aliqua in sit eu incididunt\"}]},\"far_end_camera_control\":false,\"share_dual_camera\":false,\"waiting_room\":false,\"allow_live_streaming\":false,\"live_streaming_facebook\":false,\"workplace_by_facebook\":false,\"live_streaming_youtube\":false,\"custom_live_streaming_service\":false,\"custom_service_instructions\":\"et\",\"show_meeting_control_toolbar\":false,\"custom_data_center_regions\":true,\"data_center_regions\":\"NL\",\"meeting_reactions\":true,\"screen_sharing\":false,\"who_can_share_screen\":\"host\",\"who_can_share_screen_when_someone_is_sharing\":\"host\",\"file_transfer\":false,\"request_permission_to_unmute\":false,\"show_a_join_from_your_browser_link\":false,\"join_from_mobile\":false,\"join_from_desktop\":false,\"webinar_live_streaming\":{\"enable\":false,\"live_streaming_service\":[\"workplace_by_facebook\",\"custom_live_streaming_service\"],\"custom_service_instructions\":\"dolo\",\"live_streaming_reminder\":false},\"webinar_chat\":{\"enable\":true,\"allow_panelists_chat_with\":1,\"allow_attendees_chat_with\":1,\"default_attendees_chat_with\":1,\"allow_panelists_send_direct_message\":true,\"allow_users_save_chats\":2,\"allow_auto_save_local_chat_file\":false},\"closed_captioning\":{\"enable\":true,\"third_party_captioning_service\":false,\"auto_transcribing\":true,\"view_full_transcript\":false,\"save_caption\":false},\"slide_control\":true,\"meeting_survey\":true,\"webinar_polling\":{\"enable\":false,\"advanced_polls\":true},\"webinar_survey\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "email_notification",
															"value": "{\"cloud_recording_available_reminder\":false,\"recording_available_reminder_schedulers\":false,\"recording_available_reminder_alternative_hosts\":false,\"jbh_reminder\":false,\"cancel_meeting_reminder\":false,\"alternative_host_reminder\":false,\"schedule_for_reminder\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "recording",
															"value": "{\"local_recording\":false,\"cloud_recording\":false,\"record_speaker_view\":false,\"record_gallery_view\":false,\"record_audio_file\":false,\"save_chat_text\":false,\"show_timestamp\":false,\"recording_audio_transcript\":false,\"auto_recording\":\"local\",\"host_pause_stop_recording\":false,\"auto_delete_cmr\":false,\"auto_delete_cmr_days\":30,\"recording_disclaimer\":true,\"ask_participants_to_consent_disclaimer\":true,\"ask_host_to_confirm_disclaimer\":true,\"recording_password_requirement\":{\"length\":-63783843,\"have_letter\":false,\"have_number\":false,\"have_special_character\":true,\"only_allow_numeric\":false},\"ip_address_access_control\":{\"enable\":false,\"ip_addresses_or_ranges\":\"nisi veniam\"}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "telephony",
															"value": "{\"third_party_audio\":true,\"audio_conference_info\":\"\",\"show_international_numbers_link\":true,\"telephony_regions\":{\"selection_values\":\"in amet minim\"}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "feature",
															"value": "{\"meeting_capacity\":90711753,\"large_meeting\":true,\"large_meeting_capacity\":99147731,\"webinar\":true,\"webinar_capacity\":-61427818,\"zoom_events\":true,\"zoom_events_capacity\":3000,\"zoom_phone\":true,\"concurrent_meeting\":\"None\"}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "tsp",
															"value": "{\"call_out\":false,\"show_international_numbers_link\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "profile",
															"value": "{\"recording_storage_location\":{\"allowed_values\":[\"dolor exercitation esse\",\"enim nulla Excepteur ipsum\"],\"value\":\"esse eu quis\"}}",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/settings?option=recording_authentication",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"settings"
													],
													"query": [
														{
															"key": "option",
															"value": "recording_authentication"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request** <br><br>\n**Error Code:** `1108`<br> Only Licensed or On-prem users can enable the large meeting feature.<br><br>\n**Error Code:** `1204`<br> You can't enable the Webinar feature because you already have the Zoom ",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "schedule_meeting",
															"value": "{\"host_video\":false,\"participants_video\":true,\"audio_type\":\"voip\",\"join_before_host\":true,\"force_pmi_jbh_password\":false,\"pstn_password_protected\":true,\"use_pmi_for_scheduled_meetings\":false,\"use_pmi_for_instant_meetings\":false,\"require_password_for_scheduling_new_meetings\":false,\"require_password_for_scheduled_meetings\":true,\"default_password_for_scheduled_meetings\":\"in aute irure deserunt laboris\",\"require_password_for_instant_meetings\":false,\"require_password_for_pmi_meetings\":\"none\",\"pmi_password\":\"a\",\"embed_password_in_join_link\":false,\"meeting_password_requirement\":{\"length\":46782816,\"have_letter\":true,\"have_number\":false,\"have_special_character\":false,\"only_allow_numeric\":true,\"have_upper_and_lower_characters\":true,\"consecutive_characters_length\":0,\"weak_enhance_detection\":true},\"personal_meeting\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "in_meeting",
															"value": "{\"e2e_encryption\":false,\"chat\":false,\"allow_participants_chat_with\":2,\"allow_users_save_chats\":1,\"private_chat\":false,\"auto_saving_chat\":false,\"entry_exit_chime\":\"all\",\"record_play_voice\":false,\"feedback\":false,\"co_host\":false,\"polling\":false,\"attendee_on_hold\":false,\"annotation\":false,\"remote_control\":false,\"non_verbal_feedback\":false,\"breakout_room\":false,\"breakout_room_schedule\":false,\"remote_support\":false,\"closed_caption\":false,\"group_hd\":false,\"virtual_background\":false,\"virtual_background_settings\":{\"enable\":false,\"allow_videos\":true,\"allow_upload_custom\":false,\"files\":[{\"id\":\"dolore\",\"name\":\"labore nulla laboris proident\",\"type\":\"mollit magna\",\"is_default\":false,\"size\":\"dolor\"},{\"id\":\"sint enim consectetur\",\"name\":\"id nisi amet\",\"type\":\"labore anim amet veniam\",\"is_default\":true,\"size\":\"aliqua in sit eu incididunt\"}]},\"far_end_camera_control\":false,\"share_dual_camera\":false,\"waiting_room\":false,\"allow_live_streaming\":false,\"live_streaming_facebook\":false,\"workplace_by_facebook\":false,\"live_streaming_youtube\":false,\"custom_live_streaming_service\":false,\"custom_service_instructions\":\"et\",\"show_meeting_control_toolbar\":false,\"custom_data_center_regions\":true,\"data_center_regions\":\"NL\",\"meeting_reactions\":true,\"screen_sharing\":false,\"who_can_share_screen\":\"host\",\"who_can_share_screen_when_someone_is_sharing\":\"host\",\"file_transfer\":false,\"request_permission_to_unmute\":false,\"show_a_join_from_your_browser_link\":false,\"join_from_mobile\":false,\"join_from_desktop\":false,\"webinar_live_streaming\":{\"enable\":false,\"live_streaming_service\":[\"workplace_by_facebook\",\"custom_live_streaming_service\"],\"custom_service_instructions\":\"dolo\",\"live_streaming_reminder\":false},\"webinar_chat\":{\"enable\":true,\"allow_panelists_chat_with\":1,\"allow_attendees_chat_with\":1,\"default_attendees_chat_with\":1,\"allow_panelists_send_direct_message\":true,\"allow_users_save_chats\":2,\"allow_auto_save_local_chat_file\":false},\"closed_captioning\":{\"enable\":true,\"third_party_captioning_service\":false,\"auto_transcribing\":true,\"view_full_transcript\":false,\"save_caption\":false},\"slide_control\":true,\"meeting_survey\":true,\"webinar_polling\":{\"enable\":false,\"advanced_polls\":true},\"webinar_survey\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "email_notification",
															"value": "{\"cloud_recording_available_reminder\":false,\"recording_available_reminder_schedulers\":false,\"recording_available_reminder_alternative_hosts\":false,\"jbh_reminder\":false,\"cancel_meeting_reminder\":false,\"alternative_host_reminder\":false,\"schedule_for_reminder\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "recording",
															"value": "{\"local_recording\":false,\"cloud_recording\":false,\"record_speaker_view\":false,\"record_gallery_view\":false,\"record_audio_file\":false,\"save_chat_text\":false,\"show_timestamp\":false,\"recording_audio_transcript\":false,\"auto_recording\":\"local\",\"host_pause_stop_recording\":false,\"auto_delete_cmr\":false,\"auto_delete_cmr_days\":30,\"recording_disclaimer\":true,\"ask_participants_to_consent_disclaimer\":true,\"ask_host_to_confirm_disclaimer\":true,\"recording_password_requirement\":{\"length\":-63783843,\"have_letter\":false,\"have_number\":false,\"have_special_character\":true,\"only_allow_numeric\":false},\"ip_address_access_control\":{\"enable\":false,\"ip_addresses_or_ranges\":\"nisi veniam\"}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "telephony",
															"value": "{\"third_party_audio\":true,\"audio_conference_info\":\"\",\"show_international_numbers_link\":true,\"telephony_regions\":{\"selection_values\":\"in amet minim\"}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "feature",
															"value": "{\"meeting_capacity\":90711753,\"large_meeting\":true,\"large_meeting_capacity\":99147731,\"webinar\":true,\"webinar_capacity\":-61427818,\"zoom_events\":true,\"zoom_events_capacity\":3000,\"zoom_phone\":true,\"concurrent_meeting\":\"None\"}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "tsp",
															"value": "{\"call_out\":false,\"show_international_numbers_link\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "profile",
															"value": "{\"recording_storage_location\":{\"allowed_values\":[\"dolor exercitation esse\",\"enim nulla Excepteur ipsum\"],\"value\":\"esse eu quis\"}}",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/settings?option=recording_authentication",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"settings"
													],
													"query": [
														{
															"key": "option",
															"value": "recording_authentication"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.\n",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "schedule_meeting",
															"value": "{\"host_video\":false,\"participants_video\":true,\"audio_type\":\"voip\",\"join_before_host\":true,\"force_pmi_jbh_password\":false,\"pstn_password_protected\":true,\"use_pmi_for_scheduled_meetings\":false,\"use_pmi_for_instant_meetings\":false,\"require_password_for_scheduling_new_meetings\":false,\"require_password_for_scheduled_meetings\":true,\"default_password_for_scheduled_meetings\":\"in aute irure deserunt laboris\",\"require_password_for_instant_meetings\":false,\"require_password_for_pmi_meetings\":\"none\",\"pmi_password\":\"a\",\"embed_password_in_join_link\":false,\"meeting_password_requirement\":{\"length\":46782816,\"have_letter\":true,\"have_number\":false,\"have_special_character\":false,\"only_allow_numeric\":true,\"have_upper_and_lower_characters\":true,\"consecutive_characters_length\":0,\"weak_enhance_detection\":true},\"personal_meeting\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "in_meeting",
															"value": "{\"e2e_encryption\":false,\"chat\":false,\"allow_participants_chat_with\":2,\"allow_users_save_chats\":1,\"private_chat\":false,\"auto_saving_chat\":false,\"entry_exit_chime\":\"all\",\"record_play_voice\":false,\"feedback\":false,\"co_host\":false,\"polling\":false,\"attendee_on_hold\":false,\"annotation\":false,\"remote_control\":false,\"non_verbal_feedback\":false,\"breakout_room\":false,\"breakout_room_schedule\":false,\"remote_support\":false,\"closed_caption\":false,\"group_hd\":false,\"virtual_background\":false,\"virtual_background_settings\":{\"enable\":false,\"allow_videos\":true,\"allow_upload_custom\":false,\"files\":[{\"id\":\"dolore\",\"name\":\"labore nulla laboris proident\",\"type\":\"mollit magna\",\"is_default\":false,\"size\":\"dolor\"},{\"id\":\"sint enim consectetur\",\"name\":\"id nisi amet\",\"type\":\"labore anim amet veniam\",\"is_default\":true,\"size\":\"aliqua in sit eu incididunt\"}]},\"far_end_camera_control\":false,\"share_dual_camera\":false,\"waiting_room\":false,\"allow_live_streaming\":false,\"live_streaming_facebook\":false,\"workplace_by_facebook\":false,\"live_streaming_youtube\":false,\"custom_live_streaming_service\":false,\"custom_service_instructions\":\"et\",\"show_meeting_control_toolbar\":false,\"custom_data_center_regions\":true,\"data_center_regions\":\"NL\",\"meeting_reactions\":true,\"screen_sharing\":false,\"who_can_share_screen\":\"host\",\"who_can_share_screen_when_someone_is_sharing\":\"host\",\"file_transfer\":false,\"request_permission_to_unmute\":false,\"show_a_join_from_your_browser_link\":false,\"join_from_mobile\":false,\"join_from_desktop\":false,\"webinar_live_streaming\":{\"enable\":false,\"live_streaming_service\":[\"workplace_by_facebook\",\"custom_live_streaming_service\"],\"custom_service_instructions\":\"dolo\",\"live_streaming_reminder\":false},\"webinar_chat\":{\"enable\":true,\"allow_panelists_chat_with\":1,\"allow_attendees_chat_with\":1,\"default_attendees_chat_with\":1,\"allow_panelists_send_direct_message\":true,\"allow_users_save_chats\":2,\"allow_auto_save_local_chat_file\":false},\"closed_captioning\":{\"enable\":true,\"third_party_captioning_service\":false,\"auto_transcribing\":true,\"view_full_transcript\":false,\"save_caption\":false},\"slide_control\":true,\"meeting_survey\":true,\"webinar_polling\":{\"enable\":false,\"advanced_polls\":true},\"webinar_survey\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "email_notification",
															"value": "{\"cloud_recording_available_reminder\":false,\"recording_available_reminder_schedulers\":false,\"recording_available_reminder_alternative_hosts\":false,\"jbh_reminder\":false,\"cancel_meeting_reminder\":false,\"alternative_host_reminder\":false,\"schedule_for_reminder\":false}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "recording",
															"value": "{\"local_recording\":false,\"cloud_recording\":false,\"record_speaker_view\":false,\"record_gallery_view\":false,\"record_audio_file\":false,\"save_chat_text\":false,\"show_timestamp\":false,\"recording_audio_transcript\":false,\"auto_recording\":\"local\",\"host_pause_stop_recording\":false,\"auto_delete_cmr\":false,\"auto_delete_cmr_days\":30,\"recording_disclaimer\":true,\"ask_participants_to_consent_disclaimer\":true,\"ask_host_to_confirm_disclaimer\":true,\"recording_password_requirement\":{\"length\":-63783843,\"have_letter\":false,\"have_number\":false,\"have_special_character\":true,\"only_allow_numeric\":false},\"ip_address_access_control\":{\"enable\":false,\"ip_addresses_or_ranges\":\"nisi veniam\"}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "telephony",
															"value": "{\"third_party_audio\":true,\"audio_conference_info\":\"\",\"show_international_numbers_link\":true,\"telephony_regions\":{\"selection_values\":\"in amet minim\"}}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "feature",
															"value": "{\"meeting_capacity\":90711753,\"large_meeting\":true,\"large_meeting_capacity\":99147731,\"webinar\":true,\"webinar_capacity\":-61427818,\"zoom_events\":true,\"zoom_events_capacity\":3000,\"zoom_phone\":true,\"concurrent_meeting\":\"None\"}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "tsp",
															"value": "{\"call_out\":false,\"show_international_numbers_link\":true}",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "profile",
															"value": "{\"recording_storage_location\":{\"allowed_values\":[\"dolor exercitation esse\",\"enim nulla Excepteur ipsum\"],\"value\":\"esse eu quis\"}}",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/settings?option=recording_authentication",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"settings"
													],
													"query": [
														{
															"key": "option",
															"value": "recording_authentication"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "tsp",
							"item": [
								{
									"name": "{tsp Id}",
									"item": [
										{
											"name": "Get a user's TSP account",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/tsp/:tspId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"tsp",
														":tspId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														},
														{
															"key": "tspId",
															"value": "1",
															"description": "(Required) TSP account ID."
														}
													]
												},
												"description": "Each user can have a maximum of two TSP accounts. Use this API to retrieve details of a specific TSP account enabled for a specific user.<br><br>\n**Scopes:** `tsp:read:admin` `tsp:read`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\nTSP account retrieved successfully.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/tsp/:tspId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"tsp",
																":tspId"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
																},
																{
																	"key": "tspId",
																	"value": "1",
																	"description": "(Required) TSP account ID."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"id\": \"0123444444\",\n \"conference_code\": \"1275454\",\n \"leader_pin\": \"111\",\n \"tsp_bridge\": \"string\",\n \"dial_in_numbers\": [\n  {\n   \"code\": \"675\",\n   \"number\": \"00000000\",\n   \"type\": \"toll\"\n  }\n ]\n}"
												},
												{
													"name": "**HTTP Status Code:** `400`<br>\nBad request.<br>\n**Error Code:** `300`<br>\nThe TSP id provided does not exist.<br>\n**Error Code:** `300`<br>\nTSP Config does not exist.<br>\n**Error Code:**`2024`<br>\nAccount has not enabled TSP.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/tsp/:tspId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"tsp",
																":tspId"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
																},
																{
																	"key": "tspId",
																	"value": "1",
																	"description": "(Required) TSP account ID."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\nNot Found.<br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.<br>\n**Error Code:**`1120`<br>\nA valid invitation to join the Zoom account was not found for this user.<br>\nThis error is thrown if you added a user in ",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/tsp/:tspId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"tsp",
																":tspId"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
																},
																{
																	"key": "tspId",
																	"value": "1",
																	"description": "(Required) TSP account ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Update a TSP account",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "conference_code",
															"value": "ut",
															"description": "(Required) Conference code: numeric value, length is less than 16.",
															"type": "text"
														},
														{
															"key": "leader_pin",
															"value": "sunt",
															"description": "(Required) Leader PIN: numeric value, length is less than 16.",
															"type": "text"
														},
														{
															"key": "dial_in_numbers",
															"value": "[{\"code\":\"Dui\",\"number\":\"a\",\"type\":\"media_link\",\"country_label\":\"ma\"},{\"code\":\"E\",\"number\":\"n\",\"type\":\"media_link\",\"country_label\":\"e\"}]",
															"description": "List of dial in numbers.",
															"type": "text"
														},
														{
															"key": "tsp_bridge",
															"value": "EU_TSP_TB",
															"description": "Telephony bridge (This can only be one of US_TSP_TB,EU_TSP_TB)",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/tsp/:tspId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"tsp",
														":tspId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														},
														{
															"key": "tspId",
															"value": "1",
															"description": "(Required) TSP account ID."
														}
													]
												},
												"description": "Update a user's TSP account.<br><br>\n**Scopes:** `tsp:write:admin` `tsp:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n"
											},
											"response": [
												{
													"name": "**HTTP Status Code:**`204` **No Content**<br>\nTSP account updated.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "conference_code",
																	"value": "et proi",
																	"description": "(Required) Conference code: numeric value, length is less than 16.",
																	"type": "text"
																},
																{
																	"key": "leader_pin",
																	"value": "esse Lor",
																	"description": "(Required) Leader PIN: numeric value, length is less than 16.",
																	"type": "text"
																},
																{
																	"key": "dial_in_numbers",
																	"value": "[{\"code\":\"Lo\",\"number\":\"sit cupidat\",\"type\":\"tollfree\",\"country_label\":\"dolo\"},{\"code\":\"sed\",\"number\":\"ulla\",\"type\":\"toll\",\"country_label\":\"esse\"}]",
																	"description": "List of dial in numbers.",
																	"type": "text"
																},
																{
																	"key": "tsp_bridge",
																	"value": "US_TSP_TB",
																	"description": "Telephony bridge (This can only be one of US_TSP_TB,EU_TSP_TB)",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/users/:userId/tsp/:tspId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"tsp",
																":tspId"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
																},
																{
																	"key": "tspId",
																	"value": "1",
																	"description": "(Required) TSP account ID."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `400`<br>\nBad request.<br>\n**Error Code:**`2024`<br>\nAccount has not enabled TSP.<br>\n**Error Code:**`300`<br>\nThe TSP id provided does not exist.<br>\n**Error Code:**`300`<br>\nTSP Config does not exist.<br>\n**Error Code:**`300`<br>\nA",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "conference_code",
																	"value": "et proi",
																	"description": "(Required) Conference code: numeric value, length is less than 16.",
																	"type": "text"
																},
																{
																	"key": "leader_pin",
																	"value": "esse Lor",
																	"description": "(Required) Leader PIN: numeric value, length is less than 16.",
																	"type": "text"
																},
																{
																	"key": "dial_in_numbers",
																	"value": "[{\"code\":\"Lo\",\"number\":\"sit cupidat\",\"type\":\"tollfree\",\"country_label\":\"dolo\"},{\"code\":\"sed\",\"number\":\"ulla\",\"type\":\"toll\",\"country_label\":\"esse\"}]",
																	"description": "List of dial in numbers.",
																	"type": "text"
																},
																{
																	"key": "tsp_bridge",
																	"value": "US_TSP_TB",
																	"description": "Telephony bridge (This can only be one of US_TSP_TB,EU_TSP_TB)",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/users/:userId/tsp/:tspId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"tsp",
																":tspId"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
																},
																{
																	"key": "tspId",
																	"value": "1",
																	"description": "(Required) TSP account ID."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\nNot Found.<br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.<br>\n**Error Code:**`1120`<br>\nA valid invitation to join the Zoom account was not found for this user.<br>\nThis error is thrown if you added a user in ",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "conference_code",
																	"value": "et proi",
																	"description": "(Required) Conference code: numeric value, length is less than 16.",
																	"type": "text"
																},
																{
																	"key": "leader_pin",
																	"value": "esse Lor",
																	"description": "(Required) Leader PIN: numeric value, length is less than 16.",
																	"type": "text"
																},
																{
																	"key": "dial_in_numbers",
																	"value": "[{\"code\":\"Lo\",\"number\":\"sit cupidat\",\"type\":\"tollfree\",\"country_label\":\"dolo\"},{\"code\":\"sed\",\"number\":\"ulla\",\"type\":\"toll\",\"country_label\":\"esse\"}]",
																	"description": "List of dial in numbers.",
																	"type": "text"
																},
																{
																	"key": "tsp_bridge",
																	"value": "US_TSP_TB",
																	"description": "Telephony bridge (This can only be one of US_TSP_TB,EU_TSP_TB)",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/users/:userId/tsp/:tspId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"tsp",
																":tspId"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
																},
																{
																	"key": "tspId",
																	"value": "1",
																	"description": "(Required) TSP account ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Delete a user's TSP account",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/tsp/:tspId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"tsp",
														":tspId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														},
														{
															"key": "tspId",
															"value": "1",
															"description": "(Required) TSP account ID."
														}
													]
												},
												"description": "Delete a user's TSP account.<br><br>\n**Scopes:** `tsp:write:admin` `tsp:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n"
											},
											"response": [
												{
													"name": "**Status Code:** `204` **No Content**<br>\nTSP account deleted.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/tsp/:tspId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"tsp",
																":tspId"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
																},
																{
																	"key": "tspId",
																	"value": "1",
																	"description": "(Required) TSP account ID."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `400`<br>\nBad request.<br>\n**Error Code:**`2024`<br>\nAccount not enable TSP.<br>\n**Error Code:** `300`<br>\nThe TSP id provided does not exist.<br>\n**Error Code:** `300`<br>\nTSP Config does not exist.<br>\n**Error Code:** `300`<br>\nAt ",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/tsp/:tspId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"tsp",
																":tspId"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
																},
																{
																	"key": "tspId",
																	"value": "1",
																	"description": "(Required) TSP account ID."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\nNot Found.<br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.<br>\n**Error Code:**`1120`<br>\nA valid invitation to join the Zoom account was not found for this user.<br>\nThis error is thrown if you added a user in ",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/:userId/tsp/:tspId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																":userId",
																"tsp",
																":tspId"
															],
															"variable": [
																{
																	"key": "userId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
																},
																{
																	"key": "tspId",
																	"value": "1",
																	"description": "(Required) TSP account ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "List user's TSP accounts",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/tsp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"tsp"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										},
										"description": "A user can have a maximum of two TSP accounts. Use this API to list all TSP accounts of a user.<br><br>\n**Scopes:** `tsp:read:admin` `tsp:read`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` **OK**<br>\nTSP account list returned successfully.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/tsp",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"tsp"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"tsp_accounts\": [\n  {\n   \"id\": 111222222,\n   \"conference_code\": \"0125\",\n   \"leader_pin\": \"11189898\",\n   \"tsp_bridge\": \"string\",\n   \"dial_in_numbers\": [\n    {\n     \"code\": \"01\",\n     \"number\": \"000000000\",\n     \"type\": \"toll\"\n    }\n   ]\n  }\n ]\n}"
										},
										{
											"name": "**HTTP Status Code:** `400`<br>\nBad request.<br>\n**Error Code:** `2024`<br>\nAccount has not enabled TSP.\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/tsp",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"tsp"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nNot Found.<br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.<br>\n**Error Code:**`1120`<br>\nA valid invitation to join the Zoom account was not found for this user.<br>\nThis error is thrown if you added a user in ",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/tsp",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"tsp"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add a user's TSP account",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "conference_code",
													"value": "au",
													"description": "(Required) Conference code: numeric value, length is less than 16.",
													"type": "text"
												},
												{
													"key": "leader_pin",
													"value": "Duis incididu",
													"description": "(Required) Leader PIN: numeric value, length is less than 16.",
													"type": "text"
												},
												{
													"key": "dial_in_numbers",
													"value": "[{\"code\":\"veni\",\"number\":\"cupidata\",\"type\":\"tollfree\",\"country_label\":\"ad i\"},{\"code\":\"id \",\"number\":\"ut dolor\",\"type\":\"toll\",\"country_label\":\"occ\"}]",
													"description": "List of dial in numbers.",
													"type": "text"
												},
												{
													"key": "tsp_bridge",
													"value": "EU_TSP_TB",
													"description": "Telephony bridge (This can only be one of US_TSP_TB,EU_TSP_TB)",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/tsp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"tsp"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										},
										"description": "Add a user's TSP account.<br><br>\n**Scopes:** `tsp:write:admin` `tsp:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `201`<br>\nTSP account added.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "conference_code",
															"value": "voluptate co",
															"description": "(Required) Conference code: numeric value, length is less than 16.",
															"type": "text"
														},
														{
															"key": "leader_pin",
															"value": "ea sunt ad",
															"description": "(Required) Leader PIN: numeric value, length is less than 16.",
															"type": "text"
														},
														{
															"key": "dial_in_numbers",
															"value": "[{\"code\":\"oc\",\"number\":\"velit dolore \",\"type\":\"toll\",\"country_label\":\"ut\"},{\"code\":\"eu mi\",\"number\":\"cupidatat\",\"type\":\"toll\",\"country_label\":\"non commo\"}]",
															"description": "List of dial in numbers.",
															"type": "text"
														},
														{
															"key": "tsp_bridge",
															"value": "US_TSP_TB",
															"description": "Telephony bridge (This can only be one of US_TSP_TB,EU_TSP_TB)",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/tsp",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"tsp"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"conference_code\": \"0125\",\n \"leader_pin\": \"11189898\",\n \"tsp_bridge\": \"string\",\n \"dial_in_numbers\": [\n  {\n   \"code\": \"01\",\n   \"number\": \"000000000\",\n   \"type\": \"toll\"\n  }\n ]\n}"
										},
										{
											"name": "**HTTP Status Code:** `400`<br>\nBad Request.<br>\n**Error Code:**`2024`<br>\nAccount has not enabled TSP.<br>\n**Error Code:**`300`<br>\nMedia link is required for AT&T TSP accounts.<br>\n**Error Code:** `300`<br>\nYou can add a max of two tsp configs.\n",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "conference_code",
															"value": "voluptate co",
															"description": "(Required) Conference code: numeric value, length is less than 16.",
															"type": "text"
														},
														{
															"key": "leader_pin",
															"value": "ea sunt ad",
															"description": "(Required) Leader PIN: numeric value, length is less than 16.",
															"type": "text"
														},
														{
															"key": "dial_in_numbers",
															"value": "[{\"code\":\"oc\",\"number\":\"velit dolore \",\"type\":\"toll\",\"country_label\":\"ut\"},{\"code\":\"eu mi\",\"number\":\"cupidatat\",\"type\":\"toll\",\"country_label\":\"non commo\"}]",
															"description": "List of dial in numbers.",
															"type": "text"
														},
														{
															"key": "tsp_bridge",
															"value": "US_TSP_TB",
															"description": "Telephony bridge (This can only be one of US_TSP_TB,EU_TSP_TB)",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/tsp",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"tsp"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nNot Found.<br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.<br>\n**Error Code:**`1120`<br>\nA valid invitation to join the Zoom account was not found for this user.<br>\nThis error is thrown if you added a user in ",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "conference_code",
															"value": "voluptate co",
															"description": "(Required) Conference code: numeric value, length is less than 16.",
															"type": "text"
														},
														{
															"key": "leader_pin",
															"value": "ea sunt ad",
															"description": "(Required) Leader PIN: numeric value, length is less than 16.",
															"type": "text"
														},
														{
															"key": "dial_in_numbers",
															"value": "[{\"code\":\"oc\",\"number\":\"velit dolore \",\"type\":\"toll\",\"country_label\":\"ut\"},{\"code\":\"eu mi\",\"number\":\"cupidatat\",\"type\":\"toll\",\"country_label\":\"non commo\"}]",
															"description": "List of dial in numbers.",
															"type": "text"
														},
														{
															"key": "tsp_bridge",
															"value": "US_TSP_TB",
															"description": "Telephony bridge (This can only be one of US_TSP_TB,EU_TSP_TB)",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/tsp",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"tsp"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Set global dial-in URL for a TSP user",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "audio_url",
													"value": "sit laboris sed",
													"description": "The global dial-in URL for a TSP enabled account. The URL must be valid with a max-length of 512 characters.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/tsp/settings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"tsp",
												"settings"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The userId or email address of the user."
												}
											]
										},
										"description": "A global dial-in page can provide a list of global access numbers using which audio conferencing can be conducted. By calling this API, you can set the url for the global dial-in page of a user whose Zoom account has TSP and special TSP with third-party audio conferencing options enabled. <p></p>\n**Scopes:**`tsp:write:admin` `tsp:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n"
									},
									"response": [
										{
											"name": "**Status Code:** `204` **No Content** <br>\nURL set successfully.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "audio_url",
															"value": "sit laboris sed",
															"description": "The global dial-in URL for a TSP enabled account. The URL must be valid with a max-length of 512 characters.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/tsp/settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"tsp",
														"settings"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The userId or email address of the user."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request** <br><br>\n**Error Code**: `2000`<br>\nNot TSP special account.<br>\n\nThs error means that the account does not have special TSP privilege. Contact Zoom Developer Support for details.<br>\n**Error Code**: `2024`<br>\n",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "audio_url",
															"value": "sit laboris sed",
															"description": "The global dial-in URL for a TSP enabled account. The URL must be valid with a max-length of 512 characters.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/tsp/settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"tsp",
														"settings"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The userId or email address of the user."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nUser ID not found.<br>\n**Error Code**: `1001`<br>\nUser {userId} not exist or not belong to this account.\n**Error Code**: `1120`<br>\nInvite not exist.\n\nThis error is thrown if you added a user in your account but the user di",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "audio_url",
															"value": "sit laboris sed",
															"description": "The global dial-in URL for a TSP enabled account. The URL must be valid with a max-length of 512 characters.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/tsp/settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"tsp",
														"settings"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The userId or email address of the user."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "token",
							"item": [
								{
									"name": "Get a user token",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/token?type=token&ttl=-14804147",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"token"
											],
											"query": [
												{
													"key": "type",
													"value": "token",
													"description": "User token types:<br>`token` - Used for starting meetings with the client SDK. This token expires in 14 days and a new token will be returned after the expiry.<br>`zak` - Used for generating the start meeting URL. The token expiration time is two hours. For API users, the expiration time is 90 days."
												},
												{
													"key": "ttl",
													"value": "-14804147",
													"description": "Use this field in conjunction with the `type` field where the value of `type` field is `zak`. The value of this field denotes the expiry time of the `zak` token in seconds. For example, if you would like the zak token to be expired after one hour of the token generation, the value of this field should be `3600`."
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										},
										"description": "Retrieve a user's token. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nThis token is used for starting meetings with the Client SDK. If a user signed into Zoom using Google or Facebook, a null value will be returned for the token. To get the token with this API, ask the user to sign into Zoom using their email and password instead.\n\n**Scopes:** `user:read:admin`, `user:read`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nToken returned.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/token?type=token&ttl=-14804147",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"token"
													],
													"query": [
														{
															"key": "type",
															"value": "token"
														},
														{
															"key": "ttl",
															"value": "-14804147"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"token\": \"string\"\n}"
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/token?type=token&ttl=-14804147",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"token"
													],
													"query": [
														{
															"key": "type",
															"value": "token"
														},
														{
															"key": "ttl",
															"value": "-14804147"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Revoke a user's SSO token",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/token",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"token"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										},
										"description": "Revoke a user's SSO token. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nAfter calling this API, the SSO user will be logged out of their current Zoom session.\n\n**Scopes:** `user:write:admin`, `user:write`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204`<br>\nToken deleted.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/token",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"token"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.\n",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/token",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"token"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "webinars",
							"item": [
								{
									"name": "List webinars",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/webinars?page_size=30&page_number=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"webinars"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30",
													"description": "The number of records returned within a single API call."
												},
												{
													"key": "page_number",
													"value": "1",
													"description": "\n**Deprecated** - This field has been deprecated and we will stop supporting it completely in a future release. Please use \"next_page_token\" for pagination instead of this field.\n\nThe page number of the current page in the returned records."
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										},
										"description": "Use this API to list all the webinars that are scheduled by or on-behalf a user (webinar host). For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nZoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars allow a host to broadcast a Zoom meeting to up to 10,000 attendees.\n\n**Scopes:** `webinar:read:admin`, `webinar:read`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n**Prerequisites:**\n* Pro or higher plan with a Webinar Add-on."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nList of webinar objects returned.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/webinars?page_size=30&page_number=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"webinars"
													],
													"query": [
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "page_number",
															"value": "1"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"{\\n  \\\"page_count\\\": \\\"1\\\",\\n  \\\"page_number\\\": \\\"1\\\",\\n  \\\"page_size\\\": \\\"30\\\",\\n  \\\"total_records\\\": \\\"1\\\",\\n  \\\"webinars\\\": [\\n    {\\n      \\\"uuid\\\": \\\"dsghfkhaewfds\\\",\\n      \\\"id\\\": 0001000,\\n      \\\"host_id\\\": \\\"24654130000000\\\",\\n      \\\"topic\\\": \\\"My Webinar\\\",\\n      \\\"agenda\\\": \\\"Learn more about Zoom APIs\\\",\\n      \\\"type\\\": \\\"5\\\",\\n      \\\"duration\\\": \\\"60\\\",\\n      \\\"start_time\\\": \\\"2019-09-24T22:00:00Z\\\",\\n      \\\"timezone\\\": \\\"America/Los_Angeles\\\",\\n      \\\"created_at\\\": \\\"2019-08-30T22:00:00Z\\\",\\n      \\\"join_url\\\": \\\"https://zoom.us/0001000/awesomewebinar\\\"\\n    }\\n  ]\\n}\""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser {userId} not exist or not belong to this account.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/webinars?page_size=30&page_number=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"webinars"
													],
													"query": [
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "page_number",
															"value": "1"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create a webinar",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "topic",
													"value": "Duis minim aliquip commodo",
													"type": "text"
												},
												{
													"key": "type",
													"value": "5",
													"type": "text"
												},
												{
													"key": "start_time",
													"value": "1978-04-01T18:58:49.284Z",
													"type": "text"
												},
												{
													"key": "duration",
													"value": "-82679316",
													"type": "text"
												},
												{
													"key": "timezone",
													"value": "mollit voluptate velit",
													"type": "text"
												},
												{
													"key": "password",
													"value": "voluptate eiusmod labore nostrud",
													"type": "text"
												},
												{
													"key": "agenda",
													"value": "est incidid",
													"type": "text"
												},
												{
													"key": "tracking_fields",
													"value": "[{\"field\":\"enim qui ut nisi deserunt\",\"value\":\"aliquip enim ad reprehenderit\"},{\"field\":\"dolor magna\",\"value\":\"Ut\"}]",
													"type": "text"
												},
												{
													"key": "recurrence",
													"value": "{\"type\":3,\"repeat_interval\":-93437843,\"weekly_days\":\"in ut\",\"monthly_day\":40137224,\"monthly_week\":1,\"monthly_week_day\":3,\"end_times\":1,\"end_date_time\":\"1984-07-20T06:32:27.683Z\"}",
													"type": "text"
												},
												{
													"key": "settings",
													"value": "{\"host_video\":false,\"panelists_video\":true,\"practice_session\":false,\"hd_video\":false,\"hd_video_for_attendees\":false,\"send_1080p_video_to_attendees\":false,\"approval_type\":2,\"registration_type\":1,\"audio\":\"both\",\"auto_recording\":\"none\",\"enforce_login\":false,\"enforce_login_domains\":\"non dolor ut voluptate\",\"alternative_hosts\":\"in consectetur anim nulla\",\"close_registration\":true,\"show_share_button\":false,\"allow_multiple_devices\":true,\"on_demand\":false,\"global_dial_in_countries\":[\"officia nostrud velit\",\"mollit in irure\"],\"contact_name\":\"fugiat\",\"contact_email\":\"do elit ut esse\",\"registrants_restrict_number\":0,\"post_webinar_survey\":false,\"survey_url\":\"in\",\"registrants_email_notification\":false,\"meeting_authentication\":false,\"authentication_option\":\"aliquip qui\",\"authentication_domains\":\"enim deserunt nulla do\",\"question_and_answer\":{\"enable\":false,\"allow_anonymous_questions\":false,\"answer_questions\":\"all\",\"attendees_can_upvote\":true,\"attendees_can_comment\":false},\"email_language\":\"cillum sunt velit\",\"panelists_invitation_email_notification\":true,\"attendees_and_panelists_reminder_email_notification\":{\"enable\":true,\"type\":0},\"follow_up_attendees_email_notification\":{\"enable\":true,\"type\":6},\"follow_up_absentees_email_notification\":{\"enable\":false,\"type\":3},\"language_interpretation\":{\"enable\":true,\"interpreters\":[{\"email\":\"REUah@Pw.csy\",\"languages\":\"velit deserunt culp\"},{\"email\":\"kVz27Y-DG@wsHtCcAlosMLpmRIoivrvz.qhst\",\"languages\":\"ea laborum\"}]}}",
													"type": "text"
												},
												{
													"key": "template_id",
													"value": "amet fugiat sit elit",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/webinars",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"webinars"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										},
										"description": "Use this API to schedule a webinar for a user (webinar host). For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter. \n\nZoom users with a [Webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars allow a host to broadcast a Zoom meeting to up to 10,000 attendees. \n\n**Scopes:** `webinar:write:admin`, `webinar:write`</br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n* This API has a daily rate limit of **100 requests per day**. The rate limit is applied to the `userId` of the **webinar host** used to make the request. \n\n**Prerequisites:** \n* A Pro or higher plan with a Webinar add-on."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `201`<br>\nWebinar created.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "topic",
															"value": "minim",
															"type": "text"
														},
														{
															"key": "type",
															"value": "5",
															"type": "text"
														},
														{
															"key": "start_time",
															"value": "2008-12-07T17:33:22.474Z",
															"type": "text"
														},
														{
															"key": "duration",
															"value": "49446855",
															"type": "text"
														},
														{
															"key": "timezone",
															"value": "irure Excepteur eiusmod laboris esse",
															"type": "text"
														},
														{
															"key": "password",
															"value": "in esse",
															"type": "text"
														},
														{
															"key": "agenda",
															"value": "in officia",
															"type": "text"
														},
														{
															"key": "tracking_fields",
															"value": "[{\"field\":\"eu irure\",\"value\":\"exercitation nulla\"},{\"field\":\"officia velit\",\"value\":\"ullamco\"}]",
															"type": "text"
														},
														{
															"key": "recurrence",
															"value": "{\"type\":3,\"repeat_interval\":26353026,\"weekly_days\":\"amet\",\"monthly_day\":-75610781,\"monthly_week\":4,\"monthly_week_day\":4,\"end_times\":1,\"end_date_time\":\"1981-09-18T14:27:35.929Z\"}",
															"type": "text"
														},
														{
															"key": "settings",
															"value": "{\"host_video\":true,\"panelists_video\":false,\"practice_session\":false,\"hd_video\":false,\"hd_video_for_attendees\":false,\"send_1080p_video_to_attendees\":false,\"approval_type\":2,\"registration_type\":1,\"audio\":\"both\",\"auto_recording\":\"none\",\"enforce_login\":true,\"enforce_login_domains\":\"exercitation mollit ut incididunt esse\",\"alternative_hosts\":\"irure enim dolore\",\"close_registration\":false,\"show_share_button\":true,\"allow_multiple_devices\":true,\"on_demand\":false,\"global_dial_in_countries\":[\"in commodo\",\"ut aliqua Lorem\"],\"contact_name\":\"ut proident Excepteur ut est\",\"contact_email\":\"culpa velit enim\",\"registrants_restrict_number\":0,\"post_webinar_survey\":false,\"survey_url\":\"quis do\",\"registrants_email_notification\":false,\"meeting_authentication\":true,\"authentication_option\":\"laborum dolore commodo minim\",\"authentication_domains\":\"in\",\"question_and_answer\":{\"enable\":false,\"allow_anonymous_questions\":false,\"answer_questions\":\"only\",\"attendees_can_upvote\":true,\"attendees_can_comment\":false},\"email_language\":\"sint\",\"panelists_invitation_email_notification\":true,\"attendees_and_panelists_reminder_email_notification\":{\"enable\":false,\"type\":2},\"follow_up_attendees_email_notification\":{\"enable\":true,\"type\":1},\"follow_up_absentees_email_notification\":{\"enable\":true,\"type\":3},\"language_interpretation\":{\"enable\":true,\"interpreters\":[{\"email\":\"7plMNMScNHw@gQXyNculxeHmCLEUAGoYJwGaCAN.xac\",\"languages\":\"r\"},{\"email\":\"f2N@tVDBEPyPhHczLVhTRFQprHsBAJKEKnMAN.krrm\",\"languages\":\"volupt\"}]}}",
															"type": "text"
														},
														{
															"key": "template_id",
															"value": "adipisicing ex",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/webinars",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"webinars"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Location",
													"value": "culpa velit reprehenderit",
													"description": "Location of created Webinar"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"uuid\": \"string\",\n \"id\": \"integer\",\n \"host_id\": \"string\",\n \"topic\": \"string\",\n \"type\": \"integer\",\n \"start_time\": \"string [date-time]\",\n \"duration\": \"integer\",\n \"timezone\": \"string\",\n \"agenda\": \"string\",\n \"created_at\": \"string [date-time]\",\n \"start_url\": \"string\",\n \"join_url\": \"string\",\n \"occurrences\": [\n  {\n   \"occurrence_id\": \"integer\",\n   \"start_time\": \"string [date-time]\",\n   \"duration\": \"integer\",\n   \"status\": \"string\"\n  }\n ],\n \"settings\": {\n  \"host_video\": \"boolean\",\n  \"panelists_video\": \"boolean\",\n  \"practice_session\": \"boolean\",\n  \"hd_video\": \"boolean\",\n  \"hd_video_for_attendees\": \"boolean\",\n  \"send_1080p_video_to_attendees\": \"boolean\",\n  \"approval_type\": \"integer\",\n  \"registration_type\": \"integer\",\n  \"audio\": \"string\",\n  \"auto_recording\": \"string\",\n  \"enforce_login\": \"boolean\",\n  \"enforce_login_domains\": \"string\",\n  \"alternative_hosts\": \"string\",\n  \"close_registration\": \"boolean\",\n  \"show_share_button\": \"boolean\",\n  \"allow_multiple_devices\": \"boolean\",\n  \"email_language\": \"string\",\n  \"panelists_invitation_email_notification\": \"boolean\",\n  \"registrants_confirmation_email\": \"boolean\",\n  \"registrants_email_notification\": \"boolean\",\n  \"attendees_and_panelists_reminder_email_notification\": {\n   \"enable\": \"boolean\",\n   \"type\": \"integer\"\n  },\n  \"follow_up_attendees_email_notification\": {\n   \"enable\": \"boolean\",\n   \"type\": \"integer\"\n  },\n  \"follow_up_absentees_email_notification\": {\n   \"enable\": \"boolean\",\n   \"type\": \"integer\"\n  }\n }\n}"
										},
										{
											"name": "**HTTP Status Code:** `300`<br>\nA maximum of \"{rateLimitNumber}\" webinars can be created and updated for a single user in one day.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "topic",
															"value": "minim",
															"type": "text"
														},
														{
															"key": "type",
															"value": "5",
															"type": "text"
														},
														{
															"key": "start_time",
															"value": "2008-12-07T17:33:22.474Z",
															"type": "text"
														},
														{
															"key": "duration",
															"value": "49446855",
															"type": "text"
														},
														{
															"key": "timezone",
															"value": "irure Excepteur eiusmod laboris esse",
															"type": "text"
														},
														{
															"key": "password",
															"value": "in esse",
															"type": "text"
														},
														{
															"key": "agenda",
															"value": "in officia",
															"type": "text"
														},
														{
															"key": "tracking_fields",
															"value": "[{\"field\":\"eu irure\",\"value\":\"exercitation nulla\"},{\"field\":\"officia velit\",\"value\":\"ullamco\"}]",
															"type": "text"
														},
														{
															"key": "recurrence",
															"value": "{\"type\":3,\"repeat_interval\":26353026,\"weekly_days\":\"amet\",\"monthly_day\":-75610781,\"monthly_week\":4,\"monthly_week_day\":4,\"end_times\":1,\"end_date_time\":\"1981-09-18T14:27:35.929Z\"}",
															"type": "text"
														},
														{
															"key": "settings",
															"value": "{\"host_video\":true,\"panelists_video\":false,\"practice_session\":false,\"hd_video\":false,\"hd_video_for_attendees\":false,\"send_1080p_video_to_attendees\":false,\"approval_type\":2,\"registration_type\":1,\"audio\":\"both\",\"auto_recording\":\"none\",\"enforce_login\":true,\"enforce_login_domains\":\"exercitation mollit ut incididunt esse\",\"alternative_hosts\":\"irure enim dolore\",\"close_registration\":false,\"show_share_button\":true,\"allow_multiple_devices\":true,\"on_demand\":false,\"global_dial_in_countries\":[\"in commodo\",\"ut aliqua Lorem\"],\"contact_name\":\"ut proident Excepteur ut est\",\"contact_email\":\"culpa velit enim\",\"registrants_restrict_number\":0,\"post_webinar_survey\":false,\"survey_url\":\"quis do\",\"registrants_email_notification\":false,\"meeting_authentication\":true,\"authentication_option\":\"laborum dolore commodo minim\",\"authentication_domains\":\"in\",\"question_and_answer\":{\"enable\":false,\"allow_anonymous_questions\":false,\"answer_questions\":\"only\",\"attendees_can_upvote\":true,\"attendees_can_comment\":false},\"email_language\":\"sint\",\"panelists_invitation_email_notification\":true,\"attendees_and_panelists_reminder_email_notification\":{\"enable\":false,\"type\":2},\"follow_up_attendees_email_notification\":{\"enable\":true,\"type\":1},\"follow_up_absentees_email_notification\":{\"enable\":true,\"type\":3},\"language_interpretation\":{\"enable\":true,\"interpreters\":[{\"email\":\"7plMNMScNHw@gQXyNculxeHmCLEUAGoYJwGaCAN.xac\",\"languages\":\"r\"},{\"email\":\"f2N@tVDBEPyPhHczLVhTRFQprHsBAJKEKnMAN.krrm\",\"languages\":\"volupt\"}]}}",
															"type": "text"
														},
														{
															"key": "template_id",
															"value": "adipisicing ex",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/webinars",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"webinars"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `200`\nSubscription plan for webinar is missing. Enable webinar for this user once the subscription plan is added:{userId}.<br>\n* Users in '{0}' have been blocked from joining meetings and web",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "topic",
															"value": "minim",
															"type": "text"
														},
														{
															"key": "type",
															"value": "5",
															"type": "text"
														},
														{
															"key": "start_time",
															"value": "2008-12-07T17:33:22.474Z",
															"type": "text"
														},
														{
															"key": "duration",
															"value": "49446855",
															"type": "text"
														},
														{
															"key": "timezone",
															"value": "irure Excepteur eiusmod laboris esse",
															"type": "text"
														},
														{
															"key": "password",
															"value": "in esse",
															"type": "text"
														},
														{
															"key": "agenda",
															"value": "in officia",
															"type": "text"
														},
														{
															"key": "tracking_fields",
															"value": "[{\"field\":\"eu irure\",\"value\":\"exercitation nulla\"},{\"field\":\"officia velit\",\"value\":\"ullamco\"}]",
															"type": "text"
														},
														{
															"key": "recurrence",
															"value": "{\"type\":3,\"repeat_interval\":26353026,\"weekly_days\":\"amet\",\"monthly_day\":-75610781,\"monthly_week\":4,\"monthly_week_day\":4,\"end_times\":1,\"end_date_time\":\"1981-09-18T14:27:35.929Z\"}",
															"type": "text"
														},
														{
															"key": "settings",
															"value": "{\"host_video\":true,\"panelists_video\":false,\"practice_session\":false,\"hd_video\":false,\"hd_video_for_attendees\":false,\"send_1080p_video_to_attendees\":false,\"approval_type\":2,\"registration_type\":1,\"audio\":\"both\",\"auto_recording\":\"none\",\"enforce_login\":true,\"enforce_login_domains\":\"exercitation mollit ut incididunt esse\",\"alternative_hosts\":\"irure enim dolore\",\"close_registration\":false,\"show_share_button\":true,\"allow_multiple_devices\":true,\"on_demand\":false,\"global_dial_in_countries\":[\"in commodo\",\"ut aliqua Lorem\"],\"contact_name\":\"ut proident Excepteur ut est\",\"contact_email\":\"culpa velit enim\",\"registrants_restrict_number\":0,\"post_webinar_survey\":false,\"survey_url\":\"quis do\",\"registrants_email_notification\":false,\"meeting_authentication\":true,\"authentication_option\":\"laborum dolore commodo minim\",\"authentication_domains\":\"in\",\"question_and_answer\":{\"enable\":false,\"allow_anonymous_questions\":false,\"answer_questions\":\"only\",\"attendees_can_upvote\":true,\"attendees_can_comment\":false},\"email_language\":\"sint\",\"panelists_invitation_email_notification\":true,\"attendees_and_panelists_reminder_email_notification\":{\"enable\":false,\"type\":2},\"follow_up_attendees_email_notification\":{\"enable\":true,\"type\":1},\"follow_up_absentees_email_notification\":{\"enable\":true,\"type\":3},\"language_interpretation\":{\"enable\":true,\"interpreters\":[{\"email\":\"7plMNMScNHw@gQXyNculxeHmCLEUAGoYJwGaCAN.xac\",\"languages\":\"r\"},{\"email\":\"f2N@tVDBEPyPhHczLVhTRFQprHsBAJKEKnMAN.krrm\",\"languages\":\"volupt\"}]}}",
															"type": "text"
														},
														{
															"key": "template_id",
															"value": "adipisicing ex",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/webinars",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"webinars"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser {userId} not exist or not belong to this account.\n",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "topic",
															"value": "minim",
															"type": "text"
														},
														{
															"key": "type",
															"value": "5",
															"type": "text"
														},
														{
															"key": "start_time",
															"value": "2008-12-07T17:33:22.474Z",
															"type": "text"
														},
														{
															"key": "duration",
															"value": "49446855",
															"type": "text"
														},
														{
															"key": "timezone",
															"value": "irure Excepteur eiusmod laboris esse",
															"type": "text"
														},
														{
															"key": "password",
															"value": "in esse",
															"type": "text"
														},
														{
															"key": "agenda",
															"value": "in officia",
															"type": "text"
														},
														{
															"key": "tracking_fields",
															"value": "[{\"field\":\"eu irure\",\"value\":\"exercitation nulla\"},{\"field\":\"officia velit\",\"value\":\"ullamco\"}]",
															"type": "text"
														},
														{
															"key": "recurrence",
															"value": "{\"type\":3,\"repeat_interval\":26353026,\"weekly_days\":\"amet\",\"monthly_day\":-75610781,\"monthly_week\":4,\"monthly_week_day\":4,\"end_times\":1,\"end_date_time\":\"1981-09-18T14:27:35.929Z\"}",
															"type": "text"
														},
														{
															"key": "settings",
															"value": "{\"host_video\":true,\"panelists_video\":false,\"practice_session\":false,\"hd_video\":false,\"hd_video_for_attendees\":false,\"send_1080p_video_to_attendees\":false,\"approval_type\":2,\"registration_type\":1,\"audio\":\"both\",\"auto_recording\":\"none\",\"enforce_login\":true,\"enforce_login_domains\":\"exercitation mollit ut incididunt esse\",\"alternative_hosts\":\"irure enim dolore\",\"close_registration\":false,\"show_share_button\":true,\"allow_multiple_devices\":true,\"on_demand\":false,\"global_dial_in_countries\":[\"in commodo\",\"ut aliqua Lorem\"],\"contact_name\":\"ut proident Excepteur ut est\",\"contact_email\":\"culpa velit enim\",\"registrants_restrict_number\":0,\"post_webinar_survey\":false,\"survey_url\":\"quis do\",\"registrants_email_notification\":false,\"meeting_authentication\":true,\"authentication_option\":\"laborum dolore commodo minim\",\"authentication_domains\":\"in\",\"question_and_answer\":{\"enable\":false,\"allow_anonymous_questions\":false,\"answer_questions\":\"only\",\"attendees_can_upvote\":true,\"attendees_can_comment\":false},\"email_language\":\"sint\",\"panelists_invitation_email_notification\":true,\"attendees_and_panelists_reminder_email_notification\":{\"enable\":false,\"type\":2},\"follow_up_attendees_email_notification\":{\"enable\":true,\"type\":1},\"follow_up_absentees_email_notification\":{\"enable\":true,\"type\":3},\"language_interpretation\":{\"enable\":true,\"interpreters\":[{\"email\":\"7plMNMScNHw@gQXyNculxeHmCLEUAGoYJwGaCAN.xac\",\"languages\":\"r\"},{\"email\":\"f2N@tVDBEPyPhHczLVhTRFQprHsBAJKEKnMAN.krrm\",\"languages\":\"volupt\"}]}}",
															"type": "text"
														},
														{
															"key": "template_id",
															"value": "adipisicing ex",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId/webinars",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"webinars"
													],
													"variable": [
														{
															"key": "userId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Get a user",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId?login_type=1&encrypted_email=true&search_by_unique_id=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId"
									],
									"query": [
										{
											"key": "login_type",
											"value": "1",
											"description": "The user's login method:\n\n`0` — Facebook OAuth</br>`1` — Google OAuth</br>`24` — Apple OAuth</br>`27` — Microsoft OAuth</br>`97` — Mobile device</br>`98` — RingCentral OAuth</br>`99` — API user</br>`100` — Zoom Work email</br>`101` — Single Sign-On (SSO)\n\nThe following login methods are only available in China:\n\n`11` — Phone number</br>`21` — WeChat</br>`23` — Alipay"
										},
										{
											"key": "encrypted_email",
											"value": "true",
											"description": "Whether the email address passed for the `userId` value is an encrypted email address:\n\n* `true` — The email address is encrypted.\n* `false` — The email address is not encrypted.\n\nIf you do not query this parameter, this value defaults to null (`false`)."
										},
										{
											"key": "search_by_unique_id",
											"value": "true",
											"description": "Whether the queried `userId` value is an employee unique ID: \n* `true` — The queried ID is an employee's unique ID. \n* `false` — The queried ID is not an employee's unique ID. \n\nThis value defaults to `false` (null)."
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
										}
									]
								},
								"description": "Use this API to view a user's information on a Zoom account. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter. \n\n**Note:** Users who have not activated their account will have a `pending` status. These users' `created_at` timestamp will also display the time at which the API call was made, **not** the account's creation date. \n\n**Scopes:** `user:read:admin`, `user:read`, `user_info:read` <br> \n* **Note:** The `user_info:read` scope is only available when you pass the `me` value for the `$userId` value. \n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nUser object returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?login_type=1&encrypted_email=true&search_by_unique_id=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "login_type",
													"value": "1"
												},
												{
													"key": "encrypted_email",
													"value": "true"
												},
												{
													"key": "search_by_unique_id",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"created_at\": \"2018-11-15T01:10:08Z\",\n \"custom_attributes\": [\n  {\n   \"key\": \"cb3674544gexq\",\n   \"name\": \"Country of Citizenship\",\n   \"value\": \"Nepal\"\n  }\n ],\n \"id\": \"z8dsdsdsdsdCfp8uQ\",\n \"first_name\": \"Harry\",\n \"last_name\": \"Grande\",\n \"email\": \"example@example.com\",\n \"type\": 2,\n \"role_name\": \"Owner\",\n \"pmi\": 100000000,\n \"use_pmi\": false,\n \"personal_meeting_url\": \"https://zoom.us/j/6352635623323434343443\",\n \"timezone\": \"America/Los_Angeles\",\n \"verified\": 1,\n \"dept\": \"\",\n \"last_login_time\": \"2019-09-13T21:08:52Z\",\n \"last_client_version\": \"4.4.55383.0716(android)\",\n \"pic_url\": \"https://lh4.googleusercontent.com/-hsgfhdgsfghdsfghfd-photo.jpg\",\n \"host_key\": \"0000\",\n \"jid\": \"hghghfghdfghdfhgh@xmpp.zoom.us\",\n \"group_ids\": [],\n \"im_group_ids\": [\n  \"CcSAAAAAAABBBVoQ\"\n ],\n \"account_id\": \"EAAAAAbbbbbCCCCHMA\",\n \"language\": \"en-US\",\n \"phone_country\": \"USA\",\n \"phone_number\": \"15550100\",\n \"status\": \"active\",\n \"role_id\": \"hdsfwyteg3675hgfs\",\n \"employee_unique_id\": \"dddaaaa\",\n \"account_number\": 20212021,\n \"manager\": \"name@example.com\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\nBad request<br>\n**Error Code:** `1120`<br>\nA valid invitation to join the Zoom account was not found for this user. <br>\nThis error is thrown if you added a user in your account but the user did not accept t",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?login_type=1&encrypted_email=true&search_by_unique_id=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "login_type",
													"value": "1"
												},
												{
													"key": "encrypted_email",
													"value": "true"
												},
												{
													"key": "search_by_unique_id",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?login_type=1&encrypted_email=true&search_by_unique_id=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "login_type",
													"value": "1"
												},
												{
													"key": "encrypted_email",
													"value": "true"
												},
												{
													"key": "search_by_unique_id",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a user Copy",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId?login_type=1&encrypted_email=true&search_by_unique_id=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId"
									],
									"query": [
										{
											"key": "login_type",
											"value": "1",
											"description": "The user's login method:\n\n`0` — Facebook OAuth</br>`1` — Google OAuth</br>`24` — Apple OAuth</br>`27` — Microsoft OAuth</br>`97` — Mobile device</br>`98` — RingCentral OAuth</br>`99` — API user</br>`100` — Zoom Work email</br>`101` — Single Sign-On (SSO)\n\nThe following login methods are only available in China:\n\n`11` — Phone number</br>`21` — WeChat</br>`23` — Alipay"
										},
										{
											"key": "encrypted_email",
											"value": "true",
											"description": "Whether the email address passed for the `userId` value is an encrypted email address:\n\n* `true` — The email address is encrypted.\n* `false` — The email address is not encrypted.\n\nIf you do not query this parameter, this value defaults to null (`false`)."
										},
										{
											"key": "search_by_unique_id",
											"value": "true",
											"description": "Whether the queried `userId` value is an employee unique ID: \n* `true` — The queried ID is an employee's unique ID. \n* `false` — The queried ID is not an employee's unique ID. \n\nThis value defaults to `false` (null)."
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
										}
									]
								},
								"description": "Use this API to view a user's information on a Zoom account. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter. \n\n**Note:** Users who have not activated their account will have a `pending` status. These users' `created_at` timestamp will also display the time at which the API call was made, **not** the account's creation date. \n\n**Scopes:** `user:read:admin`, `user:read`, `user_info:read` <br> \n* **Note:** The `user_info:read` scope is only available when you pass the `me` value for the `$userId` value. \n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nUser object returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?login_type=1&encrypted_email=true&search_by_unique_id=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "login_type",
													"value": "1"
												},
												{
													"key": "encrypted_email",
													"value": "true"
												},
												{
													"key": "search_by_unique_id",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"created_at\": \"2018-11-15T01:10:08Z\",\n \"custom_attributes\": [\n  {\n   \"key\": \"cb3674544gexq\",\n   \"name\": \"Country of Citizenship\",\n   \"value\": \"Nepal\"\n  }\n ],\n \"id\": \"z8dsdsdsdsdCfp8uQ\",\n \"first_name\": \"Harry\",\n \"last_name\": \"Grande\",\n \"email\": \"example@example.com\",\n \"type\": 2,\n \"role_name\": \"Owner\",\n \"pmi\": 100000000,\n \"use_pmi\": false,\n \"personal_meeting_url\": \"https://zoom.us/j/6352635623323434343443\",\n \"timezone\": \"America/Los_Angeles\",\n \"verified\": 1,\n \"dept\": \"\",\n \"last_login_time\": \"2019-09-13T21:08:52Z\",\n \"last_client_version\": \"4.4.55383.0716(android)\",\n \"pic_url\": \"https://lh4.googleusercontent.com/-hsgfhdgsfghdsfghfd-photo.jpg\",\n \"host_key\": \"0000\",\n \"jid\": \"hghghfghdfghdfhgh@xmpp.zoom.us\",\n \"group_ids\": [],\n \"im_group_ids\": [\n  \"CcSAAAAAAABBBVoQ\"\n ],\n \"account_id\": \"EAAAAAbbbbbCCCCHMA\",\n \"language\": \"en-US\",\n \"phone_country\": \"USA\",\n \"phone_number\": \"15550100\",\n \"status\": \"active\",\n \"role_id\": \"hdsfwyteg3675hgfs\",\n \"employee_unique_id\": \"dddaaaa\",\n \"account_number\": 20212021,\n \"manager\": \"name@example.com\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\nBad request<br>\n**Error Code:** `1120`<br>\nA valid invitation to join the Zoom account was not found for this user. <br>\nThis error is thrown if you added a user in your account but the user did not accept t",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?login_type=1&encrypted_email=true&search_by_unique_id=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "login_type",
													"value": "1"
												},
												{
													"key": "encrypted_email",
													"value": "true"
												},
												{
													"key": "search_by_unique_id",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?login_type=1&encrypted_email=true&search_by_unique_id=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "login_type",
													"value": "1"
												},
												{
													"key": "encrypted_email",
													"value": "true"
												},
												{
													"key": "search_by_unique_id",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a user",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "first_name",
											"value": "Excepteur consequat elit",
											"description": "User's first name. Cannot contain more than 5 Chinese characters.",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "exercita",
											"description": "User's last name. Cannot contain more than 5 Chinese characters.",
											"type": "text"
										},
										{
											"key": "type",
											"value": "99",
											"description": "User types:<br>`1` - Basic.<br>`2` - Licensed.<br>`3` - On-prem.<br>`99` - None (this can only be set with `ssoCreate`). (This can only be one of 1,2,3,99)",
											"type": "text"
										},
										{
											"key": "pmi",
											"value": "-77168835",
											"description": "Personal meeting ID: length must be 10.",
											"type": "text"
										},
										{
											"key": "use_pmi",
											"value": "false",
											"description": "Use Personal Meeting ID for instant meetings.",
											"type": "text"
										},
										{
											"key": "timezone",
											"value": "dolor sit fugiat officia",
											"description": "The time zone ID for a user profile. For this parameter value please refer to the ID value in the [timezone](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones) list.",
											"type": "text"
										},
										{
											"key": "language",
											"value": "magna fugiat ex",
											"description": "language",
											"type": "text"
										},
										{
											"key": "dept",
											"value": "tempor dolor Ut dolor",
											"description": "Department for user profile: use for report.",
											"type": "text"
										},
										{
											"key": "vanity_name",
											"value": "esse nisi dolore",
											"description": "Personal meeting room name.",
											"type": "text"
										},
										{
											"key": "host_key",
											"value": "pariatu",
											"description": "Host key. It should be a 6-10 digit number.",
											"type": "text"
										},
										{
											"key": "cms_user_id",
											"value": "consequat in",
											"description": "Kaltura user ID.",
											"type": "text"
										},
										{
											"key": "job_title",
											"value": "do",
											"description": "User's job title.",
											"type": "text"
										},
										{
											"key": "company",
											"value": "magna nulla cillum",
											"description": "User's company.",
											"type": "text"
										},
										{
											"key": "location",
											"value": "elit Duis id",
											"description": "User's location.",
											"type": "text"
										},
										{
											"key": "phone_number",
											"value": "sit ad pariatur",
											"description": "**Note:** This field has been **deprecated** and will not be supported in the future. Use the **phone_numbers** field instead to assign phone number(s) to a user.\n\n\nPhone number of the user. To update a phone number, you must also provide the `phone_country` field.",
											"type": "text"
										},
										{
											"key": "phone_country",
											"value": "occaecat Duis deserunt culpa cons",
											"description": "**Note:** This field has been **deprecated** and will not be supported in the future. Use the **country** field of the **phone_numbers** object instead to select the country for the phone number.\n\n\n\n[Country ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) of the phone number. For example, if the phone number provided in the `phone_number` field is a Brazil based number, the value of the `phone_country` field should be `BR`.",
											"type": "text"
										},
										{
											"key": "custom_attributes",
											"value": "{\"key\":\"consectetur nostrud\",\"name\":\"irure\",\"value\":\"eiusmod sint\"}",
											"description": "Custom attribute(s) of the user.",
											"type": "text"
										},
										{
											"key": "group_id",
											"value": "voluptate proident",
											"description": "Provide unique identifier of the group that you would like to add a [pending user](https://support.zoom.us/hc/en-us/articles/201363183-Managing-users#h_13c87a2a-ecd6-40ad-be61-a9935e660edb) to. The value of this field can be retrieved from [List Groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups) API.",
											"type": "text"
										},
										{
											"key": "phone_numbers",
											"value": "{\"country\":\"veniam Lorem\",\"code\":\"laboris sit\",\"number\":\"non in eu\",\"label\":\"Mobile\"}",
											"type": "text"
										},
										{
											"key": "manager",
											"value": "68HN@BYJINVH.th",
											"description": "The manager for the user.",
											"type": "text"
										},
										{
											"key": "pronouns",
											"value": "in aliquip dolor",
											"description": "The user's pronouns.",
											"type": "text"
										},
										{
											"key": "pronouns_option",
											"value": "2",
											"description": "The user's display pronouns setting:\n* `1` — Ask the user every time they join meetings and webinars. \n* `2` — Always display pronouns in meetings and webinars. \n* `3` — Do not display pronouns in meetings and webinars. (This can only be one of 1,2,3)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId?login_type=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId"
									],
									"query": [
										{
											"key": "login_type",
											"value": "1",
											"description": "The user's login method:\n\n`0` — Facebook OAuth</br>`1` — Google OAuth</br>`24` — Apple OAuth</br>`27` — Microsoft OAuth</br>`97` — Mobile device</br>`98` — RingCentral OAuth</br>`99` — API user</br>`100` — Zoom Work email</br>`101` — Single Sign-On (SSO)\n\nThe following login methods are only available in China:\n\n`11` — Phone number</br>`21` — WeChat</br>`23` — Alipay"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
										}
									]
								},
								"description": "Update information on a user's [Zoom profile](https://support.zoom.us/hc/en-us/articles/201363203-My-Profile). For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\n**Scopes:** `user:write:admin` `user:write`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204` <br> \nUser updated.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "first_name",
													"value": "Excepteur consequat elit",
													"description": "User's first name. Cannot contain more than 5 Chinese characters.",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "exercita",
													"description": "User's last name. Cannot contain more than 5 Chinese characters.",
													"type": "text"
												},
												{
													"key": "type",
													"value": "99",
													"description": "User types:<br>`1` - Basic.<br>`2` - Licensed.<br>`3` - On-prem.<br>`99` - None (this can only be set with `ssoCreate`). (This can only be one of 1,2,3,99)",
													"type": "text"
												},
												{
													"key": "pmi",
													"value": "-77168835",
													"description": "Personal meeting ID: length must be 10.",
													"type": "text"
												},
												{
													"key": "use_pmi",
													"value": "false",
													"description": "Use Personal Meeting ID for instant meetings.",
													"type": "text"
												},
												{
													"key": "timezone",
													"value": "dolor sit fugiat officia",
													"description": "The time zone ID for a user profile. For this parameter value please refer to the ID value in the [timezone](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones) list.",
													"type": "text"
												},
												{
													"key": "language",
													"value": "magna fugiat ex",
													"description": "language",
													"type": "text"
												},
												{
													"key": "dept",
													"value": "tempor dolor Ut dolor",
													"description": "Department for user profile: use for report.",
													"type": "text"
												},
												{
													"key": "vanity_name",
													"value": "esse nisi dolore",
													"description": "Personal meeting room name.",
													"type": "text"
												},
												{
													"key": "host_key",
													"value": "pariatu",
													"description": "Host key. It should be a 6-10 digit number.",
													"type": "text"
												},
												{
													"key": "cms_user_id",
													"value": "consequat in",
													"description": "Kaltura user ID.",
													"type": "text"
												},
												{
													"key": "job_title",
													"value": "do",
													"description": "User's job title.",
													"type": "text"
												},
												{
													"key": "company",
													"value": "magna nulla cillum",
													"description": "User's company.",
													"type": "text"
												},
												{
													"key": "location",
													"value": "elit Duis id",
													"description": "User's location.",
													"type": "text"
												},
												{
													"key": "phone_number",
													"value": "sit ad pariatur",
													"description": "**Note:** This field has been **deprecated** and will not be supported in the future. Use the **phone_numbers** field instead to assign phone number(s) to a user.\n\n\nPhone number of the user. To update a phone number, you must also provide the `phone_country` field.",
													"type": "text"
												},
												{
													"key": "phone_country",
													"value": "occaecat Duis deserunt culpa cons",
													"description": "**Note:** This field has been **deprecated** and will not be supported in the future. Use the **country** field of the **phone_numbers** object instead to select the country for the phone number.\n\n\n\n[Country ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) of the phone number. For example, if the phone number provided in the `phone_number` field is a Brazil based number, the value of the `phone_country` field should be `BR`.",
													"type": "text"
												},
												{
													"key": "custom_attributes",
													"value": "{\"key\":\"consectetur nostrud\",\"name\":\"irure\",\"value\":\"eiusmod sint\"}",
													"description": "Custom attribute(s) of the user.",
													"type": "text"
												},
												{
													"key": "group_id",
													"value": "voluptate proident",
													"description": "Provide unique identifier of the group that you would like to add a [pending user](https://support.zoom.us/hc/en-us/articles/201363183-Managing-users#h_13c87a2a-ecd6-40ad-be61-a9935e660edb) to. The value of this field can be retrieved from [List Groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups) API.",
													"type": "text"
												},
												{
													"key": "phone_numbers",
													"value": "{\"country\":\"veniam Lorem\",\"code\":\"laboris sit\",\"number\":\"non in eu\",\"label\":\"Mobile\"}",
													"type": "text"
												},
												{
													"key": "manager",
													"value": "68HN@BYJINVH.th",
													"description": "The manager for the user.",
													"type": "text"
												},
												{
													"key": "pronouns",
													"value": "in aliquip dolor",
													"description": "The user's pronouns.",
													"type": "text"
												},
												{
													"key": "pronouns_option",
													"value": "2",
													"description": "The user's display pronouns setting:\n* `1` — Ask the user every time they join meetings and webinars. \n* `2` — Always display pronouns in meetings and webinars. \n* `3` — Do not display pronouns in meetings and webinars. (This can only be one of 1,2,3)",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId?login_type=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "login_type",
													"value": "1"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br><br>\n**Error Code:** `200`<br>A Zoom Room user cannot be updated to a free user type: $userId<br>Only an account administrator can change a user's name. <br>Only an account administrator can change the host k",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "first_name",
													"value": "Excepteur consequat elit",
													"description": "User's first name. Cannot contain more than 5 Chinese characters.",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "exercita",
													"description": "User's last name. Cannot contain more than 5 Chinese characters.",
													"type": "text"
												},
												{
													"key": "type",
													"value": "99",
													"description": "User types:<br>`1` - Basic.<br>`2` - Licensed.<br>`3` - On-prem.<br>`99` - None (this can only be set with `ssoCreate`). (This can only be one of 1,2,3,99)",
													"type": "text"
												},
												{
													"key": "pmi",
													"value": "-77168835",
													"description": "Personal meeting ID: length must be 10.",
													"type": "text"
												},
												{
													"key": "use_pmi",
													"value": "false",
													"description": "Use Personal Meeting ID for instant meetings.",
													"type": "text"
												},
												{
													"key": "timezone",
													"value": "dolor sit fugiat officia",
													"description": "The time zone ID for a user profile. For this parameter value please refer to the ID value in the [timezone](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones) list.",
													"type": "text"
												},
												{
													"key": "language",
													"value": "magna fugiat ex",
													"description": "language",
													"type": "text"
												},
												{
													"key": "dept",
													"value": "tempor dolor Ut dolor",
													"description": "Department for user profile: use for report.",
													"type": "text"
												},
												{
													"key": "vanity_name",
													"value": "esse nisi dolore",
													"description": "Personal meeting room name.",
													"type": "text"
												},
												{
													"key": "host_key",
													"value": "pariatu",
													"description": "Host key. It should be a 6-10 digit number.",
													"type": "text"
												},
												{
													"key": "cms_user_id",
													"value": "consequat in",
													"description": "Kaltura user ID.",
													"type": "text"
												},
												{
													"key": "job_title",
													"value": "do",
													"description": "User's job title.",
													"type": "text"
												},
												{
													"key": "company",
													"value": "magna nulla cillum",
													"description": "User's company.",
													"type": "text"
												},
												{
													"key": "location",
													"value": "elit Duis id",
													"description": "User's location.",
													"type": "text"
												},
												{
													"key": "phone_number",
													"value": "sit ad pariatur",
													"description": "**Note:** This field has been **deprecated** and will not be supported in the future. Use the **phone_numbers** field instead to assign phone number(s) to a user.\n\n\nPhone number of the user. To update a phone number, you must also provide the `phone_country` field.",
													"type": "text"
												},
												{
													"key": "phone_country",
													"value": "occaecat Duis deserunt culpa cons",
													"description": "**Note:** This field has been **deprecated** and will not be supported in the future. Use the **country** field of the **phone_numbers** object instead to select the country for the phone number.\n\n\n\n[Country ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) of the phone number. For example, if the phone number provided in the `phone_number` field is a Brazil based number, the value of the `phone_country` field should be `BR`.",
													"type": "text"
												},
												{
													"key": "custom_attributes",
													"value": "{\"key\":\"consectetur nostrud\",\"name\":\"irure\",\"value\":\"eiusmod sint\"}",
													"description": "Custom attribute(s) of the user.",
													"type": "text"
												},
												{
													"key": "group_id",
													"value": "voluptate proident",
													"description": "Provide unique identifier of the group that you would like to add a [pending user](https://support.zoom.us/hc/en-us/articles/201363183-Managing-users#h_13c87a2a-ecd6-40ad-be61-a9935e660edb) to. The value of this field can be retrieved from [List Groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups) API.",
													"type": "text"
												},
												{
													"key": "phone_numbers",
													"value": "{\"country\":\"veniam Lorem\",\"code\":\"laboris sit\",\"number\":\"non in eu\",\"label\":\"Mobile\"}",
													"type": "text"
												},
												{
													"key": "manager",
													"value": "68HN@BYJINVH.th",
													"description": "The manager for the user.",
													"type": "text"
												},
												{
													"key": "pronouns",
													"value": "in aliquip dolor",
													"description": "The user's pronouns.",
													"type": "text"
												},
												{
													"key": "pronouns_option",
													"value": "2",
													"description": "The user's display pronouns setting:\n* `1` — Ask the user every time they join meetings and webinars. \n* `2` — Always display pronouns in meetings and webinars. \n* `3` — Do not display pronouns in meetings and webinars. (This can only be one of 1,2,3)",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId?login_type=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "login_type",
													"value": "1"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.<br>",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "first_name",
													"value": "Excepteur consequat elit",
													"description": "User's first name. Cannot contain more than 5 Chinese characters.",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "exercita",
													"description": "User's last name. Cannot contain more than 5 Chinese characters.",
													"type": "text"
												},
												{
													"key": "type",
													"value": "99",
													"description": "User types:<br>`1` - Basic.<br>`2` - Licensed.<br>`3` - On-prem.<br>`99` - None (this can only be set with `ssoCreate`). (This can only be one of 1,2,3,99)",
													"type": "text"
												},
												{
													"key": "pmi",
													"value": "-77168835",
													"description": "Personal meeting ID: length must be 10.",
													"type": "text"
												},
												{
													"key": "use_pmi",
													"value": "false",
													"description": "Use Personal Meeting ID for instant meetings.",
													"type": "text"
												},
												{
													"key": "timezone",
													"value": "dolor sit fugiat officia",
													"description": "The time zone ID for a user profile. For this parameter value please refer to the ID value in the [timezone](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones) list.",
													"type": "text"
												},
												{
													"key": "language",
													"value": "magna fugiat ex",
													"description": "language",
													"type": "text"
												},
												{
													"key": "dept",
													"value": "tempor dolor Ut dolor",
													"description": "Department for user profile: use for report.",
													"type": "text"
												},
												{
													"key": "vanity_name",
													"value": "esse nisi dolore",
													"description": "Personal meeting room name.",
													"type": "text"
												},
												{
													"key": "host_key",
													"value": "pariatu",
													"description": "Host key. It should be a 6-10 digit number.",
													"type": "text"
												},
												{
													"key": "cms_user_id",
													"value": "consequat in",
													"description": "Kaltura user ID.",
													"type": "text"
												},
												{
													"key": "job_title",
													"value": "do",
													"description": "User's job title.",
													"type": "text"
												},
												{
													"key": "company",
													"value": "magna nulla cillum",
													"description": "User's company.",
													"type": "text"
												},
												{
													"key": "location",
													"value": "elit Duis id",
													"description": "User's location.",
													"type": "text"
												},
												{
													"key": "phone_number",
													"value": "sit ad pariatur",
													"description": "**Note:** This field has been **deprecated** and will not be supported in the future. Use the **phone_numbers** field instead to assign phone number(s) to a user.\n\n\nPhone number of the user. To update a phone number, you must also provide the `phone_country` field.",
													"type": "text"
												},
												{
													"key": "phone_country",
													"value": "occaecat Duis deserunt culpa cons",
													"description": "**Note:** This field has been **deprecated** and will not be supported in the future. Use the **country** field of the **phone_numbers** object instead to select the country for the phone number.\n\n\n\n[Country ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) of the phone number. For example, if the phone number provided in the `phone_number` field is a Brazil based number, the value of the `phone_country` field should be `BR`.",
													"type": "text"
												},
												{
													"key": "custom_attributes",
													"value": "{\"key\":\"consectetur nostrud\",\"name\":\"irure\",\"value\":\"eiusmod sint\"}",
													"description": "Custom attribute(s) of the user.",
													"type": "text"
												},
												{
													"key": "group_id",
													"value": "voluptate proident",
													"description": "Provide unique identifier of the group that you would like to add a [pending user](https://support.zoom.us/hc/en-us/articles/201363183-Managing-users#h_13c87a2a-ecd6-40ad-be61-a9935e660edb) to. The value of this field can be retrieved from [List Groups](https://marketplace.zoom.us/docs/api-reference/zoom-api/groups/groups) API.",
													"type": "text"
												},
												{
													"key": "phone_numbers",
													"value": "{\"country\":\"veniam Lorem\",\"code\":\"laboris sit\",\"number\":\"non in eu\",\"label\":\"Mobile\"}",
													"type": "text"
												},
												{
													"key": "manager",
													"value": "68HN@BYJINVH.th",
													"description": "The manager for the user.",
													"type": "text"
												},
												{
													"key": "pronouns",
													"value": "in aliquip dolor",
													"description": "The user's pronouns.",
													"type": "text"
												},
												{
													"key": "pronouns_option",
													"value": "2",
													"description": "The user's display pronouns setting:\n* `1` — Ask the user every time they join meetings and webinars. \n* `2` — Always display pronouns in meetings and webinars. \n* `3` — Do not display pronouns in meetings and webinars. (This can only be one of 1,2,3)",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId?login_type=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "login_type",
													"value": "1"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a user",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId?action=disassociate&transfer_email=culpa velit reprehenderit&transfer_meeting=true&transfer_webinar=true&transfer_recording=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId"
									],
									"query": [
										{
											"key": "action",
											"value": "disassociate",
											"description": "Delete action options:<br>`disassociate` - Disassociate a user.<br>`delete`-  Permanently delete a user.<br>Note: To delete pending user in the account, use `disassociate`"
										},
										{
											"key": "transfer_email",
											"value": "culpa velit reprehenderit",
											"description": "Transfer email. This field is **required** if the user has upcoming Zoom Events scheduled. After you delete or disassociate the user, the user's upcoming Zoom Events will be transferred to the target user."
										},
										{
											"key": "transfer_meeting",
											"value": "true",
											"description": "Transfer meeting."
										},
										{
											"key": "transfer_webinar",
											"value": "true",
											"description": "Transfer webinar."
										},
										{
											"key": "transfer_recording",
											"value": "true",
											"description": "Transfer recording."
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
										}
									]
								},
								"description": "Use this API to disassociate (unlink) a user or permanently delete a user. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\n**Deleting** a user **permanently** removes the user and their data from Zoom. Users can create a new Zoom account using the same email address. An account owner or an account admin can transfer meetings, webinars and cloud recordings to another Zoom user account before deleting.\n\n**Disassociating** a user unlinks the user from the associated Zoom account and provides the user their own basic free Zoom account. The disassociated user can then purchase their own Zoom licenses. An account owner or account admin can transfer the user's meetings, webinars, and cloud recordings to another user before disassociation.\n\n**Scopes:** `user:write:admin`, `user:write`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204`<br>\nUser deleted.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?action=disassociate&transfer_email=culpa velit reprehenderit&transfer_meeting=true&transfer_webinar=true&transfer_recording=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "action",
													"value": "disassociate"
												},
												{
													"key": "transfer_email",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "transfer_meeting",
													"value": "true"
												},
												{
													"key": "transfer_webinar",
													"value": "true"
												},
												{
													"key": "transfer_recording",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request** <br><br> **Error Code:** `300`<br>The transfer-to email address cannot be the same as the unlinked or deleted user’s email address.<br> Unable to unlink API user(s).<br> This user has published events on Zoom Ev",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?action=disassociate&transfer_email=culpa velit reprehenderit&transfer_meeting=true&transfer_webinar=true&transfer_recording=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "action",
													"value": "disassociate"
												},
												{
													"key": "transfer_email",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "transfer_meeting",
													"value": "true"
												},
												{
													"key": "transfer_webinar",
													"value": "true"
												},
												{
													"key": "transfer_recording",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.<br>",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?action=disassociate&transfer_email=culpa velit reprehenderit&transfer_meeting=true&transfer_webinar=true&transfer_recording=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "action",
													"value": "disassociate"
												},
												{
													"key": "transfer_email",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "transfer_meeting",
													"value": "true"
												},
												{
													"key": "transfer_webinar",
													"value": "true"
												},
												{
													"key": "transfer_recording",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List all recordings",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/recordings?page_size=30&next_page_token=culpa velit reprehenderit&mc=false&trash=false&from=1948-05-09&to=1948-05-09&trash_type=meeting_recordings&meeting_id=-14804147",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"recordings"
									],
									"query": [
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										},
										{
											"key": "mc",
											"value": "false",
											"description": "Query Metadata of Recording if an On-Premise Meeting Connector was used for the meeting."
										},
										{
											"key": "trash",
											"value": "false",
											"description": "Query trash.\n`true`: List recordings from trash.<br> `false`: Do not list recordings from the trash.<br> The default value is `false`. If you set it to `true`, you can use the `trash_type` property to indicate the type of Cloud recording that you need to retrieve. "
										},
										{
											"key": "from",
											"value": "1948-05-09",
											"description": "The start date in 'yyyy-mm-dd' UTC format for the date range for which you would like to retrieve recordings. The maximum range can be a month. If no value is provided for this field, the default will be current date. For example, if you make the API request on June 30, 2020, without providing the “from” and “to” parameters, by default the value of 'from' field will be “2020-06-30” and the value of the 'to' field will be “2020-07-01”. \n\n**Note**: The \"trash\" files cannot be filtered by date range and thus, the \"from\" and \"to\" fields should not be used for trash files."
										},
										{
											"key": "to",
											"value": "1948-05-09",
											"description": "End date in 'yyyy-mm-dd' 'yyyy-mm-dd' UTC format. "
										},
										{
											"key": "trash_type",
											"value": "meeting_recordings",
											"description": "The type of Cloud recording that you would like to retrieve from the trash. The value can be one of the following:<br>\n    `meeting_recordings`: List all meeting recordings from the trash.<br>\n    `recording_file`: List all individual recording files from the trash. "
										},
										{
											"key": "meeting_id",
											"value": "-14804147",
											"description": "The meeting ID."
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
										}
									]
								},
								"description": "Use this API to list all [cloud recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) of a user. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\n<p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note:</b> To access a user's password protected cloud recording, add an <code>access_token</code> parameter to the download URL and provide either the <a href=\"https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-jwt-app\">JWT</a> or the user's OAuth access token as the value of the <code>access_token</code> parameter.</p>\n\nWhen a user records a meeting or a webinar by choosing the **Record to the Cloud** option, the video, audio, and chat text are recorded in the Zoom cloud.\n\n**Scopes:** `recording:read:admin`, `recording:read`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n**Prerequisites:** \n* Pro or a higher plan.\n* Cloud Recording must be enabled on the user's account."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nList of recording objects returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/recordings?page_size=30&next_page_token=culpa velit reprehenderit&mc=false&trash=false&from=1948-05-09&to=1948-05-09&trash_type=meeting_recordings&meeting_id=-14804147",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"recordings"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "mc",
													"value": "false"
												},
												{
													"key": "trash",
													"value": "false"
												},
												{
													"key": "from",
													"value": "1948-05-09"
												},
												{
													"key": "to",
													"value": "1948-05-09"
												},
												{
													"key": "trash_type",
													"value": "meeting_recordings"
												},
												{
													"key": "meeting_id",
													"value": "-14804147"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"from\": \"2019-08-15\",\n \"to\": \"2019-09-15\",\n \"page_count\": 1,\n \"page_size\": 30,\n \"total_records\": 1,\n \"next_page_token\": \"\",\n \"meetings\": [\n  {\n   \"uuid\": \"gkABCDEnCkPuA==\",\n   \"id\": 1000000000000,\n   \"account_id\": \"AbcjxkfhdEEE\",\n   \"host_id\": \"z8dfkgABBBBBBBfp8uQ\",\n   \"topic\": \"MyTestPollMeeting\",\n   \"type\": 2,\n   \"start_time\": \"2019-08-29T21:54:49Z\",\n   \"timezone\": \"America/Los_Angeles\",\n   \"duration\": 1,\n   \"total_size\": 47383,\n   \"recording_count\": 1,\n   \"share_url\": \"https://api.zoom.us/recording/share/IABCDJDKDJEEEEEk_GwfdggdgkTziMw\",\n   \"recording_files\": [\n    {\n     \"id\": \"589ABBBBB-8718e\",\n     \"meeting_id\": \"gkABCDEnCkPuA==\",\n     \"recording_start\": \"2019-08-29T21:54:55Z\",\n     \"recording_end\": \"2019-08-29T21:55:24Z\",\n     \"file_type\": \"M4A\",\n     \"file_size\": 10098,\n     \"play_url\": \"https://api.zoom.us/recording/play/pfA2AvvvvvAnAzOibbbbELxl\",\n     \"download_url\": \"https://api.zoom.us/recording/download/pfA2AvvvvvAnAzOibbbbELxl\",\n     \"status\": \"completed\",\n     \"recording_type\": \"audio_only\"\n    },\n    {\n     \"meeting_id\": \"gkABCDEnCkPuA==\",\n     \"recording_start\": \"2019-08-29T21:54:55Z\",\n     \"recording_end\": \"2019-08-29T21:55:24Z\",\n     \"file_type\": \"TIMELINE\",\n     \"download_url\": \"https://api.zoom.us/recording/download/cc33ekldfdjfhf3-aaaaa\"\n    },\n    {\n     \"id\": \"96119b=kdfhf791\",\n     \"meeting_id\": \"gkABCDEnCkPuA==\",\n     \"recording_start\": \"2019-08-29T21:54:55Z\",\n     \"recording_end\": \"2019-08-29T21:55:24Z\",\n     \"file_type\": \"MP4\",\n     \"file_size\": 37285,\n     \"play_url\": \"https://api.zoom.us/recording/play/abcdkjfhdhfdhfj\",\n     \"download_url\": \"https://api.zoom.us/recording/download/abcdkjfhdhfdhfj\",\n     \"status\": \"completed\",\n     \"recording_type\": \"shared_screen_with_speaker_view\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser {userId} not exist or not belong to this account.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/recordings?page_size=30&next_page_token=culpa velit reprehenderit&mc=false&trash=false&from=1948-05-09&to=1948-05-09&trash_type=meeting_recordings&meeting_id=-14804147",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"recordings"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "mc",
													"value": "false"
												},
												{
													"key": "trash",
													"value": "false"
												},
												{
													"key": "from",
													"value": "1948-05-09"
												},
												{
													"key": "to",
													"value": "1948-05-09"
												},
												{
													"key": "trash_type",
													"value": "meeting_recordings"
												},
												{
													"key": "meeting_id",
													"value": "-14804147"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update user status",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "activate",
											"description": "(Required) The action types:<br>`activate` - Activate a deactivated user.<br>`deactivate` - Deactivate a user. (This can only be one of activate,deactivate)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"status"
									],
									"variable": [
										{
											"key": "userId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
										}
									]
								},
								"description": "Use this API to [deactivate](https://support.zoom.us/hc/en-us/articles/115005269946-Remove-User-from-your-Account#h_6a9bc1c3-d739-4945-b1f2-00b3b88fb5cc) an active user or to [reactivate](https://support.zoom.us/hc/en-us/articles/115005269946-Remove-User-from-your-Account#h_16319724-d120-4be6-af5d-31582d134ea0) a deactivated user. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nAn account owner or admins can deactivate as well as activate a user in a Zoom account. Deactivating a user will remove all licenses associated with a user. It will prevent the deactivated user from logging into their Zoom account. A deactivated user can be reactivated. Reactivating a user grants the user access to login to their Zoom account.\n\n**Scopes:** `user:write:admin`, `user:write`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "activate",
													"description": "(Required) The action types:<br>`activate` - Activate a deactivated user.<br>`deactivate` - Deactivate a user. (This can only be one of activate,deactivate)",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"status"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `204`<br>\nStatus updated.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "activate",
													"description": "(Required) The action types:<br>`activate` - Activate a deactivated user.<br>`deactivate` - Deactivate a user. (This can only be one of activate,deactivate)",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"status"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"\""
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br><br>\n**Error Code:** `200`<br>\nZoom Room and Admin users' status cannot be activated or deactivated.<br><br>\n**Error Code:** `300`<br>\nYou cannot deactivate this user because the user has an upcoming Zoom Eve",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "activate",
													"description": "(Required) The action types:<br>`activate` - Activate a deactivated user.<br>`deactivate` - Deactivate a user. (This can only be one of activate,deactivate)",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"status"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.\n",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "activate",
													"description": "(Required) The action types:<br>`activate` - Activate a deactivated user.<br>`deactivate` - Deactivate a user. (This can only be one of activate,deactivate)",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"status"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a user's password",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "password",
											"value": "in et eu quis voluptate",
											"description": "(Required) User password. Should be less than 32 characters.\n\n**Note:** If the account owner or admin has enabled [enhanced password requirements](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_fa9186e4-6818-4f7a-915c-2e25c19f0acd), the value provided in this field must meet those requirements. These requirements can be retrieved by calling the [Get Account Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) and referring to the `password_requirement` field present in the `security` object.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"password"
									],
									"variable": [
										{
											"key": "userId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
										}
									]
								},
								"description": "Update the [password](https://support.zoom.us/hc/en-us/articles/206344385-Change-a-User-s-Password) of a user using which the user can login to Zoom. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nAfter this request is processed successfully, an email notification will be sent to the user stating that the password was changed.<br>\n**Scopes:** `user:write:admin` `user:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n**Prerequisites:**<br>\n* Owner or admin of the Zoom account."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204` **OK**<br>\nPassword updated.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "password",
													"value": "in et eu quis voluptate",
													"description": "(Required) User password. Should be less than 32 characters.\n\n**Note:** If the account owner or admin has enabled [enhanced password requirements](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_fa9186e4-6818-4f7a-915c-2e25c19f0acd), the value provided in this field must meet those requirements. These requirements can be retrieved by calling the [Get Account Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) and referring to the `password_requirement` field present in the `security` object.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"password"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request** <br><br> **Error Code:** `300` <br>Your new password can not match the old password.<br>This password cannot be changed because it has already been changed the maximum number of times over the past 24 hours.<br>",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "password",
													"value": "in et eu quis voluptate",
													"description": "(Required) User password. Should be less than 32 characters.\n\n**Note:** If the account owner or admin has enabled [enhanced password requirements](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_fa9186e4-6818-4f7a-915c-2e25c19f0acd), the value provided in this field must meet those requirements. These requirements can be retrieved by calling the [Get Account Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) and referring to the `password_requirement` field present in the `security` object.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"password"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.\n",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "password",
													"value": "in et eu quis voluptate",
													"description": "(Required) User password. Should be less than 32 characters.\n\n**Note:** If the account owner or admin has enabled [enhanced password requirements](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_fa9186e4-6818-4f7a-915c-2e25c19f0acd), the value provided in this field must meet those requirements. These requirements can be retrieved by calling the [Get Account Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) and referring to the `password_requirement` field present in the `security` object.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"password"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get user permissions",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/permissions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"permissions"
									],
									"variable": [
										{
											"key": "userId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
										}
									]
								},
								"description": "Use this API to get permissions that have been granted to the user. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nUsers can be assigned a set of permissions that allows them to access only the pages/information that a user needs to view or edit.\n\n**Scopes:** `user:read:admin`, `user:read`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nUser permissions returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/permissions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"permissions"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"permissions\": [\n  \"IMGroups:Edit\",\n  \"Security:Edit\",\n  \"IMGroups:Read\",\n  \"BillingSubscription:Edit\",\n  \"SingleSignOn:Edit\",\n  \"WebinarSetting:Edit\",\n  \"Branding:Read\",\n  \"UsageReport:Read\",\n  \"BillingSubscription:Read\",\n  \"CrossHybrid:Read\",\n  \"UserActivitiesReport:Read\",\n  \"Branding:Edit\",\n  \"SingleSignOn:Read\",\n  \"Security:Read\",\n  \"Dashboard:Read\",\n  \"AccountProfile:Read\",\n  \"MarketPlace:Edit\",\n  \"ZoomRooms:Edit\",\n  \"PbxAdmin:Read\",\n  \"Meeting:Edit\",\n  \"IMChatHistory:Read\",\n  \"RoomConnector:Read\",\n  \"IMChatBot:Edit\",\n  \"CrossHybrid:Edit\",\n  \"AccountProfile:Edit\",\n  \"RoomConnector:Edit\",\n  \"Group:Edit\",\n  \"BillingInformation:Edit\",\n  \"LyncConnector:Edit\",\n  \"LyncConnector:Read\",\n  \"Integration:Read\",\n  \"User:Edit\",\n  \"BillingInformation:Read\",\n  \"AccountSetting:Edit\",\n  \"SubAccount:Read\",\n  \"IMSetting:Read\",\n  \"MeetingConnector:Read\",\n  \"ThirdPartyConference:Read\",\n  \"Meeting:Join\",\n  \"CallInContacts:Read\",\n  \"ZoomDevelopers:Read\",\n  \"Recording:Read\",\n  \"Role:Edit\",\n  \"Recording:Edit\",\n  \"DigitalSignage:Read\",\n  \"ScheduleTrackingFields:Read\",\n  \"ThirdPartyConference:Edit\",\n  \"Group:Read\",\n  \"AccountSetting:Read\",\n  \"MeetingConnector:Edit\",\n  \"Integration:Edit\",\n  \"CallInContacts:Edit\",\n  \"DigitalSignage:Edit\",\n  \"MarketPlace:Read\",\n  \"PbxAdmin:Edit\",\n  \"ZoomRooms:Read\",\n  \"MobileDeviceManagement:Read\",\n  \"RecordingContent:Read\",\n  \"User:Read\",\n  \"ScheduleTrackingFields:Edit\",\n  \"WebinarSetting:Read\"\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/permissions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"permissions"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List a user's PAC accounts",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/pac",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"pac"
									],
									"variable": [
										{
											"key": "userId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
										}
									]
								},
								"description": "Use this API to list a user's [Personal Audio Conference](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference) accounts. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nPAC allows Pro or higher account holders to host meetings through PSTN (phone dial-in) only.\n\n**Scopes:** `pac:read:admin`, `pac:read`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* A Pro or higher plan with [Premium Audio Conferencing](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference) add-on.\n* Personal Audio Conference must be enabled in the user's profile."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nPAC account list returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/pac",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"pac"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"pac_accounts\": [\n  {\n   \"dedicated_dial_in_number\": [\n    {\n     \"number\": \"123343434\",\n     \"country\": \"USA\"\n    }\n   ],\n   \"global_dial_in_numbers\": [\n    {\n     \"number\": \"434343434\",\n     \"country\": \"USA\"\n    }\n   ],\n   \"conference_id\": \"111111\",\n   \"participant_password\": \"ghdf\",\n   \"listen_only_password\": \"hkgk\"\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `2024`<br>\nUser does not have PAC enabled.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/pac",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"pac"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/pac",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"pac"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a user's email",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "It2jRgNAFoHzD@YtuoSeGGwaNxXiv.jagd",
											"description": "(Required) User’s email. The length should be less than 128 characters.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/email",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"email"
									],
									"variable": [
										{
											"key": "userId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
										}
									]
								},
								"description": "Change a user's [email address](https://support.zoom.us/hc/en-us/articles/201362563-How-Do-I-Change-the-Email-on-My-Account-) on a Zoom account that has managed domain set up. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\n* If the Zoom account in which the user belongs has multiple [managed domains](https://support.zoom.us/hc/en-us/articles/203395207-What-is-Managed-Domain-), then the email to be updated **must** match one of the managed domains.\n* A user's email address can **only** be changed for a maximum of 3 times in a day (24 hours).\n\n**Scopes:** `user:write:admin`, `user:write`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* Managed domain must be enabled in the account. \n* The new email address should not already exist in Zoom."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204` **No Content**<br>\nEmail updated.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "It2jRgNAFoHzD@YtuoSeGGwaNxXiv.jagd",
													"description": "(Required) User’s email. The length should be less than 128 characters.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/email",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"email"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` **Not Found**<br>\n<br>**Error Code:** `200`<br>\nOnly an account administrator can change email.<br>",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "It2jRgNAFoHzD@YtuoSeGGwaNxXiv.jagd",
													"description": "(Required) User’s email. The length should be less than 128 characters.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/email",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"email"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br>\n<br>**Error Code:** `1001`<br>\nUser does not exist: $email.<br>",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "It2jRgNAFoHzD@YtuoSeGGwaNxXiv.jagd",
													"description": "(Required) User’s email. The length should be less than 128 characters.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/email",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"email"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List webinar templates",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/webinar_templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"webinar_templates"
									],
									"variable": [
										{
											"key": "userId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The user's ID. To get a user's ID, use the [**List users**](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/users) API. For user-level apps, pass the `me` value instead of the user ID value."
										}
									]
								},
								"description": "Use this API to list a user's [webinar templates](https://support.zoom.us/hc/en-us/articles/115001079746-Webinar-Templates). For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter. \n\nWhen you schedule a webinar, you can save the settings for that webinar as a template for scheduling future webinars.  To use a template when scheduling a webinar, use the `id` value in this API response in the `template_id` field of the [**Create a webinar**](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarcreate) API. \n\n**Scopes:** `webinar:read`, `webinar:read:admin` \n\n**Prerequisites:** \n* A Pro or a higher account with the [Zoom Webinar plan](https://zoom.us/pricing/webinar)."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK** <br>\nList of existing templates returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/webinar_templates",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"webinar_templates"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user's ID. To get a user's ID, use the [**List users**](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/users) API. For user-level apps, pass the `me` value instead of the user ID value."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"total_records\": 1,\n \"templates\": [\n  {\n   \"id\": \"ull6574eur\",\n   \"name\": \"Weekly Meeting Template\"\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n**Error Code:** `200`<br> Cannot use webinar API, you need to subscribe webinar plan and then enable webinar for this user:{userId}.<br>\n**Error Code:** `1001`<br>\n* User not exist: {userId}.\n* User {userId",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/webinar_templates",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"webinar_templates"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user's ID. To get a user's ID, use the [**List users**](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/users) API. For user-level apps, pass the `me` value instead of the user ID value."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a user's presence status",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "status",
											"value": "Away",
											"description": "Presence status of the user. The value can be set to one of the following:<br>\n* `Away`\n* `Do_Not_Disturb`\n* `Available`\n* `In_Calendar_Event`\n* `Presenting`\n* `In_A_Zoom_Meeting`\n* `On_A_Call`\n\nUsers who are on Zoom Client with a version **lower than 5.3.0** can update the status from:\n* `Away` to `Do_Not_Disturb` \n* `Available` to `Do_Not_Disturb`\n\nUsers who are on **Zoom Client 5.3.0** or higher can update the status from:\n* `Do_Not_Disturb` to `Away`\n* `Do_Not_Disturb` to `Available`\n* `Available` to `Away`\n* `Away` to `Available` (This can only be one of Do_No_Disturb,Away,Available,In_Calendar_Event,Presenting,In_A_Zoom_Meeting,On_A_Call)",
											"type": "text"
										},
										{
											"key": "duration",
											"value": "1076",
											"description": "If you're updating the status to `Do_Not_Disturb`, specify a duration in minutes for which the status should remain as `Do_Not_Disturb`. \n\nThe default value is 20 minutes and the maximum allowed value is 1440 minutes.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/presence_status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"presence_status"
									],
									"variable": [
										{
											"key": "userId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) "
										}
									]
								},
								"description": "Use this API to update a user's presence status. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\nA user's status **cannot** be updated more than once per minute. For example, you can only submit a maximum of one update request per minute for a single user.\n\nUsers in the Zoom desktop client and mobile apps are assigned with a [presence status](https://support.zoom.us/hc/en-us/articles/360032554051-Status-Icons). The presence status informs users of their contact's availability. Users can also change their own presence status to one the following:\n* **Away**\n* **Do not disturb**\n* **Available**\n* **In a calendar event**\n* **Presenting**\n* **In a Zoom meeting**\n* **On a call**\n\nNote that a user's presence status **cannot** be updated via this API if the user is not logged in to the Zoom client.\n\n**Scopes:** `user:write`, `user:write:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204`<br>\n\nStatus updated succesfully.\n",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "status",
													"value": "Away",
													"description": "Presence status of the user. The value can be set to one of the following:<br>\n* `Away`\n* `Do_Not_Disturb`\n* `Available`\n* `In_Calendar_Event`\n* `Presenting`\n* `In_A_Zoom_Meeting`\n* `On_A_Call`\n\nUsers who are on Zoom Client with a version **lower than 5.3.0** can update the status from:\n* `Away` to `Do_Not_Disturb` \n* `Available` to `Do_Not_Disturb`\n\nUsers who are on **Zoom Client 5.3.0** or higher can update the status from:\n* `Do_Not_Disturb` to `Away`\n* `Do_Not_Disturb` to `Available`\n* `Available` to `Away`\n* `Away` to `Available` (This can only be one of Do_No_Disturb,Away,Available,In_Calendar_Event,Presenting,In_A_Zoom_Meeting,On_A_Call)",
													"type": "text"
												},
												{
													"key": "duration",
													"value": "1076",
													"description": "If you're updating the status to `Do_Not_Disturb`, specify a duration in minutes for which the status should remain as `Do_Not_Disturb`. \n\nThe default value is 20 minutes and the maximum allowed value is 1440 minutes.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/presence_status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"presence_status"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `5301`<br>\nRequest to update the presence status of this user failed.<br>\n**Error Code:** `5411`<br>\nUnauthorized request. You do not have permission to update the presence status of this use",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "status",
													"value": "Away",
													"description": "Presence status of the user. The value can be set to one of the following:<br>\n* `Away`\n* `Do_Not_Disturb`\n* `Available`\n* `In_Calendar_Event`\n* `Presenting`\n* `In_A_Zoom_Meeting`\n* `On_A_Call`\n\nUsers who are on Zoom Client with a version **lower than 5.3.0** can update the status from:\n* `Away` to `Do_Not_Disturb` \n* `Available` to `Do_Not_Disturb`\n\nUsers who are on **Zoom Client 5.3.0** or higher can update the status from:\n* `Do_Not_Disturb` to `Away`\n* `Do_Not_Disturb` to `Available`\n* `Available` to `Away`\n* `Away` to `Available` (This can only be one of Do_No_Disturb,Away,Available,In_Calendar_Event,Presenting,In_A_Zoom_Meeting,On_A_Call)",
													"type": "text"
												},
												{
													"key": "duration",
													"value": "1076",
													"description": "If you're updating the status to `Do_Not_Disturb`, specify a duration in minutes for which the status should remain as `Do_Not_Disturb`. \n\nThe default value is 20 minutes and the maximum allowed value is 1440 minutes.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/presence_status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"presence_status"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `1001`<br>\nUser does not exist: {userId}.\n\n\n\n",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "status",
													"value": "Away",
													"description": "Presence status of the user. The value can be set to one of the following:<br>\n* `Away`\n* `Do_Not_Disturb`\n* `Available`\n* `In_Calendar_Event`\n* `Presenting`\n* `In_A_Zoom_Meeting`\n* `On_A_Call`\n\nUsers who are on Zoom Client with a version **lower than 5.3.0** can update the status from:\n* `Away` to `Do_Not_Disturb` \n* `Available` to `Do_Not_Disturb`\n\nUsers who are on **Zoom Client 5.3.0** or higher can update the status from:\n* `Do_Not_Disturb` to `Away`\n* `Do_Not_Disturb` to `Available`\n* `Available` to `Away`\n* `Away` to `Available` (This can only be one of Do_No_Disturb,Away,Available,In_Calendar_Event,Presenting,In_A_Zoom_Meeting,On_A_Call)",
													"type": "text"
												},
												{
													"key": "duration",
													"value": "1076",
													"description": "If you're updating the status to `Do_Not_Disturb`, specify a duration in minutes for which the status should remain as `Do_Not_Disturb`. \n\nThe default value is 20 minutes and the maximum allowed value is 1440 minutes.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/presence_status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"presence_status"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `429` **Too Many Requests**<br>\nToo many requests submitted to update the presence status of this user. Please wait for the request to be processed and try again later.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "status",
													"value": "Away",
													"description": "Presence status of the user. The value can be set to one of the following:<br>\n* `Away`\n* `Do_Not_Disturb`\n* `Available`\n* `In_Calendar_Event`\n* `Presenting`\n* `In_A_Zoom_Meeting`\n* `On_A_Call`\n\nUsers who are on Zoom Client with a version **lower than 5.3.0** can update the status from:\n* `Away` to `Do_Not_Disturb` \n* `Available` to `Do_Not_Disturb`\n\nUsers who are on **Zoom Client 5.3.0** or higher can update the status from:\n* `Do_Not_Disturb` to `Away`\n* `Do_Not_Disturb` to `Available`\n* `Available` to `Away`\n* `Away` to `Available` (This can only be one of Do_No_Disturb,Away,Available,In_Calendar_Event,Presenting,In_A_Zoom_Meeting,On_A_Call)",
													"type": "text"
												},
												{
													"key": "duration",
													"value": "1076",
													"description": "If you're updating the status to `Do_Not_Disturb`, specify a duration in minutes for which the status should remain as `Do_Not_Disturb`. \n\nThe default value is 20 minutes and the maximum allowed value is 1440 minutes.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/presence_status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"presence_status"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List meeting templates",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/meeting_templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"meeting_templates"
									],
									"variable": [
										{
											"key": "userId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Unique identifier of the user. Retrieve the value of this field by calling the [List users](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/users) API."
										}
									]
								},
								"description": "Use this API to list [meeting templates](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates) that are available to be used by a user. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.\n\n**Scopes:** `meeting:read` or `meeting:read:admin`</br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK** <br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/meeting_templates",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"meeting_templates"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique identifier of the user. Retrieve the value of this field by calling the [List users](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/users) API."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"total_records\": 2,\n \"templates\": [\n  {\n   \"id\": \"AdxbhxCzKgSiWAw\",\n   \"type\": 1,\n   \"name\": \"My meeting template\"\n  },\n  {\n   \"id\": \"eYshgdftw4-5_MUSQ\",\n   \"type\": 2,\n   \"name\": \"Zoom meeting template for daily sync\"\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found** <br>\n**Error Code:** `1001`<br> User not exist: {userId}.<br>\nUser {userId} does not exist or does not belong to this account.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/meeting_templates",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"meeting_templates"
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique identifier of the user. Retrieve the value of this field by calling the [List users](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/users) API."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "List users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?status=active&page_size=30&include_fields=host_key",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "status",
									"value": "active",
									"description": "The user's status: \n* `active` — An active user. \n* `inactive` — A deactivated user. \n* `pending` — A pending user.\n\nThis value defaults to `active`."
								},
								{
									"key": "page_size",
									"value": "30",
									"description": "The number of records returned within a single API call."
								},
								{
									"key": "role_id",
									"value": "culpa velit reprehenderit",
									"description": "The role's unique ID. Use this parameter to filter the response by a specific role. You can use the [List Roles](https://marketplace.zoom.us/docs/api-reference/zoom-api/roles/roles) API to get a role's unique ID value.",
									"disabled": true
								},
								{
									"key": "page_number",
									"value": "culpa velit reprehenderit",
									"description": "The page number of the current page in the returned records.",
									"disabled": true
								},
								{
									"key": "include_fields",
									"value": "host_key",
									"description": "Use this parameter to display one of the following attributes in the API call's response: \n* `custom_attributes` — Return the user's custom attributes. \n* `host_key` — Return the user's [host key](https://support.zoom.us/hc/en-us/articles/205172555-Using-your-host-key)."
								},
								{
									"key": "next_page_token",
									"value": "",
									"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
									"disabled": true
								}
							]
						},
						"description": "Use this API to list your account's users. \n\n**Scopes:** `user:read:admin` \n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nUser list returned.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?status=active&page_size=30&role_id=culpa velit reprehenderit&page_number=culpa velit reprehenderit&include_fields=host_key&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "role_id",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "page_number",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "include_fields",
											"value": "host_key"
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"page_count\": 1,\n \"page_number\": 1,\n \"page_size\": 30,\n \"total_records\": 1,\n \"users\": [\n  {\n   \"id\": \"z8yAAAAA8bbbQ\",\n   \"first_name\": \"Taylor\",\n   \"last_name\": \"Kim\",\n   \"email\": \"example@example.com\",\n   \"type\": 2,\n   \"pmi\": 111111111,\n   \"timezone\": \"America/Los_Angeles\",\n   \"verified\": 1,\n   \"dept\": \"\",\n   \"created_at\": \"2018-11-15T01:10:08Z\",\n   \"last_login_time\": \"2019-09-13T21:08:52Z\",\n   \"last_client_version\": \"4.4.55383.0716(android)\",\n   \"pic_url\": \"https://example.com/photo.jpg\",\n   \"im_group_ids\": [\n    \"GroupName\"\n   ],\n   \"status\": \"active\"\n  }\n ]\n}"
						}
					]
				},
				{
					"name": "Create users",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "action",
									"value": "ssoCreate",
									"description": "(Required) Specify how to create the new user: <br>`create` - User will get an email sent from Zoom. There is a confirmation link in this email. The user will then need to use the link to activate their Zoom account. The user can then set or change their password.<br>`autoCreate` - This action is provided for the enterprise customer who has a managed domain. This feature is disabled by default because of the security risk involved in creating a user who does not belong to your domain.<br>`custCreate` - Users created via this option do not have passwords and will not have the ability to log into the Zoom Web Portal or the Zoom Client. These users can still host and join meetings using the `start_url` and `join_url` respectively. To use this option, you must contact the ISV Platform Sales team at isv@zoom.us.<br>`ssoCreate` - This action is provided for the enabled “Pre-provisioning SSO User” option. A user created in this way has no password. If not a basic user, a personal vanity URL using the user name (no domain) of the provisioning email will be generated. If the user name or PMI is invalid or occupied, it will use a random number or random personal vanity URL. (This can only be one of create,autoCreate,custCreate,ssoCreate)",
									"type": "text"
								},
								{
									"key": "user_info",
									"value": "{\"email\":\"in voluptate exercitation\",\"type\":1,\"first_name\":\"magna anim voluptate\",\"last_name\":\"eu\",\"password\":\"occaecat irure\"}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Use this API to add a new user to your Zoom account. \n\n**Scopes:** `user:write:admin`, `user:write` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n **Note:** The following rate limits apply when you use the `create` value for the `action` field: \n* 50 requests per day for **Free** accounts. \n* 1,500 requests per day for **Pro** accounts. \n* 10,000 requests per day for **Business+** accounts. \n\n**Prerequisites:** \n* A Pro or higher plan."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `201`<br>\nUser created.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "ssoCreate",
											"description": "(Required) Specify how to create the new user: <br>`create` - User will get an email sent from Zoom. There is a confirmation link in this email. The user will then need to use the link to activate their Zoom account. The user can then set or change their password.<br>`autoCreate` - This action is provided for the enterprise customer who has a managed domain. This feature is disabled by default because of the security risk involved in creating a user who does not belong to your domain.<br>`custCreate` - Users created via this option do not have passwords and will not have the ability to log into the Zoom Web Portal or the Zoom Client. These users can still host and join meetings using the `start_url` and `join_url` respectively. To use this option, you must contact the ISV Platform Sales team at isv@zoom.us.<br>`ssoCreate` - This action is provided for the enabled “Pre-provisioning SSO User” option. A user created in this way has no password. If not a basic user, a personal vanity URL using the user name (no domain) of the provisioning email will be generated. If the user name or PMI is invalid or occupied, it will use a random number or random personal vanity URL. (This can only be one of create,autoCreate,custCreate,ssoCreate)",
											"type": "text"
										},
										{
											"key": "user_info",
											"value": "{\"email\":\"in voluptate exercitation\",\"type\":1,\"first_name\":\"magna anim voluptate\",\"last_name\":\"eu\",\"password\":\"occaecat irure\"}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Location",
									"value": "culpa velit reprehenderit",
									"description": "Location of created User"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"string\",\n \"first_name\": \"string\",\n \"last_name\": \"string\",\n \"email\": \"string\",\n \"type\": \"integer\"\n}"
						},
						{
							"name": "**HTTP Status Code:** `400` <br> Bad Request \n\n **Error Code:** `300` <br> Invalid parameter: password \n\n **Error Code:** `200` <br> No privilege. <br> No permission, please contact Zoom customer support. \n\n **Error Code:** `1000` <br> The user cannot be ",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "ssoCreate",
											"description": "(Required) Specify how to create the new user: <br>`create` - User will get an email sent from Zoom. There is a confirmation link in this email. The user will then need to use the link to activate their Zoom account. The user can then set or change their password.<br>`autoCreate` - This action is provided for the enterprise customer who has a managed domain. This feature is disabled by default because of the security risk involved in creating a user who does not belong to your domain.<br>`custCreate` - Users created via this option do not have passwords and will not have the ability to log into the Zoom Web Portal or the Zoom Client. These users can still host and join meetings using the `start_url` and `join_url` respectively. To use this option, you must contact the ISV Platform Sales team at isv@zoom.us.<br>`ssoCreate` - This action is provided for the enabled “Pre-provisioning SSO User” option. A user created in this way has no password. If not a basic user, a personal vanity URL using the user name (no domain) of the provisioning email will be generated. If the user name or PMI is invalid or occupied, it will use a random number or random personal vanity URL. (This can only be one of create,autoCreate,custCreate,ssoCreate)",
											"type": "text"
										},
										{
											"key": "user_info",
											"value": "{\"email\":\"in voluptate exercitation\",\"type\":1,\"first_name\":\"magna anim voluptate\",\"last_name\":\"eu\",\"password\":\"occaecat irure\"}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `4130`<br>\nGroup does not exist: $groupId<br>",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "ssoCreate",
											"description": "(Required) Specify how to create the new user: <br>`create` - User will get an email sent from Zoom. There is a confirmation link in this email. The user will then need to use the link to activate their Zoom account. The user can then set or change their password.<br>`autoCreate` - This action is provided for the enterprise customer who has a managed domain. This feature is disabled by default because of the security risk involved in creating a user who does not belong to your domain.<br>`custCreate` - Users created via this option do not have passwords and will not have the ability to log into the Zoom Web Portal or the Zoom Client. These users can still host and join meetings using the `start_url` and `join_url` respectively. To use this option, you must contact the ISV Platform Sales team at isv@zoom.us.<br>`ssoCreate` - This action is provided for the enabled “Pre-provisioning SSO User” option. A user created in this way has no password. If not a basic user, a personal vanity URL using the user name (no domain) of the provisioning email will be generated. If the user name or PMI is invalid or occupied, it will use a random number or random personal vanity URL. (This can only be one of create,autoCreate,custCreate,ssoCreate)",
											"type": "text"
										},
										{
											"key": "user_info",
											"value": "{\"email\":\"in voluptate exercitation\",\"type\":1,\"first_name\":\"magna anim voluptate\",\"last_name\":\"eu\",\"password\":\"occaecat irure\"}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `409`<br>User with that email already exists<br>\n**Error Code:** `1005`<br>Email $email has already been used.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "ssoCreate",
											"description": "(Required) Specify how to create the new user: <br>`create` - User will get an email sent from Zoom. There is a confirmation link in this email. The user will then need to use the link to activate their Zoom account. The user can then set or change their password.<br>`autoCreate` - This action is provided for the enterprise customer who has a managed domain. This feature is disabled by default because of the security risk involved in creating a user who does not belong to your domain.<br>`custCreate` - Users created via this option do not have passwords and will not have the ability to log into the Zoom Web Portal or the Zoom Client. These users can still host and join meetings using the `start_url` and `join_url` respectively. To use this option, you must contact the ISV Platform Sales team at isv@zoom.us.<br>`ssoCreate` - This action is provided for the enabled “Pre-provisioning SSO User” option. A user created in this way has no password. If not a basic user, a personal vanity URL using the user name (no domain) of the provisioning email will be generated. If the user name or PMI is invalid or occupied, it will use a random number or random personal vanity URL. (This can only be one of create,autoCreate,custCreate,ssoCreate)",
											"type": "text"
										},
										{
											"key": "user_info",
											"value": "{\"email\":\"in voluptate exercitation\",\"type\":1,\"first_name\":\"magna anim voluptate\",\"last_name\":\"eu\",\"password\":\"occaecat irure\"}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `429` <br> You have exceeded the daily rate limit ({0}) of user invite requests permitted for this account. You may resume these requests at GMT 00:00:00.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "ssoCreate",
											"description": "(Required) Specify how to create the new user: <br>`create` - User will get an email sent from Zoom. There is a confirmation link in this email. The user will then need to use the link to activate their Zoom account. The user can then set or change their password.<br>`autoCreate` - This action is provided for the enterprise customer who has a managed domain. This feature is disabled by default because of the security risk involved in creating a user who does not belong to your domain.<br>`custCreate` - Users created via this option do not have passwords and will not have the ability to log into the Zoom Web Portal or the Zoom Client. These users can still host and join meetings using the `start_url` and `join_url` respectively. To use this option, you must contact the ISV Platform Sales team at isv@zoom.us.<br>`ssoCreate` - This action is provided for the enabled “Pre-provisioning SSO User” option. A user created in this way has no password. If not a basic user, a personal vanity URL using the user name (no domain) of the provisioning email will be generated. If the user name or PMI is invalid or occupied, it will use a random number or random personal vanity URL. (This can only be one of create,autoCreate,custCreate,ssoCreate)",
											"type": "text"
										},
										{
											"key": "user_info",
											"value": "{\"email\":\"in voluptate exercitation\",\"type\":1,\"first_name\":\"magna anim voluptate\",\"last_name\":\"eu\",\"password\":\"occaecat irure\"}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get user's ZAK",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/me/zak",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"me",
								"zak"
							]
						},
						"description": "Get User’s Zoom Access Token (ZAK). You can use a ZAK to enable a non-login user to join a meeting on your app. Non-login users do not need to enter their username and password to join meetings.\n\n**Scope:** `user_zak:read`<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/me/zak",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"me",
										"zak"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"token\": \"sslldd00933aaas\"\n}"
						},
						{
							"name": "**HTTP Status Code:** `404` <br>\n\n**Error Code:** `1001`<br>\nUser not exist.<br>\nUser {userId} does not exist or does not belong to this account.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/me/zak",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"me",
										"zak"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Check a user email",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/email?email=culpa velit reprehenderit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"email"
							],
							"query": [
								{
									"key": "email",
									"value": "culpa velit reprehenderit",
									"description": "(Required) The email address to be verified."
								}
							]
						},
						"description": "Verify if a user's email is registered with Zoom.<br><br>\n\n<b>Note: </b>You can successfully check if a user is a registered Zoom user only if the user **signed up for Zoom via email and is within your account.** If you provide an email address of a user who is not in your account, the value of \"existed_email\" parameter will be \"false\" irrespective of whether or not the user is registered with Zoom. The response of this API call will not include users who joined Zoom using options such as \"Sign in with SSO\", \"Sign in with Google\" or \"Sign in with Facebook\" even if they are in the same account as yours.\n\n**Scopes:** `user:read:admin` `user:read`\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nSuccess.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/email?email=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"email"
									],
									"query": [
										{
											"key": "email",
											"value": "culpa velit reprehenderit"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"existed_email\": false\n}"
						},
						{
							"name": "**HTTP Status Code:** `400` **Bad Request** <br><br>\n**Error Code:** `300`<br> Email is required.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/email?email=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"email"
									],
									"query": [
										{
											"key": "email",
											"value": "culpa velit reprehenderit"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `1001`<br>\nUser does not exist: $userId.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/email?email=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"email"
									],
									"query": [
										{
											"key": "email",
											"value": "culpa velit reprehenderit"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Check a user's PM room",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/vanity_name?vanity_name=culpa velit reprehenderit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"vanity_name"
							],
							"query": [
								{
									"key": "vanity_name",
									"value": "culpa velit reprehenderit",
									"description": "(Required) Personal meeting room name."
								}
							]
						},
						"description": "A personal meeting room is a virtual meeting room that can be permanently assigned to a user.\nUse this API to check if a personal meeting room with the given name exists or not.<br><br>\n**Scopes:** `user:read:admin` `user:read`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` "
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nSuccess.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/vanity_name?vanity_name=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"vanity_name"
									],
									"query": [
										{
											"key": "vanity_name",
											"value": "culpa velit reprehenderit"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"existed\": true\n}"
						},
						{
							"name": "**HTTP Status Code:** `400` **Bad Request**<br><br>\n**Error Code:** `300`<br>Vanity name is required.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/vanity_name?vanity_name=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"vanity_name"
									],
									"query": [
										{
											"key": "vanity_name",
											"value": "culpa velit reprehenderit"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "meetings/{meeting Id}",
			"item": [
				{
					"name": "registrants",
					"item": [
						{
							"name": "{registrant Id}",
							"item": [
								{
									"name": "Delete a meeting registrant",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/registrants/:registrantId?occurrence_id=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"registrants",
												":registrantId"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "culpa velit reprehenderit",
													"description": "The meeting occurence ID."
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID."
												},
												{
													"key": "registrantId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The meeting registrant ID."
												}
											]
										},
										"description": "Delete a meeting registrant.<br><br>\n**Scopes**: `meeting:write:admin` `meeting:write`<br>\n <br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
									},
									"response": [
										{
											"name": "**HTTP status code:** `204` <br>\nOK",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants/:registrantId?occurrence_id=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants",
														":registrantId"
													],
													"query": [
														{
															"key": "occurrence_id",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID."
														},
														{
															"key": "registrantId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The meeting registrant ID."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP status code:** `400` <br>\nBad Request<br>\n\n**Error code:** `200`<br>\nOnly available for paid users: {0}.<br>\n\n**Error code:** `300`<br>\nThe value that you entered for the Registrant ID field is invalid. Enter a valid value and try again.<br>\n\n**Err",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants/:registrantId?occurrence_id=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants",
														":registrantId"
													],
													"query": [
														{
															"key": "occurrence_id",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID."
														},
														{
															"key": "registrantId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The meeting registrant ID."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get a meeting registrant",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/registrants/:registrantId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"registrants",
												":registrantId"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												},
												{
													"key": "registrantId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The registrant ID."
												}
											]
										},
										"description": "Use this API to get details on a specific user who has registered for the meeting. A host or a user with administrative permissions can require [registration for Zoom meetings](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).\n\n**Scopes:** `meeting:read:admin`, `meeting:read`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* The account must have a Meeting plan"
									},
									"response": [
										{
											"name": "Success.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants/:registrantId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants",
														":registrantId"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
														},
														{
															"key": "registrantId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The registrant ID."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"24000002122\",\n \"email\": \"example@example.com\",\n \"first_name\": \"Jill\",\n \"last_name\": \"Chill\",\n \"address\": \"1800 Amphibious Blvd.\",\n \"city\": \"Mountain View\",\n \"country\": \"US\",\n \"zip\": \"94045\",\n \"state\": \"CA\",\n \"phone\": \"5550100\",\n \"industry\": \"Food\",\n \"org\": \"Cooking Org\",\n \"job_title\": \"Chef\",\n \"purchasing_time_frame\": \"1-3 months\",\n \"role_in_purchase_process\": \"Influencer\",\n \"no_of_employees\": \"10\",\n \"comments\": \"Looking forward to the Meeting\",\n \"custom_questions\": [\n  {\n   \"title\": \"What do you hope to learn from this Meeting?\",\n   \"value\": \"Look forward to learning how you come up with new recipes and what other services you offer.\"\n  }\n ],\n \"status\": \"approved\",\n \"create_time\": \"2021-07-29T08:06:15Z\",\n \"join_url\": \"https://zoom.us/w/93996867430?tk=xK1MkXXQmkGWEaGvJ5BrbQ4Xc1FhUt90CUH5qI3Ko2E.DQUAAAAV4qZfZhZ5dm1pRVQ0NVRSVzBfSUpyRlpybllBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&pwd=M35SOl_x90Gq8VR10a4BroJCx5OMoK.1\"\n}"
										},
										{
											"name": "**Error Code:** `300`<br>Meeting \"{meetingId}\" is not valid or has expired.\nThis meeting has not set required registration: \"{meetingId}\"",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants/:registrantId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants",
														":registrantId"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
														},
														{
															"key": "registrantId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The registrant ID."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400`<br>**Error Code:** `1010`\nUser does not belong to this account: \"{accountId}\"<br>**Error Code:** `3003`\nYou are not the meeting host.<br>**Error Code:** `3000`>\nCannot access meeting info.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants/:registrantId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants",
														":registrantId"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
														},
														{
															"key": "registrantId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The registrant ID."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`\nMeeting not found.<br>**Error Code:** `1001`<br>\nMeeting host does not exist: \"{userId}\"",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants/:registrantId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants",
														":registrantId"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
														},
														{
															"key": "registrantId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The registrant ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "questions",
							"item": [
								{
									"name": "List registration questions ",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/registrants/questions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"registrants",
												"questions"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										},
										"description": "List registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).<br>\n\n**Scopes:** `meeting:read`, `meeting:read:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nMeeting Registrant Question object returned",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants/questions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants",
														"questions"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"questions\": [\n  {\n   \"field_name\": \"address\",\n   \"required\": true\n  }\n ],\n \"custom_questions\": [\n  {\n   \"title\": \"How long have you been working?\",\n   \"type\": \"short\",\n   \"required\": false\n  }\n ]\n}"
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nMeeting not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants/questions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants",
														"questions"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update registration questions",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "questions",
													"value": "[{\"field_name\":\"state\",\"required\":false},{\"field_name\":\"no_of_employees\",\"required\":false}]",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "custom_questions",
													"value": "[{\"title\":\"ea tempor in sit in\",\"type\":\"short\",\"required\":false,\"answers\":[\"Duis minim\",\"ad labore dolor\"]},{\"title\":\"qui minim\",\"type\":\"short\",\"required\":false,\"answers\":[\"veniam dolore\",\"cillum commodo\"]}]",
													"description": "undefined",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/registrants/questions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"registrants",
												"questions"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										},
										"description": "Update registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).<br><br>\n**Scopes:** `meeting:write`, `meeting:write:admin`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n \n\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204`<br>\nMeeting Registrant Questions Updated",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "questions",
															"value": "[{\"field_name\":\"phone\",\"required\":true},{\"field_name\":\"address\",\"required\":false}]",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "custom_questions",
															"value": "[{\"title\":\"commodo velit aliqua cillum\",\"type\":\"short\",\"required\":true,\"answers\":[\"velit ullamco Excepteur magna\",\"quis officia mollit\"]},{\"title\":\"eu ad\",\"type\":\"single\",\"required\":false,\"answers\":[\"nostrud eu\",\"tempor consectetur\"]}]",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants/questions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants",
														"questions"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nMeeting not found.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "questions",
															"value": "[{\"field_name\":\"phone\",\"required\":true},{\"field_name\":\"address\",\"required\":false}]",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "custom_questions",
															"value": "[{\"title\":\"commodo velit aliqua cillum\",\"type\":\"short\",\"required\":true,\"answers\":[\"velit ullamco Excepteur magna\",\"quis officia mollit\"]},{\"title\":\"eu ad\",\"type\":\"single\",\"required\":false,\"answers\":[\"nostrud eu\",\"tempor consectetur\"]}]",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/registrants/questions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"registrants",
														"questions"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "List meeting registrants",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/registrants?occurrence_id=culpa velit reprehenderit&status=approved&page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"registrants"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit",
											"description": "The meeting occurrence ID."
										},
										{
											"key": "status",
											"value": "approved",
											"description": "The registrant status:<br>`pending` - Registrant's status is pending.<br>`approved` - Registrant's status is approved.<br>`denied` - Registrant's status is denied."
										},
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "page_number",
											"value": "1",
											"description": "\n**Deprecated** - This field has been deprecated and we will stop supporting it completely in a future release. Please use \"next_page_token\" for pagination instead of this field.\n\nThe page number of the current page in the returned records."
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										}
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								},
								"description": "A host or a user with admin permission can require [registration for a Zoom meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings). Use this API to list users that have registered for a meeting.<br><br>\n**Scopes**: `meeting:read:admin` `meeting:read`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nSuccessfully listedd meeting registrants.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/registrants?occurrence_id=culpa velit reprehenderit&status=approved&page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "status",
													"value": "approved"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "page_number",
													"value": "1"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"page_count\": 1,\n \"page_number\": 1,\n \"page_size\": 1,\n \"total_records\": 1,\n \"registrants\": [\n  {\n   \"email\": \"example@example.com\",\n   \"first_name\": \"Tim\",\n   \"last_name\": \"S.\",\n   \"id\": \"zjkfsdfjdfhg\",\n   \"address\": \"8 Rue du Nom Fictif\",\n   \"city\": \"Paris\",\n   \"country\": \"France\",\n   \"zip\": \"314\",\n   \"state\": \"Ile-de-France\",\n   \"phone\": \"5550100\",\n   \"industry\": \"Tech\",\n   \"org\": \"Growth\",\n   \"job_title\": \"Developer\",\n   \"purchasing_time_frame\": \"Within a month\",\n   \"role_in_purchase_process\": \"Not involved\",\n   \"no_of_employees\": \"1-20\",\n   \"comments\": \"Love using Zoom APIs\",\n   \"custom_questions\": [\n    {\n     \"title\": \"Did you enjoy the registration process?\",\n     \"value\": \"Yes, alot.\"\n    },\n    {\n     \"title\": \"Would you like to register for our next meeting?\",\n     \"value\": \"Absolutely.\"\n    }\n   ],\n   \"status\": \"approved\",\n   \"create_time\": \"2012-04-14T16:55:30.231Z\",\n   \"join_url\": \"https://success.zoom.us/j/0000000000000\"\n  }\n ]\n}"
								},
								{
									"name": "**Error Code:** `300`<br>\nMeeting {meetingId} is not found or has expired.<br>\nThis meeting has not set registration as required: {meetingId}.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/registrants?occurrence_id=culpa velit reprehenderit&status=approved&page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "status",
													"value": "approved"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "page_number",
													"value": "1"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account: {accountId}.<br>\n**Error Code:** `3003`<br>\nYou are not the meeting host.<br>\n**Error Code:** `3000`<br>\nCannot access meeting info.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/registrants?occurrence_id=culpa velit reprehenderit&status=approved&page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "status",
													"value": "approved"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "page_number",
													"value": "1"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nMeeting not found.<br>\n**Error Code:** `1001`<br>\nMeeting host does not exist: {userId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/registrants?occurrence_id=culpa velit reprehenderit&status=approved&page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "status",
													"value": "approved"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "page_number",
													"value": "1"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add meeting registrant",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "est amet",
											"type": "text"
										},
										{
											"key": "first_name",
											"value": "repre",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "labore in",
											"type": "text"
										},
										{
											"key": "address",
											"value": "eiusmod qui",
											"type": "text"
										},
										{
											"key": "city",
											"value": "velit magna",
											"type": "text"
										},
										{
											"key": "country",
											"value": "sit ipsum veniam sint",
											"type": "text"
										},
										{
											"key": "zip",
											"value": "Duis velit cupidatat occaecat",
											"type": "text"
										},
										{
											"key": "state",
											"value": "id nisi nostrud",
											"type": "text"
										},
										{
											"key": "phone",
											"value": "labore et commodo veniam",
											"type": "text"
										},
										{
											"key": "industry",
											"value": "aute ad mollit elit magna",
											"type": "text"
										},
										{
											"key": "org",
											"value": "deserunt Excepteur aliqua",
											"type": "text"
										},
										{
											"key": "job_title",
											"value": "sunt ut labo",
											"type": "text"
										},
										{
											"key": "purchasing_time_frame",
											"value": "reprehenderit aute",
											"type": "text"
										},
										{
											"key": "role_in_purchase_process",
											"value": "dolore ut",
											"type": "text"
										},
										{
											"key": "no_of_employees",
											"value": "in Lorem ipsum et consectetur",
											"type": "text"
										},
										{
											"key": "comments",
											"value": "sed irure laboris",
											"type": "text"
										},
										{
											"key": "custom_questions",
											"value": "[{\"title\":\"magna\",\"value\":\"irure voluptate commod\"},{\"title\":\"non officia ex ullamco\",\"value\":\"nulla ad cillum do\"}]",
											"type": "text"
										},
										{
											"key": "language",
											"value": "tempor anim aute consequat",
											"type": "text"
										},
										{
											"key": "auto_approve",
											"value": "false",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/registrants?occurrence_ids=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"registrants"
									],
									"query": [
										{
											"key": "occurrence_ids",
											"value": "culpa velit reprehenderit",
											"description": "Occurrence IDs. You can find these with the meeting get API. Multiple values separated by comma."
										}
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								},
								"description": "Register a participant for a meeting.<br><br> Note that there is a maximum limit of 4999 registrants per meeting and users will see an error if the capacity has reached.\n\n**Prerequisite:**<br>\n* Host user type must be \"Licensed\".\n\n**Scopes:** `meeting:write:admin` `meeting:write`\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `201`<br>\nRegistration created.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "Ut sint",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "in mollit",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "quis ipsum sed",
													"type": "text"
												},
												{
													"key": "address",
													"value": "ut sed ex in",
													"type": "text"
												},
												{
													"key": "city",
													"value": "tempor dolore",
													"type": "text"
												},
												{
													"key": "country",
													"value": "do dolore",
													"type": "text"
												},
												{
													"key": "zip",
													"value": "eiusmod",
													"type": "text"
												},
												{
													"key": "state",
													"value": "nulla ut ipsum veli",
													"type": "text"
												},
												{
													"key": "phone",
													"value": "in dolore",
													"type": "text"
												},
												{
													"key": "industry",
													"value": "eiusmod dolor",
													"type": "text"
												},
												{
													"key": "org",
													"value": "qui eiusmod sunt in",
													"type": "text"
												},
												{
													"key": "job_title",
													"value": "consectetur cupidatat",
													"type": "text"
												},
												{
													"key": "purchasing_time_frame",
													"value": "nostrud dolor",
													"type": "text"
												},
												{
													"key": "role_in_purchase_process",
													"value": "qui sunt",
													"type": "text"
												},
												{
													"key": "no_of_employees",
													"value": "laboris ut ad",
													"type": "text"
												},
												{
													"key": "comments",
													"value": "proident cillum ex minim",
													"type": "text"
												},
												{
													"key": "custom_questions",
													"value": "[{\"title\":\"aute deserunt dolore dolor eu\",\"value\":\"et tempor eiusmod consequat\"},{\"title\":\"mollit pariatur eu labore\",\"value\":\"laborum et\"}]",
													"type": "text"
												},
												{
													"key": "language",
													"value": "do anim irure occaecat",
													"type": "text"
												},
												{
													"key": "auto_approve",
													"value": "false",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/registrants?occurrence_ids=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_ids",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": 85746065,\n \"join_url\": \"amet\",\n \"registrant_id\": \"a\",\n \"start_time\": \"culpa mollit\",\n \"topic\": \"reprehenderit ea ut ex Excepteur\"\n}"
								},
								{
									"name": "**Error Code:** `300`<br>\nMeeting {meetingId} is not found or has expired.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "Ut sint",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "in mollit",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "quis ipsum sed",
													"type": "text"
												},
												{
													"key": "address",
													"value": "ut sed ex in",
													"type": "text"
												},
												{
													"key": "city",
													"value": "tempor dolore",
													"type": "text"
												},
												{
													"key": "country",
													"value": "do dolore",
													"type": "text"
												},
												{
													"key": "zip",
													"value": "eiusmod",
													"type": "text"
												},
												{
													"key": "state",
													"value": "nulla ut ipsum veli",
													"type": "text"
												},
												{
													"key": "phone",
													"value": "in dolore",
													"type": "text"
												},
												{
													"key": "industry",
													"value": "eiusmod dolor",
													"type": "text"
												},
												{
													"key": "org",
													"value": "qui eiusmod sunt in",
													"type": "text"
												},
												{
													"key": "job_title",
													"value": "consectetur cupidatat",
													"type": "text"
												},
												{
													"key": "purchasing_time_frame",
													"value": "nostrud dolor",
													"type": "text"
												},
												{
													"key": "role_in_purchase_process",
													"value": "qui sunt",
													"type": "text"
												},
												{
													"key": "no_of_employees",
													"value": "laboris ut ad",
													"type": "text"
												},
												{
													"key": "comments",
													"value": "proident cillum ex minim",
													"type": "text"
												},
												{
													"key": "custom_questions",
													"value": "[{\"title\":\"aute deserunt dolore dolor eu\",\"value\":\"et tempor eiusmod consequat\"},{\"title\":\"mollit pariatur eu labore\",\"value\":\"laborum et\"}]",
													"type": "text"
												},
												{
													"key": "language",
													"value": "do anim irure occaecat",
													"type": "text"
												},
												{
													"key": "auto_approve",
													"value": "false",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/registrants?occurrence_ids=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_ids",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` <br><br> **Error Code:** `1010` <br>\n User does not belong to this account: {accountId}. <br><br> **Error Code:** `3003` <br>\n You are not the meeting host. <br><br> **Error Code:** `3043` <br>\n Meeting has reached maximum atte",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "Ut sint",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "in mollit",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "quis ipsum sed",
													"type": "text"
												},
												{
													"key": "address",
													"value": "ut sed ex in",
													"type": "text"
												},
												{
													"key": "city",
													"value": "tempor dolore",
													"type": "text"
												},
												{
													"key": "country",
													"value": "do dolore",
													"type": "text"
												},
												{
													"key": "zip",
													"value": "eiusmod",
													"type": "text"
												},
												{
													"key": "state",
													"value": "nulla ut ipsum veli",
													"type": "text"
												},
												{
													"key": "phone",
													"value": "in dolore",
													"type": "text"
												},
												{
													"key": "industry",
													"value": "eiusmod dolor",
													"type": "text"
												},
												{
													"key": "org",
													"value": "qui eiusmod sunt in",
													"type": "text"
												},
												{
													"key": "job_title",
													"value": "consectetur cupidatat",
													"type": "text"
												},
												{
													"key": "purchasing_time_frame",
													"value": "nostrud dolor",
													"type": "text"
												},
												{
													"key": "role_in_purchase_process",
													"value": "qui sunt",
													"type": "text"
												},
												{
													"key": "no_of_employees",
													"value": "laboris ut ad",
													"type": "text"
												},
												{
													"key": "comments",
													"value": "proident cillum ex minim",
													"type": "text"
												},
												{
													"key": "custom_questions",
													"value": "[{\"title\":\"aute deserunt dolore dolor eu\",\"value\":\"et tempor eiusmod consequat\"},{\"title\":\"mollit pariatur eu labore\",\"value\":\"laborum et\"}]",
													"type": "text"
												},
												{
													"key": "language",
													"value": "do anim irure occaecat",
													"type": "text"
												},
												{
													"key": "auto_approve",
													"value": "false",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/registrants?occurrence_ids=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_ids",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` <br>\n Meeting not found. <br> Registration has not been enabled for this meeting: {meetingId} <br><br> **Error Code:** `1001` <br>\n Meeting host does not exist: {userId}.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "Ut sint",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "in mollit",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "quis ipsum sed",
													"type": "text"
												},
												{
													"key": "address",
													"value": "ut sed ex in",
													"type": "text"
												},
												{
													"key": "city",
													"value": "tempor dolore",
													"type": "text"
												},
												{
													"key": "country",
													"value": "do dolore",
													"type": "text"
												},
												{
													"key": "zip",
													"value": "eiusmod",
													"type": "text"
												},
												{
													"key": "state",
													"value": "nulla ut ipsum veli",
													"type": "text"
												},
												{
													"key": "phone",
													"value": "in dolore",
													"type": "text"
												},
												{
													"key": "industry",
													"value": "eiusmod dolor",
													"type": "text"
												},
												{
													"key": "org",
													"value": "qui eiusmod sunt in",
													"type": "text"
												},
												{
													"key": "job_title",
													"value": "consectetur cupidatat",
													"type": "text"
												},
												{
													"key": "purchasing_time_frame",
													"value": "nostrud dolor",
													"type": "text"
												},
												{
													"key": "role_in_purchase_process",
													"value": "qui sunt",
													"type": "text"
												},
												{
													"key": "no_of_employees",
													"value": "laboris ut ad",
													"type": "text"
												},
												{
													"key": "comments",
													"value": "proident cillum ex minim",
													"type": "text"
												},
												{
													"key": "custom_questions",
													"value": "[{\"title\":\"aute deserunt dolore dolor eu\",\"value\":\"et tempor eiusmod consequat\"},{\"title\":\"mollit pariatur eu labore\",\"value\":\"laborum et\"}]",
													"type": "text"
												},
												{
													"key": "language",
													"value": "do anim irure occaecat",
													"type": "text"
												},
												{
													"key": "auto_approve",
													"value": "false",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/registrants?occurrence_ids=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_ids",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `429` <br>\n You have exceeded the daily rate limit of \"{0}\" for **Add meeting registrant** API requests for the registrant \"{1}\". You can resume these API requests at GMT 00:00:00.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "Ut sint",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "in mollit",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "quis ipsum sed",
													"type": "text"
												},
												{
													"key": "address",
													"value": "ut sed ex in",
													"type": "text"
												},
												{
													"key": "city",
													"value": "tempor dolore",
													"type": "text"
												},
												{
													"key": "country",
													"value": "do dolore",
													"type": "text"
												},
												{
													"key": "zip",
													"value": "eiusmod",
													"type": "text"
												},
												{
													"key": "state",
													"value": "nulla ut ipsum veli",
													"type": "text"
												},
												{
													"key": "phone",
													"value": "in dolore",
													"type": "text"
												},
												{
													"key": "industry",
													"value": "eiusmod dolor",
													"type": "text"
												},
												{
													"key": "org",
													"value": "qui eiusmod sunt in",
													"type": "text"
												},
												{
													"key": "job_title",
													"value": "consectetur cupidatat",
													"type": "text"
												},
												{
													"key": "purchasing_time_frame",
													"value": "nostrud dolor",
													"type": "text"
												},
												{
													"key": "role_in_purchase_process",
													"value": "qui sunt",
													"type": "text"
												},
												{
													"key": "no_of_employees",
													"value": "laboris ut ad",
													"type": "text"
												},
												{
													"key": "comments",
													"value": "proident cillum ex minim",
													"type": "text"
												},
												{
													"key": "custom_questions",
													"value": "[{\"title\":\"aute deserunt dolore dolor eu\",\"value\":\"et tempor eiusmod consequat\"},{\"title\":\"mollit pariatur eu labore\",\"value\":\"laborum et\"}]",
													"type": "text"
												},
												{
													"key": "language",
													"value": "do anim irure occaecat",
													"type": "text"
												},
												{
													"key": "auto_approve",
													"value": "false",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/registrants?occurrence_ids=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_ids",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update registrant's status",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "approve",
											"description": "(Required) Registrant Status:<br>`approve` - Approve registrant.<br>`cancel` - Cancel previously approved registrant's registration.<br>`deny` - Deny registrant. (This can only be one of approve,cancel,deny)",
											"type": "text"
										},
										{
											"key": "registrants",
											"value": "[{\"id\":\"Excepteur est tempor dolor\",\"email\":\"adipisicing\"},{\"id\":\"est cupidatat Lorem\",\"email\":\"sit dolore pr\"}]",
											"description": "List of registrants.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/registrants/status?occurrence_id=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"registrants",
										"status"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit",
											"description": "The meeting occurrence ID."
										}
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								},
								"description": "Update a meeting registrant's status by either approving, cancelling or denying a registrant from joining the meeting.<br><br>\n**Scopes:** `meeting:write:admin` `meeting:write`\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204`<br>\nRegistrant status updated.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "cancel",
													"description": "(Required) Registrant Status:<br>`approve` - Approve registrant.<br>`cancel` - Cancel previously approved registrant's registration.<br>`deny` - Deny registrant. (This can only be one of approve,cancel,deny)",
													"type": "text"
												},
												{
													"key": "registrants",
													"value": "[{\"id\":\"dolore et nostrud occaecat\",\"email\":\"fugiat culpa consectetur sunt\"},{\"id\":\"dolore adipisicing\",\"email\":\"dolore Duis nulla\"}]",
													"description": "List of registrants.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/registrants/status?occurrence_id=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"registrants",
												"status"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Error Code:** `300`<br>\nThis meeting has not set registration as required:{meetingId}.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "cancel",
													"description": "(Required) Registrant Status:<br>`approve` - Approve registrant.<br>`cancel` - Cancel previously approved registrant's registration.<br>`deny` - Deny registrant. (This can only be one of approve,cancel,deny)",
													"type": "text"
												},
												{
													"key": "registrants",
													"value": "[{\"id\":\"dolore et nostrud occaecat\",\"email\":\"fugiat culpa consectetur sunt\"},{\"id\":\"dolore adipisicing\",\"email\":\"dolore Duis nulla\"}]",
													"description": "List of registrants.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/registrants/status?occurrence_id=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"registrants",
												"status"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account: {accountId}.<br>\n**Error Code:** `3000`<br>\nCannot access meeting information.<br>\n**Error Code:** `3003`<br>\nYou're not the meeting host.\n\n",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "cancel",
													"description": "(Required) Registrant Status:<br>`approve` - Approve registrant.<br>`cancel` - Cancel previously approved registrant's registration.<br>`deny` - Deny registrant. (This can only be one of approve,cancel,deny)",
													"type": "text"
												},
												{
													"key": "registrants",
													"value": "[{\"id\":\"dolore et nostrud occaecat\",\"email\":\"fugiat culpa consectetur sunt\"},{\"id\":\"dolore adipisicing\",\"email\":\"dolore Duis nulla\"}]",
													"description": "List of registrants.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/registrants/status?occurrence_id=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"registrants",
												"status"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nMeeting or registrant not found.\n**Error Code:** `1001`<br>\nUser does not exist: {userId}.<br>\n",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "cancel",
													"description": "(Required) Registrant Status:<br>`approve` - Approve registrant.<br>`cancel` - Cancel previously approved registrant's registration.<br>`deny` - Deny registrant. (This can only be one of approve,cancel,deny)",
													"type": "text"
												},
												{
													"key": "registrants",
													"value": "[{\"id\":\"dolore et nostrud occaecat\",\"email\":\"fugiat culpa consectetur sunt\"},{\"id\":\"dolore adipisicing\",\"email\":\"dolore Duis nulla\"}]",
													"description": "List of registrants.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/registrants/status?occurrence_id=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"registrants",
												"status"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `429` <br> You have exceeded the daily rate limit of \"{0}\" for meeting **Update registrant's status** API requests for the registrant \"{1}\". You can resume these API requests at GMT 00:00:00.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "cancel",
													"description": "(Required) Registrant Status:<br>`approve` - Approve registrant.<br>`cancel` - Cancel previously approved registrant's registration.<br>`deny` - Deny registrant. (This can only be one of approve,cancel,deny)",
													"type": "text"
												},
												{
													"key": "registrants",
													"value": "[{\"id\":\"dolore et nostrud occaecat\",\"email\":\"fugiat culpa consectetur sunt\"},{\"id\":\"dolore adipisicing\",\"email\":\"dolore Duis nulla\"}]",
													"description": "List of registrants.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/registrants/status?occurrence_id=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"registrants",
												"status"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "polls",
					"item": [
						{
							"name": "{poll Id}",
							"item": [
								{
									"name": "Get a meeting poll",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/polls/:pollId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"polls",
												":pollId"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												},
												{
													"key": "pollId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The poll ID"
												}
											]
										},
										"description": "Polls allow the meeting host to survey attendees. Use this API to get information about a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).<br><br>\n**Scopes**: `meeting:read:admin` `meeting:read`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` <br>\nMeeting Poll object returned",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
														},
														{
															"key": "pollId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"abcdaaaeefffhhh\",\n \"status\": \"notstart\",\n \"title\": \"Meeting Usefulness\",\n \"anonymous\": false,\n \"poll_type\": 2,\n \"questions\": [\n  {\n   \"name\": \"How useful was this meeting?\",\n   \"type\": \"multiple\",\n   \"answer_required\": false,\n   \"answers\": [\n    \"Extremely useful\",\n    \"Somewhat useful\",\n    \"Not useful at all\"\n   ],\n   \"right_answers\": [\n    \"Not useful at all\"\n   ]\n  }\n ]\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n **Error Code:** `4400` <br> Meeting polls disabled. To enable this feature, enable the \"Meeting Polls/Quizzes\" setting in the Zoom web portal's \"Settings\" interface.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
														},
														{
															"key": "pollId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**Error Code:** `404` <br>\nMeeting Poll not found.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
														},
														{
															"key": "pollId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a meeting poll",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "p",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "poll_type",
													"value": "2",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "anonymous",
													"value": "false",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "questions",
													"value": "[{\"name\":\"enim pariatur\",\"type\":\"multiple\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"est pariatur enim mi\",\"ut do incididunt aliqua aute\"],\"right_answers\":[\"tempor d\"],\"prompts\":[{\"prompt_question\":\"off\",\"prompt_right_answers\":[\"cupidatat in in laborum\",\"nulla eu sint esse\"]},{\"prompt_question\":\"sit ullamco\",\"prompt_right_answers\":[\"minim amet officia Excepteur\",\"consectetur sunt\"]}],\"answer_min_character\":20042587,\"answer_max_character\":8083722,\"case_sensitive\":false,\"rating_min_value\":22665825,\"rating_max_value\":-72931511,\"rating_min_label\":\"incididunt proident et Lorem tempor\",\"rating_max_label\":\"ut dolore non culpa\"},{\"name\":\"nostrud esse\",\"type\":\"single\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"irure aliqua\",\"minim eu aliquip dolore mollit\"],\"right_answers\":[\"esse eiusmod\"],\"prompts\":[{\"prompt_question\":\"in\",\"prompt_right_answers\":[\"nostrud esse adipisicing ullamco\",\"Excepteur enim nulla cillum\"]},{\"prompt_question\":\"tempor\",\"prompt_right_answers\":[\"sit et\",\"in deserunt aute\"]}],\"answer_min_character\":33594336,\"answer_max_character\":-78155582,\"case_sensitive\":false,\"rating_min_value\":84162208,\"rating_max_value\":-72033554,\"rating_min_label\":\"culpa consectetur\",\"rating_max_label\":\"ea Ut\"}]",
													"description": "undefined",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/polls/:pollId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"polls",
												":pollId"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												},
												{
													"key": "pollId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The poll ID"
												}
											]
										},
										"description": "Polls allow the meeting host to survey attendees. Use this API to update information of a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings)<br><br>\n**Scopes**: `meeting:write:admin` `meeting:write`\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` <br>\nMeeting Poll Updated",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "title",
															"value": "incididunt",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "poll_type",
															"value": "2",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "anonymous",
															"value": "false",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "questions",
															"value": "[{\"name\":\"dolor in consequat\",\"type\":\"single\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"ut officia\",\"ex amet enim eu veniam\"],\"right_answers\":[\"eu ullamco\"],\"prompts\":[{\"prompt_question\":\"et anim\",\"prompt_right_answers\":[\"ipsum enim culpa\",\"qui\"]},{\"prompt_question\":\"id nostrud\",\"prompt_right_answers\":[\"proident tempor\",\"elit veniam eu tempor sit\"]}],\"answer_min_character\":8200392,\"answer_max_character\":8100659,\"case_sensitive\":false,\"rating_min_value\":19274228,\"rating_max_value\":-27935111,\"rating_min_label\":\"irure voluptate anim qui occaecat\",\"rating_max_label\":\"tempor minim sit\"},{\"name\":\"enim\",\"type\":\"short_answer\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"reprehenderit\",\"ipsum in\"],\"right_answers\":[\"commodo aliquip in do dolore\"],\"prompts\":[{\"prompt_question\":\"consectetur Duis mollit \",\"prompt_right_answers\":[\"dolore ut pariatur id\",\"labore voluptate in\"]},{\"prompt_question\":\"sed minim\",\"prompt_right_answers\":[\"anim commodo eiusmod sint\",\"veniam non irure\"]}],\"answer_min_character\":76380629,\"answer_max_character\":29642584,\"case_sensitive\":false,\"rating_min_value\":74560674,\"rating_max_value\":-60617322,\"rating_min_label\":\"incididunt minim ut dolor\",\"rating_max_label\":\"voluptate est\"}]",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
														},
														{
															"key": "pollId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n **Error Code:** `4400` <br>\n* Meeting polls disabled. To enable this feature, enable the \"Meeting Polls/Quizzes\" setting in the Zoom web portal's \"Settings\" interface. \n* Advanced meeting polls disabled. T",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "title",
															"value": "incididunt",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "poll_type",
															"value": "2",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "anonymous",
															"value": "false",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "questions",
															"value": "[{\"name\":\"dolor in consequat\",\"type\":\"single\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"ut officia\",\"ex amet enim eu veniam\"],\"right_answers\":[\"eu ullamco\"],\"prompts\":[{\"prompt_question\":\"et anim\",\"prompt_right_answers\":[\"ipsum enim culpa\",\"qui\"]},{\"prompt_question\":\"id nostrud\",\"prompt_right_answers\":[\"proident tempor\",\"elit veniam eu tempor sit\"]}],\"answer_min_character\":8200392,\"answer_max_character\":8100659,\"case_sensitive\":false,\"rating_min_value\":19274228,\"rating_max_value\":-27935111,\"rating_min_label\":\"irure voluptate anim qui occaecat\",\"rating_max_label\":\"tempor minim sit\"},{\"name\":\"enim\",\"type\":\"short_answer\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"reprehenderit\",\"ipsum in\"],\"right_answers\":[\"commodo aliquip in do dolore\"],\"prompts\":[{\"prompt_question\":\"consectetur Duis mollit \",\"prompt_right_answers\":[\"dolore ut pariatur id\",\"labore voluptate in\"]},{\"prompt_question\":\"sed minim\",\"prompt_right_answers\":[\"anim commodo eiusmod sint\",\"veniam non irure\"]}],\"answer_min_character\":76380629,\"answer_max_character\":29642584,\"case_sensitive\":false,\"rating_min_value\":74560674,\"rating_max_value\":-60617322,\"rating_min_label\":\"incididunt minim ut dolor\",\"rating_max_label\":\"voluptate est\"}]",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
														},
														{
															"key": "pollId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**Error Code:** `404` <br>\nMeeting Poll not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "title",
															"value": "incididunt",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "poll_type",
															"value": "2",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "anonymous",
															"value": "false",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "questions",
															"value": "[{\"name\":\"dolor in consequat\",\"type\":\"single\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"ut officia\",\"ex amet enim eu veniam\"],\"right_answers\":[\"eu ullamco\"],\"prompts\":[{\"prompt_question\":\"et anim\",\"prompt_right_answers\":[\"ipsum enim culpa\",\"qui\"]},{\"prompt_question\":\"id nostrud\",\"prompt_right_answers\":[\"proident tempor\",\"elit veniam eu tempor sit\"]}],\"answer_min_character\":8200392,\"answer_max_character\":8100659,\"case_sensitive\":false,\"rating_min_value\":19274228,\"rating_max_value\":-27935111,\"rating_min_label\":\"irure voluptate anim qui occaecat\",\"rating_max_label\":\"tempor minim sit\"},{\"name\":\"enim\",\"type\":\"short_answer\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"reprehenderit\",\"ipsum in\"],\"right_answers\":[\"commodo aliquip in do dolore\"],\"prompts\":[{\"prompt_question\":\"consectetur Duis mollit \",\"prompt_right_answers\":[\"dolore ut pariatur id\",\"labore voluptate in\"]},{\"prompt_question\":\"sed minim\",\"prompt_right_answers\":[\"anim commodo eiusmod sint\",\"veniam non irure\"]}],\"answer_min_character\":76380629,\"answer_max_character\":29642584,\"case_sensitive\":false,\"rating_min_value\":74560674,\"rating_max_value\":-60617322,\"rating_min_label\":\"incididunt minim ut dolor\",\"rating_max_label\":\"voluptate est\"}]",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
														},
														{
															"key": "pollId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a meeting poll",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/polls/:pollId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"polls",
												":pollId"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												},
												{
													"key": "pollId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The poll ID"
												}
											]
										},
										"description": "Polls allow the meeting host to survey attendees. Use this API to delete a meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).<br>\n**Scopes**: `meeting:write:admin` `meeting:write`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` <br>\n**Prerequisites**:<br>\n* Host user type must be **Pro**.\n* Polling feature should be enabled in the host's account.\n* Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` <br>\nMeeting Poll deleted",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
														},
														{
															"key": "pollId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n **Error Code:** `4400` <br> Meeting polls disabled. To enable this feature, enable the \"Meeting Polls/Quizzes\" setting in the Zoom web portal's \"Settings\" interface.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
														},
														{
															"key": "pollId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**Error Code:** `404`\nMeeting Poll not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
														},
														{
															"key": "pollId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "List meeting polls",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/polls?anonymous=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"polls"
									],
									"query": [
										{
											"key": "anonymous",
											"value": "true",
											"description": "Whether to query for polls with the **Anonymous** option enabled: \n* `true` — Query for polls with the **Anonymous** option enabled. \n* `false` — Do not query for polls with the **Anonymous** option enabled."
										}
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								},
								"description": "Polls allow the meeting host to survey attendees. Use this API to list [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) of a meeting.<br><br>\n\n**Scopes**: `meeting:read:admin` `meeting:read`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n**Prerequisites**:<br>\n* Host user type must be **Pro** or higher plan.\n* Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** <br>\nList polls of a Meeting  returned",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/polls?anonymous=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"polls"
											],
											"query": [
												{
													"key": "anonymous",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"total_records\": 1,\n \"polls\": [\n  {\n   \"id\": \"YB33NcABCdg_g1AAAxTQ\",\n   \"title\": \"Meeting Usefulness\",\n   \"anonymous\": false,\n   \"poll_type\": 2,\n   \"status\": \"notstart\",\n   \"questions\": [\n    {\n     \"name\": \"How useful was this meeting?\",\n     \"type\": \"multiple\",\n     \"answer_required\": false,\n     \"answers\": [\n      \"Extremely useful\",\n      \"Somewhat useful\",\n      \"Not useful at all\"\n     ],\n     \"right_answers\": [\n      \"Not useful at all\"\n     ]\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n **Error Code:** `4400` <br> Meeting polls disabled. To enable this feature, enable the \"Meeting Polls/Quizzes\" setting in the Zoom web portal's \"Settings\" interface.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/polls?anonymous=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"polls"
											],
											"query": [
												{
													"key": "anonymous",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Error Code:** `404`\nMeeting Poll not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/polls?anonymous=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"polls"
											],
											"query": [
												{
													"key": "anonymous",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create a meeting poll",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "p",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "poll_type",
											"value": "2",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "anonymous",
											"value": "false",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "questions",
											"value": "[{\"name\":\"enim pariatur\",\"type\":\"multiple\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"est pariatur enim mi\",\"ut do incididunt aliqua aute\"],\"right_answers\":[\"tempor d\"],\"prompts\":[{\"prompt_question\":\"off\",\"prompt_right_answers\":[\"cupidatat in in laborum\",\"nulla eu sint esse\"]},{\"prompt_question\":\"sit ullamco\",\"prompt_right_answers\":[\"minim amet officia Excepteur\",\"consectetur sunt\"]}],\"answer_min_character\":20042587,\"answer_max_character\":8083722,\"case_sensitive\":false,\"rating_min_value\":22665825,\"rating_max_value\":-72931511,\"rating_min_label\":\"incididunt proident et Lorem tempor\",\"rating_max_label\":\"ut dolore non culpa\"},{\"name\":\"nostrud esse\",\"type\":\"single\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"irure aliqua\",\"minim eu aliquip dolore mollit\"],\"right_answers\":[\"esse eiusmod\"],\"prompts\":[{\"prompt_question\":\"in\",\"prompt_right_answers\":[\"nostrud esse adipisicing ullamco\",\"Excepteur enim nulla cillum\"]},{\"prompt_question\":\"tempor\",\"prompt_right_answers\":[\"sit et\",\"in deserunt aute\"]}],\"answer_min_character\":33594336,\"answer_max_character\":-78155582,\"case_sensitive\":false,\"rating_min_value\":84162208,\"rating_max_value\":-72033554,\"rating_min_label\":\"culpa consectetur\",\"rating_max_label\":\"ea Ut\"}]",
											"description": "undefined",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/polls",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"polls"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								},
								"description": "Polls allow the meeting host to survey attendees. Use this API to create a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.<br><br>\n\n**Scopes**: `meeting:write:admin` `meeting:write`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n**Prerequisites**:<br>\n* Host user type must be **Pro** or higher plan.\n* Polling feature must be enabled in the host's account.\n* Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `201` <br>\nMeeting Poll Created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "incididunt",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "poll_type",
													"value": "2",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "anonymous",
													"value": "false",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "questions",
													"value": "[{\"name\":\"dolor in consequat\",\"type\":\"single\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"ut officia\",\"ex amet enim eu veniam\"],\"right_answers\":[\"eu ullamco\"],\"prompts\":[{\"prompt_question\":\"et anim\",\"prompt_right_answers\":[\"ipsum enim culpa\",\"qui\"]},{\"prompt_question\":\"id nostrud\",\"prompt_right_answers\":[\"proident tempor\",\"elit veniam eu tempor sit\"]}],\"answer_min_character\":8200392,\"answer_max_character\":8100659,\"case_sensitive\":false,\"rating_min_value\":19274228,\"rating_max_value\":-27935111,\"rating_min_label\":\"irure voluptate anim qui occaecat\",\"rating_max_label\":\"tempor minim sit\"},{\"name\":\"enim\",\"type\":\"short_answer\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"reprehenderit\",\"ipsum in\"],\"right_answers\":[\"commodo aliquip in do dolore\"],\"prompts\":[{\"prompt_question\":\"consectetur Duis mollit \",\"prompt_right_answers\":[\"dolore ut pariatur id\",\"labore voluptate in\"]},{\"prompt_question\":\"sed minim\",\"prompt_right_answers\":[\"anim commodo eiusmod sint\",\"veniam non irure\"]}],\"answer_min_character\":76380629,\"answer_max_character\":29642584,\"case_sensitive\":false,\"rating_min_value\":74560674,\"rating_max_value\":-60617322,\"rating_min_label\":\"incididunt minim ut dolor\",\"rating_max_label\":\"voluptate est\"}]",
													"description": "undefined",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"polls"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Location",
											"value": "culpa velit reprehenderit",
											"description": "Location of created Meeting Poll"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"abcdaaaeefffhhh\",\n \"status\": \"notstart\",\n \"title\": \"Meeting Usefulness\",\n \"anonymous\": false,\n \"poll_type\": 2,\n \"questions\": [\n  {\n   \"name\": \"How useful was this meeting?\",\n   \"type\": \"multiple\",\n   \"answer_required\": false,\n   \"answers\": [\n    \"Extremely useful\",\n    \"Somewhat useful\",\n    \"Not useful at all\"\n   ],\n   \"right_answers\": [\n    \"Not useful at all\"\n   ]\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n **Error Code:** `4400` <br>\n* Meeting polls disabled. To enable this feature, enable the \"Meeting Polls/Quizzes\" setting in the Zoom web portal's \"Settings\" interface. \n* Advanced meeting polls disabled. T",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "incididunt",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "poll_type",
													"value": "2",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "anonymous",
													"value": "false",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "questions",
													"value": "[{\"name\":\"dolor in consequat\",\"type\":\"single\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"ut officia\",\"ex amet enim eu veniam\"],\"right_answers\":[\"eu ullamco\"],\"prompts\":[{\"prompt_question\":\"et anim\",\"prompt_right_answers\":[\"ipsum enim culpa\",\"qui\"]},{\"prompt_question\":\"id nostrud\",\"prompt_right_answers\":[\"proident tempor\",\"elit veniam eu tempor sit\"]}],\"answer_min_character\":8200392,\"answer_max_character\":8100659,\"case_sensitive\":false,\"rating_min_value\":19274228,\"rating_max_value\":-27935111,\"rating_min_label\":\"irure voluptate anim qui occaecat\",\"rating_max_label\":\"tempor minim sit\"},{\"name\":\"enim\",\"type\":\"short_answer\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"reprehenderit\",\"ipsum in\"],\"right_answers\":[\"commodo aliquip in do dolore\"],\"prompts\":[{\"prompt_question\":\"consectetur Duis mollit \",\"prompt_right_answers\":[\"dolore ut pariatur id\",\"labore voluptate in\"]},{\"prompt_question\":\"sed minim\",\"prompt_right_answers\":[\"anim commodo eiusmod sint\",\"veniam non irure\"]}],\"answer_min_character\":76380629,\"answer_max_character\":29642584,\"case_sensitive\":false,\"rating_min_value\":74560674,\"rating_max_value\":-60617322,\"rating_min_label\":\"incididunt minim ut dolor\",\"rating_max_label\":\"voluptate est\"}]",
													"description": "undefined",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"polls"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Error Code:** `404` <br>\nMeeting not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "incididunt",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "poll_type",
													"value": "2",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "anonymous",
													"value": "false",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "questions",
													"value": "[{\"name\":\"dolor in consequat\",\"type\":\"single\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"ut officia\",\"ex amet enim eu veniam\"],\"right_answers\":[\"eu ullamco\"],\"prompts\":[{\"prompt_question\":\"et anim\",\"prompt_right_answers\":[\"ipsum enim culpa\",\"qui\"]},{\"prompt_question\":\"id nostrud\",\"prompt_right_answers\":[\"proident tempor\",\"elit veniam eu tempor sit\"]}],\"answer_min_character\":8200392,\"answer_max_character\":8100659,\"case_sensitive\":false,\"rating_min_value\":19274228,\"rating_max_value\":-27935111,\"rating_min_label\":\"irure voluptate anim qui occaecat\",\"rating_max_label\":\"tempor minim sit\"},{\"name\":\"enim\",\"type\":\"short_answer\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"reprehenderit\",\"ipsum in\"],\"right_answers\":[\"commodo aliquip in do dolore\"],\"prompts\":[{\"prompt_question\":\"consectetur Duis mollit \",\"prompt_right_answers\":[\"dolore ut pariatur id\",\"labore voluptate in\"]},{\"prompt_question\":\"sed minim\",\"prompt_right_answers\":[\"anim commodo eiusmod sint\",\"veniam non irure\"]}],\"answer_min_character\":76380629,\"answer_max_character\":29642584,\"case_sensitive\":false,\"rating_min_value\":74560674,\"rating_max_value\":-60617322,\"rating_min_label\":\"incididunt minim ut dolor\",\"rating_max_label\":\"voluptate est\"}]",
													"description": "undefined",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"polls"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "recordings",
					"item": [
						{
							"name": "{recording Id}",
							"item": [
								{
									"name": "Delete a meeting recording file",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/recordings/:recordingId?action=trash",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"recordings",
												":recordingId"
											],
											"query": [
												{
													"key": "action",
													"value": "trash",
													"description": "The recording delete actions:<br>`trash` - Move recording to trash.<br>`delete` - Delete recording permanently."
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
												},
												{
													"key": "recordingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The recording ID."
												}
											]
										},
										"description": "Delete a specific recording file from a meeting.<p style=\"background-color:#e1f5fe; color:#01579b; padding:8px\"> <b>Note:</b> To use this API, you must enable the <b>The host can delete cloud recordings</b> setting. You can find this setting in the <b>Recording</b> tab of the <b>Settings</b> interface in the [Zoom web portal](https://zoom.us/).</p>\n\n**Scopes**: `recording:write:admin`, `recording:write`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
									},
									"response": [
										{
											"name": "**Error Code:** `200`<br>\nYou do not have the right permissions.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/:recordingId?action=trash",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														":recordingId"
													],
													"query": [
														{
															"key": "action",
															"value": "trash"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
														},
														{
															"key": "recordingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The recording ID."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `204` <br>\nMeeting recording file deleted.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/:recordingId?action=trash",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														":recordingId"
													],
													"query": [
														{
															"key": "action",
															"value": "trash"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
														},
														{
															"key": "recordingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The recording ID."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` <br> **Error Code:** `1010` <br>\nUser does not belong to this account: {accountId}.<br> \n**Error Code:** `3303` <br>\nYou can not delete an uncompleted meeting.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/:recordingId?action=trash",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														":recordingId"
													],
													"query": [
														{
															"key": "action",
															"value": "trash"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
														},
														{
															"key": "recordingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The recording ID."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\nMeeting recording file not found<br>\n**Error Code:** `1001` <br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3301` <br> There is no recording for this meeting.\n",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/:recordingId?action=trash",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														":recordingId"
													],
													"query": [
														{
															"key": "action",
															"value": "trash"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
														},
														{
															"key": "recordingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The recording ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Recover a single recording",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "recover",
													"description": " (This can only be one of recover)",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/recordings/:recordingId/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"recordings",
												":recordingId",
												"status"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
												},
												{
													"key": "recordingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The recording ID."
												}
											]
										},
										"description": "Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover a single recording file from the meeting.<br>\n**Scopes:** `recording:write:admin` `recording:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` <br> Meeting recording recovered.\n\n",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/:recordingId/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														":recordingId",
														"status"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
														},
														{
															"key": "recordingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The recording ID."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` <br>\n**Error Code:** `1010` <br>\nUser does not belong to this account: {accountId}.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/:recordingId/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														":recordingId",
														"status"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
														},
														{
															"key": "recordingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The recording ID."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` <br>Meeting recording not found.<br>\n**Error Code:** `1001` <br> User {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3301`There is no recording for this meeting.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/:recordingId/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														":recordingId",
														"status"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
														},
														{
															"key": "recordingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The recording ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "settings",
							"item": [
								{
									"name": "Get meeting recording settings",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/recordings/settings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"recordings",
												"settings"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
												}
											]
										},
										"description": "Retrieve settings applied to a meeting's [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).<br><br>\n**Scopes**: `recording:read:admin` `recording:read`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` <br>"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` <br>\nMeeting recording settings returned",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														"settings"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"share_recording\": \"none\",\n \"recording_authentication\": true,\n \"authentication_option\": \"abc\",\n \"authentication_domains\": \"ccc.com\",\n \"viewer_download\": false,\n \"password\": \"dAbyzK1\",\n \"on_demand\": false,\n \"approval_type\": 1,\n \"send_email_to_host\": true,\n \"show_social_share_buttons\": true\n}"
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\nMeeting recording not found.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														"settings"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update meeting recording settings",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "share_recording",
													"value": "none",
													"description": "Determine how the meeting recording is shared. (This can only be one of publicly,internally,none)",
													"type": "text"
												},
												{
													"key": "recording_authentication",
													"value": "true",
													"description": "Only authenticated users can view.",
													"type": "text"
												},
												{
													"key": "authentication_option",
													"value": "occaecat nisi laborum dolore ipsum",
													"description": "Authentication Options.",
													"type": "text"
												},
												{
													"key": "authentication_domains",
													"value": "Lorem pariatur velit in ad",
													"description": "Authentication domains.",
													"type": "text"
												},
												{
													"key": "viewer_download",
													"value": "true",
													"description": "Determine whether a viewer can download the recording file or not.",
													"type": "text"
												},
												{
													"key": "password",
													"value": "sunt eam",
													"description": "Enable password protection for the recording by setting a password. The password must have a minimum of **eight** characters with a mix of numbers, letters and special characters.<br><br>\n**Note:** If the account owner or the admin has set minimum password strength requirements for recordings via Account Settings, the password value provided here must meet those requirements. <br><br>If the requirements are enabled, you can view those requirements by calling either the [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) or the [Get Account Settings](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API. ",
													"type": "text"
												},
												{
													"key": "on_demand",
													"value": "true",
													"description": "Determine whether registration  isrequired to view the recording.",
													"type": "text"
												},
												{
													"key": "approval_type",
													"value": "0",
													"description": "Approval type for the registration.<br>\n`0`- Automatically approve the registration when a user registers.<br>\n`1` - Manually approve or deny the registration of a user.<br>\n`2` - No registration required to view the recording. (This can only be one of 0,1,2)",
													"type": "text"
												},
												{
													"key": "send_email_to_host",
													"value": "false",
													"description": "Send an email to host when someone registers to view the recording. This applies for On-demand recordings only.",
													"type": "text"
												},
												{
													"key": "show_social_share_buttons",
													"value": "true",
													"description": "Show social share buttons on registration page. This applies for On-demand recordings only.",
													"type": "text"
												},
												{
													"key": "topic",
													"value": "sit fugiat esse n",
													"description": "Name of the recording.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/recordings/settings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"recordings",
												"settings"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
												}
											]
										},
										"description": "Update settings applied to a meeting's [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording)<br><br>\n**Scopes**: `recording:write:admin` `recording:write`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` <br>"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` <br>\nMeeting recording setting's updated",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "share_recording",
															"value": "none",
															"description": "Determine how the meeting recording is shared. (This can only be one of publicly,internally,none)",
															"type": "text"
														},
														{
															"key": "recording_authentication",
															"value": "true",
															"description": "Only authenticated users can view.",
															"type": "text"
														},
														{
															"key": "authentication_option",
															"value": "occaecat nisi laborum dolore ipsum",
															"description": "Authentication Options.",
															"type": "text"
														},
														{
															"key": "authentication_domains",
															"value": "Lorem pariatur velit in ad",
															"description": "Authentication domains.",
															"type": "text"
														},
														{
															"key": "viewer_download",
															"value": "true",
															"description": "Determine whether a viewer can download the recording file or not.",
															"type": "text"
														},
														{
															"key": "password",
															"value": "sunt eam",
															"description": "Enable password protection for the recording by setting a password. The password must have a minimum of **eight** characters with a mix of numbers, letters and special characters.<br><br>\n**Note:** If the account owner or the admin has set minimum password strength requirements for recordings via Account Settings, the password value provided here must meet those requirements. <br><br>If the requirements are enabled, you can view those requirements by calling either the [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) or the [Get Account Settings](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API. ",
															"type": "text"
														},
														{
															"key": "on_demand",
															"value": "true",
															"description": "Determine whether registration  isrequired to view the recording.",
															"type": "text"
														},
														{
															"key": "approval_type",
															"value": "0",
															"description": "Approval type for the registration.<br>\n`0`- Automatically approve the registration when a user registers.<br>\n`1` - Manually approve or deny the registration of a user.<br>\n`2` - No registration required to view the recording. (This can only be one of 0,1,2)",
															"type": "text"
														},
														{
															"key": "send_email_to_host",
															"value": "false",
															"description": "Send an email to host when someone registers to view the recording. This applies for On-demand recordings only.",
															"type": "text"
														},
														{
															"key": "show_social_share_buttons",
															"value": "true",
															"description": "Show social share buttons on registration page. This applies for On-demand recordings only.",
															"type": "text"
														},
														{
															"key": "topic",
															"value": "sit fugiat esse n",
															"description": "Name of the recording.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														"settings"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\nMeeting recording not found. ",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "share_recording",
															"value": "none",
															"description": "Determine how the meeting recording is shared. (This can only be one of publicly,internally,none)",
															"type": "text"
														},
														{
															"key": "recording_authentication",
															"value": "true",
															"description": "Only authenticated users can view.",
															"type": "text"
														},
														{
															"key": "authentication_option",
															"value": "occaecat nisi laborum dolore ipsum",
															"description": "Authentication Options.",
															"type": "text"
														},
														{
															"key": "authentication_domains",
															"value": "Lorem pariatur velit in ad",
															"description": "Authentication domains.",
															"type": "text"
														},
														{
															"key": "viewer_download",
															"value": "true",
															"description": "Determine whether a viewer can download the recording file or not.",
															"type": "text"
														},
														{
															"key": "password",
															"value": "sunt eam",
															"description": "Enable password protection for the recording by setting a password. The password must have a minimum of **eight** characters with a mix of numbers, letters and special characters.<br><br>\n**Note:** If the account owner or the admin has set minimum password strength requirements for recordings via Account Settings, the password value provided here must meet those requirements. <br><br>If the requirements are enabled, you can view those requirements by calling either the [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) or the [Get Account Settings](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API. ",
															"type": "text"
														},
														{
															"key": "on_demand",
															"value": "true",
															"description": "Determine whether registration  isrequired to view the recording.",
															"type": "text"
														},
														{
															"key": "approval_type",
															"value": "0",
															"description": "Approval type for the registration.<br>\n`0`- Automatically approve the registration when a user registers.<br>\n`1` - Manually approve or deny the registration of a user.<br>\n`2` - No registration required to view the recording. (This can only be one of 0,1,2)",
															"type": "text"
														},
														{
															"key": "send_email_to_host",
															"value": "false",
															"description": "Send an email to host when someone registers to view the recording. This applies for On-demand recordings only.",
															"type": "text"
														},
														{
															"key": "show_social_share_buttons",
															"value": "true",
															"description": "Show social share buttons on registration page. This applies for On-demand recordings only.",
															"type": "text"
														},
														{
															"key": "topic",
															"value": "sit fugiat esse n",
															"description": "Name of the recording.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														"settings"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "registrants",
							"item": [
								{
									"name": "questions",
									"item": [
										{
											"name": "Get registration questions",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants/questions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														"registrants",
														"questions"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
														}
													]
												},
												"description": "For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.\n\nUse this API to retrieve a list of questions that are displayed for users to complete when registering to view the recording of a specific meeting.<br>\n**Scopes:** `recording:read:admin`, `recording:read`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\nRecording Registrant Question object returned.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants/questions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"recordings",
																"registrants",
																"questions"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"questions\": [\n  {\n   \"field_name\": \"address\",\n   \"required\": false\n  }\n ],\n \"custom_questions\": [\n  {\n   \"title\": \"Would you like us to contact you for a survey?\",\n   \"type\": \"multiple\",\n   \"required\": false,\n   \"answers\": [\n    \"Yes\",\n    \"No\"\n   ]\n  }\n ]\n}"
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\nMeeting recording or registrant not found.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants/questions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"recordings",
																"registrants",
																"questions"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Update registration questions",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "questions",
															"value": "[{\"field_name\":\"industry\",\"required\":false},{\"field_name\":\"zip\",\"required\":false}]",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "custom_questions",
															"value": "[{\"title\":\"Ut officia occaeca\",\"type\":\"single\",\"required\":false,\"answers\":[\"minim anim\",\"tempor\"]},{\"title\":\"exercitation\",\"type\":\"short\",\"required\":true,\"answers\":[\"Ut\",\"\"]}]",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants/questions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														"registrants",
														"questions"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
														}
													]
												},
												"description": "For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.\n\nUse this API to update registration questions that are to be answered by users while registering to view a recording.<br>\n**Scopes:** `recording:write:admin`, `recording:write`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\nRecording Registrant Questions Updated",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "questions",
																	"value": "[{\"field_name\":\"no_of_employees\",\"required\":true},{\"field_name\":\"city\",\"required\":true}]",
																	"description": "undefined",
																	"type": "text"
																},
																{
																	"key": "custom_questions",
																	"value": "[{\"title\":\"dolor dolor do irure Lorem\",\"type\":\"multiple\",\"required\":false,\"answers\":[\"nulla elit consectetur\",\"nostrud enim ex sed\"]},{\"title\":\"ex anim cupidatat velit\",\"type\":\"multiple\",\"required\":false,\"answers\":[\"pariatur et\",\"ea\"]}]",
																	"description": "undefined",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants/questions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"recordings",
																"registrants",
																"questions"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\nMeeting recording or Registrant not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "questions",
																	"value": "[{\"field_name\":\"no_of_employees\",\"required\":true},{\"field_name\":\"city\",\"required\":true}]",
																	"description": "undefined",
																	"type": "text"
																},
																{
																	"key": "custom_questions",
																	"value": "[{\"title\":\"dolor dolor do irure Lorem\",\"type\":\"multiple\",\"required\":false,\"answers\":[\"nulla elit consectetur\",\"nostrud enim ex sed\"]},{\"title\":\"ex anim cupidatat velit\",\"type\":\"multiple\",\"required\":false,\"answers\":[\"pariatur et\",\"ea\"]}]",
																	"description": "undefined",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants/questions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"meetings",
																":meetingId",
																"recordings",
																"registrants",
																"questions"
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "List recording registrants",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants?status=approved&page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"recordings",
												"registrants"
											],
											"query": [
												{
													"key": "status",
													"value": "approved",
													"description": "The registrant status:<br>`pending` - Registrant's status is pending.<br>`approved` - Registrant's status is approved.<br>`denied` - Registrant's status is denied."
												},
												{
													"key": "page_size",
													"value": "30",
													"description": "The number of records returned within a single API call."
												},
												{
													"key": "page_number",
													"value": "1",
													"description": "\n**Deprecated** - This field has been deprecated and we will stop supporting it completely in a future release. Please use \"next_page_token\" for pagination instead of this field.\n\nThe page number of the current page in the returned records."
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit",
													"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										},
										"description": "Cloud Recordings of past Zoom Meetings can be made [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings). Users should be [registered](https://marketplace.zoom.us/docs/api-reference/zoom-api/cloud-recording/meetingrecordingregistrantcreate) to view these recordings.\n\nUse this API to list registrants of **On-demand Cloud Recordings** of a past meeting.<br>\n**Scopes:** `recording:read:admin`, `recording:read`.<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nRegistrants returned.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants?status=approved&page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														"registrants"
													],
													"query": [
														{
															"key": "status",
															"value": "approved"
														},
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "page_number",
															"value": "1"
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"page_count\": 0,\n \"page_number\": 1,\n \"page_size\": 30,\n \"total_records\": 1,\n \"registrants\": [\n  {\n   \"id\": \"sskldsbdABBBBBBBB\",\n   \"first_name\": \"Shri\",\n   \"last_name\": \"Shree\",\n   \"email\": \"example@example.com\",\n   \"address\": \"1800 Amphibious Blvd.\",\n   \"city\": \"Mountain View\",\n   \"country\": \"US\",\n   \"zip\": \"94045\",\n   \"state\": \"CA\",\n   \"phone\": \"5550100\",\n   \"industry\": \"sfsdf\",\n   \"org\": \"dsadsfsf\",\n   \"job_title\": \"sfsdfsdf\",\n   \"purchasing_time_frame\": \"Within a month\",\n   \"role_in_purchase_process\": \"Influencer\",\n   \"no_of_employees\": \"40\",\n   \"comments\": \"Amazing!\",\n   \"custom_questions\": [],\n   \"status\": \"approved\",\n   \"create_time\": \"2019-08-29T23:04:08Z\",\n   \"share_url\": \"https://zoom.us/recording/share/IlA1ABCDDJHKNDkkkkkkkTziMw\"\n  }\n ]\n}"
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nMeeting recording not found.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants?status=approved&page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														"registrants"
													],
													"query": [
														{
															"key": "status",
															"value": "approved"
														},
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "page_number",
															"value": "1"
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create a recording registrant",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "cupidatat do Duis Lorem dolore",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "deserunt commodo voluptate",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "enim sed",
													"type": "text"
												},
												{
													"key": "address",
													"value": "Ut in",
													"type": "text"
												},
												{
													"key": "city",
													"value": "exercitation non dolor",
													"type": "text"
												},
												{
													"key": "country",
													"value": "mollit ullamco labore",
													"type": "text"
												},
												{
													"key": "zip",
													"value": "esse nulla",
													"type": "text"
												},
												{
													"key": "state",
													"value": "labore consequat ame",
													"type": "text"
												},
												{
													"key": "phone",
													"value": "ut eu",
													"type": "text"
												},
												{
													"key": "industry",
													"value": "laboris enim ad",
													"type": "text"
												},
												{
													"key": "org",
													"value": "aliq",
													"type": "text"
												},
												{
													"key": "job_title",
													"value": "et laboris sunt",
													"type": "text"
												},
												{
													"key": "purchasing_time_frame",
													"value": "aute",
													"type": "text"
												},
												{
													"key": "role_in_purchase_process",
													"value": "culpa occaecat quis",
													"type": "text"
												},
												{
													"key": "no_of_employees",
													"value": "aliqua eiusmod reprehenderit",
													"type": "text"
												},
												{
													"key": "comments",
													"value": "laboris",
													"type": "text"
												},
												{
													"key": "custom_questions",
													"value": "[{\"title\":\"reprehenderit tempor anim officia\",\"value\":\"est ea non in\"},{\"title\":\"sit ut fugiat laboris\",\"value\":\"laboris consectetur enim\"}]",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"recordings",
												"registrants"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										},
										"description": "Cloud Recordings of past Zoom Meetings can be made [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings). Users should be [registered](https://marketplace.zoom.us/docs/api-reference/zoom-api/cloud-recording/meetingrecordingregistrantcreate) to view these recordings.\n\nUse this API to register a user to gain access to **On-demand Cloud Recordings** of a past meeting.<br>\n**Scopes:** `recording:write:admin`, `recording:write`.<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `201` <br>\nRegistration submitted.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "email",
															"value": "dolor ipsum aliquip",
															"type": "text"
														},
														{
															"key": "first_name",
															"value": "enim aliqua et dolor e",
															"type": "text"
														},
														{
															"key": "last_name",
															"value": "cupidatat id nisi Duis",
															"type": "text"
														},
														{
															"key": "address",
															"value": "laboris sit",
															"type": "text"
														},
														{
															"key": "city",
															"value": "sit veniam do",
															"type": "text"
														},
														{
															"key": "country",
															"value": "sed minim exercitation aliqui",
															"type": "text"
														},
														{
															"key": "zip",
															"value": "aliquip voluptate proident do",
															"type": "text"
														},
														{
															"key": "state",
															"value": "dolore ipsum ut eiusmod",
															"type": "text"
														},
														{
															"key": "phone",
															"value": "in",
															"type": "text"
														},
														{
															"key": "industry",
															"value": "non aute ullamco",
															"type": "text"
														},
														{
															"key": "org",
															"value": "voluptate nisi aliqua amet laborum",
															"type": "text"
														},
														{
															"key": "job_title",
															"value": "consequat aliqua in",
															"type": "text"
														},
														{
															"key": "purchasing_time_frame",
															"value": "quis fugiat",
															"type": "text"
														},
														{
															"key": "role_in_purchase_process",
															"value": "minim ",
															"type": "text"
														},
														{
															"key": "no_of_employees",
															"value": "adipisicing velit sed",
															"type": "text"
														},
														{
															"key": "comments",
															"value": "anim ullamco ipsum",
															"type": "text"
														},
														{
															"key": "custom_questions",
															"value": "[{\"title\":\"labore aute\",\"value\":\"magna qui enim\"},{\"title\":\"consequat quis\",\"value\":\"dolore ut adipisicing proident\"}]",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														"registrants"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"registrant_id\": \"veniamKIW1Sonseq\",\n \"id\": 12345666,\n \"topic\": \"cupidatat dolore quis minim aliquip\",\n \"share_url\": \"https://zoom.us/recording/share/IpAAABBBBBBA1aqqkzFFgiJ2jpR\"\n}"
										},
										{
											"name": "**HTTP Status Code:** `404` <br>\nMeeting recording not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "email",
															"value": "dolor ipsum aliquip",
															"type": "text"
														},
														{
															"key": "first_name",
															"value": "enim aliqua et dolor e",
															"type": "text"
														},
														{
															"key": "last_name",
															"value": "cupidatat id nisi Duis",
															"type": "text"
														},
														{
															"key": "address",
															"value": "laboris sit",
															"type": "text"
														},
														{
															"key": "city",
															"value": "sit veniam do",
															"type": "text"
														},
														{
															"key": "country",
															"value": "sed minim exercitation aliqui",
															"type": "text"
														},
														{
															"key": "zip",
															"value": "aliquip voluptate proident do",
															"type": "text"
														},
														{
															"key": "state",
															"value": "dolore ipsum ut eiusmod",
															"type": "text"
														},
														{
															"key": "phone",
															"value": "in",
															"type": "text"
														},
														{
															"key": "industry",
															"value": "non aute ullamco",
															"type": "text"
														},
														{
															"key": "org",
															"value": "voluptate nisi aliqua amet laborum",
															"type": "text"
														},
														{
															"key": "job_title",
															"value": "consequat aliqua in",
															"type": "text"
														},
														{
															"key": "purchasing_time_frame",
															"value": "quis fugiat",
															"type": "text"
														},
														{
															"key": "role_in_purchase_process",
															"value": "minim ",
															"type": "text"
														},
														{
															"key": "no_of_employees",
															"value": "adipisicing velit sed",
															"type": "text"
														},
														{
															"key": "comments",
															"value": "anim ullamco ipsum",
															"type": "text"
														},
														{
															"key": "custom_questions",
															"value": "[{\"title\":\"labore aute\",\"value\":\"magna qui enim\"},{\"title\":\"consequat quis\",\"value\":\"dolore ut adipisicing proident\"}]",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														"registrants"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update registrant's status",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "approve",
													"description": "(Required)  (This can only be one of approve,deny)",
													"type": "text"
												},
												{
													"key": "registrants",
													"value": "[{\"id\":\"sed cillum\"},{\"id\":\"laboris aliqua reprehenderit ut\"}]",
													"description": "List of registrants",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"recordings",
												"registrants",
												"status"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										},
										"description": "A registrant can either be approved or denied from viewing the [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) recording. \nUse this API to update a registrant's status.\n\n**Scopes:** `recording:write:admin`, `recording:write`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204`<br>\nRegistrant status updated.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "action",
															"value": "approve",
															"description": "(Required)  (This can only be one of approve,deny)",
															"type": "text"
														},
														{
															"key": "registrants",
															"value": "[{\"id\":\"eu exercitation quis commodo\"},{\"id\":\"ut qui exe\"}]",
															"description": "List of registrants",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														"registrants",
														"status"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nMeeting recording or Registrant not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "action",
															"value": "approve",
															"description": "(Required)  (This can only be one of approve,deny)",
															"type": "text"
														},
														{
															"key": "registrants",
															"value": "[{\"id\":\"eu exercitation quis commodo\"},{\"id\":\"ut qui exe\"}]",
															"description": "List of registrants",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														"registrants",
														"status"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `429` <br> You have exceeded the daily rate limit of \"{0}\" for cloud recording **Update registrant's status** API requests for the registrant \"{1}\". You can resume these API requests at GMT 00:00:00.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "action",
															"value": "approve",
															"description": "(Required)  (This can only be one of approve,deny)",
															"type": "text"
														},
														{
															"key": "registrants",
															"value": "[{\"id\":\"eu exercitation quis commodo\"},{\"id\":\"ut qui exe\"}]",
															"description": "List of registrants",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/meetings/:meetingId/recordings/registrants/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"meetings",
														":meetingId",
														"recordings",
														"registrants",
														"status"
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "-14804147",
															"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
														}
													]
												}
											},
											"status": "Too Many Requests",
											"code": 429,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get meeting recordings",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/recordings?include_fields=culpa velit reprehenderit&ttl=310895",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"recordings"
									],
									"query": [
										{
											"key": "include_fields",
											"value": "culpa velit reprehenderit",
											"description": "Get the `download_access_token` field for downloading meeting recordings."
										},
										{
											"key": "ttl",
											"value": "310895",
											"description": "Time to live (TTL) of the `download_access_token`. This is only valid if the `include_fields` query parameter contains `download_access_token`. The range is between 0-604800."
										}
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
										}
									]
								},
								"description": "Get all the [recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording#h_7420acb5-1897-4061-87b4-5b76e99c03b4) from a meeting or Webinar instance. The recording files can be downloaded via the `download_url` property listed in the response.\n\n> To access a password-protected cloud recording, add an `access_token` parameter to the download URL and provide OAuth access token or [JWT](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-jwt-app) as the `access_token` value.\n\n**Scopes:** `recording:read:admin`, `recording:read`</br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**Error Code:** `200` <br>\nYou do not have the right permissions.\n**HTTP Status Code:** `200`<br>\nRecording object returned.<br>\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/recordings?include_fields=culpa velit reprehenderit&ttl=310895",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"recordings"
											],
											"query": [
												{
													"key": "include_fields",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "ttl",
													"value": "310895"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"uuid\": \"gkABCDEbbbbbbbkPuA==\",\n \"id\": 68000000031879,\n \"account_id\": \"EABkdslfBBBdk\",\n \"host_id\": \"z8yBXksaAAjdhfsfdfkjgg\",\n \"topic\": \"MyTestPollMeeting\",\n \"type\": 2,\n \"start_time\": \"2019-08-29T21:54:49Z\",\n \"timezone\": \"America/Los_Angeles\",\n \"duration\": 1,\n \"total_size\": 74596,\n \"recording_count\": 4,\n \"share_url\": \"https://api.zoom.us/recording/share/abcdkhfdbbfdjbg\",\n \"recording_files\": [\n  {\n   \"id\": \"96119skjlfhdshkjf-djkfndjf0-f791\",\n   \"meeting_id\": \"gkABCDEbbbbbbbkPuA==\",\n   \"recording_start\": \"2019-08-29T21:54:55Z\",\n   \"recording_end\": \"2019-08-29T21:55:24Z\",\n   \"file_type\": \"MP4\",\n   \"file_size\": 37285,\n   \"play_url\": \"https://api.zoom.us/recording/play/Qg75t7xZBtEbAkjdlgbfdngBBBB\",\n   \"download_url\": \"https://api.zoom.us/recording/download/Qg75t7xZBtEbAkjdlgbfdngBBBB\",\n   \"status\": \"completed\",\n   \"recording_type\": \"shared_screen_with_speaker_view\"\n  },\n  {\n   \"id\": \"5890sfjkdsf-aaaakdf-fbbb618718e\",\n   \"meeting_id\": \"gkABCDEbbbbbbbkPuA==\",\n   \"recording_start\": \"2019-08-29T21:54:55Z\",\n   \"recording_end\": \"2019-08-29T21:55:24Z\",\n   \"file_type\": \"M4A\",\n   \"file_size\": 10098,\n   \"play_url\": \"https://api.zoom.us/recording/play/ABdkEEEfhlgldfjkglfghlkfdklhsg\",\n   \"download_url\": \"https://api.zoom.us/recording/download/ABdkEEEfhlgldfjkglfghlkfdklhsg\",\n   \"status\": \"completed\",\n   \"recording_type\": \"audio_only\"\n  },\n  {\n   \"meeting_id\": \"gkABCDEbbbbbbbkPuA==\",\n   \"recording_start\": \"2019-08-29T21:54:55Z\",\n   \"recording_end\": \"2019-08-29T21:55:24Z\",\n   \"file_type\": \"TIMELINE\",\n   \"download_url\": \"https://api.zoom.us/recording/download/e2ed-dlkjgdfkgh-kslsdbsjf1a\"\n  }\n ],\n \"download_access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJtaWQiOiJvNEU2WnVydFJQdWpxQVZQNmxoTVpnPT0iLCJleHAiOjE2MjEzMDY3MTR9.AiTsTgso8-g487NROU7oGXsn04W68HdZXrjqR3W-X_s\",\n \"password\": \"123456789\",\n \"participant_audio_files\": [\n  {\n   \"id\": \"6ebb42fb-fce2-4c6d-932d-27229f07e933\",\n   \"recording_start\": \"2021-06-22T05:23:41Z\",\n   \"recording_end\": \"2021-06-22T05:23:58Z\",\n   \"file_name\": \"Audio only - API1 TA2\",\n   \"file_type\": \"M4A\",\n   \"file_extension\": \"M4A\",\n   \"file_size\": 272173,\n   \"play_url\": \"https://example.zoomdev.us/rec/play/S9sHV863qengfT4zNYGSE2gUpltTVQOL2cwOjFkyGfVZhOpnONozI_9RVJsfcc-y3iT0ayG7CKrXnGw.yqI3hidFZBHn3LXt\",\n   \"download_url\": \"https://example.zoomdev.us/rec/download/S9sHV863qengfT4zNYGSE2gUpltTVQOL2cwOjFkyGfVZhOpnONozI_9RVJsfcc-y3iT0ayG7CKrXnGw.yqI3hidFZBHn3LXt\",\n   \"status\": \"completed\"\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` <br>\n**Error Code:** `1010`<br>\nUser not found on this account: {accountId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/recordings?include_fields=culpa velit reprehenderit&ttl=310895",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"recordings"
											],
											"query": [
												{
													"key": "include_fields",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "ttl",
													"value": "310895"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nMeeting recording not found.<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3301`<br>\nThere is no recording for this meeting.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/recordings?include_fields=culpa velit reprehenderit&ttl=310895",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"recordings"
											],
											"query": [
												{
													"key": "include_fields",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "ttl",
													"value": "310895"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete meeting recordings",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/recordings?action=trash",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"recordings"
									],
									"query": [
										{
											"key": "action",
											"value": "trash",
											"description": "The recording delete actions:<br>`trash` - Move recording to trash.<br>`delete` - Delete recording permanently."
										}
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
										}
									]
								},
								"description": "Delete all recording files of a meeting.<br><br>\n\n**Scopes:** `recording:write:admin` `recording:write`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n**Prerequisites**:\n* Cloud Recording should be enabled on the user's account.<br>\n"
							},
							"response": [
								{
									"name": "**Error Code:** `200` <br>\nYou do not have the right permission.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/recordings?action=trash",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"recordings"
											],
											"query": [
												{
													"key": "action",
													"value": "trash"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `204` <br>\nMeeting recording deleted.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/recordings?action=trash",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"recordings"
											],
											"query": [
												{
													"key": "action",
													"value": "trash"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account: {accountId}.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/recordings?action=trash",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"recordings"
											],
											"query": [
												{
													"key": "action",
													"value": "trash"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` <br>\nMeeting recording not found\n**Error Code:** `1001` <br> User {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3301`<br>There is no recording for this meeting.\n",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/recordings?action=trash",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"recordings"
											],
											"query": [
												{
													"key": "action",
													"value": "trash"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Recover meeting recordings",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "recover",
											"description": " (This can only be one of recover)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/recordings/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"recordings",
										"status"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
										}
									]
								},
								"description": "Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover all deleted [Cloud Recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) of a specific meeting.<br><br>\n**Scopes**: `recording:write:admin` `recording:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n**Prerequisites**:<br>\n* A Pro user with Cloud Recording enabled."
							},
							"response": [
								{
									"name": "**Error Code:** `200`<br>\nYou do not have the right permissions.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/recordings/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"recordings",
												"status"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `204` <br>\nDeleted recordings of the meeting recovered.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/recordings/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"recordings",
												"status"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` <br>\n**Error Code:** `1010`<br>\nUser does not belong to this account: {accountId}.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/recordings/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"recordings",
												"status"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` <br>\nMeeting recording not found.<br> **Error Code:** `1001`<br>  User does not exist: {userId}.<br>\n**Error Code:** `3301`<br>There is no recording for this meeting.\n\n\n\n",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/recordings/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"recordings",
												"status"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance. \n\nTo get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. \n\nIf a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request. "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "livestream",
					"item": [
						{
							"name": "Update a live stream",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "stream_url",
											"value": "aliquip quis",
											"description": "(Required) Streaming URL.",
											"type": "text"
										},
										{
											"key": "stream_key",
											"value": "Lorem laborum aliquip in",
											"description": "(Required) Stream name and key.",
											"type": "text"
										},
										{
											"key": "page_url",
											"value": "http://skOovAWbFYAgCYKqEmxP.pqUVHIs0HJBbjhDljWqbm",
											"description": "(Required) The livestream page URL.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/livestream",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"livestream"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								},
								"description": "Use this API to update a meeting's live stream information. Zoom allows users to [live stream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform.\n\n**Scopes:** `meeting:write:admin`, `meeting:write`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* Meeting host must have a Pro license."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204`<br>\nMeeting live stream updated.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "stream_url",
													"value": "aliquip quis",
													"description": "(Required) Streaming URL.",
													"type": "text"
												},
												{
													"key": "stream_key",
													"value": "Lorem laborum aliquip in",
													"description": "(Required) Stream name and key.",
													"type": "text"
												},
												{
													"key": "page_url",
													"value": "http://skOovAWbFYAgCYKqEmxP.pqUVHIs0HJBbjhDljWqbm",
													"description": "(Required) The livestream page URL.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/livestream",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"livestream"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Error Code:** `300` <br>Missing meetingId <br> Invalid meetingId.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "stream_url",
													"value": "aliquip quis",
													"description": "(Required) Streaming URL.",
													"type": "text"
												},
												{
													"key": "stream_key",
													"value": "Lorem laborum aliquip in",
													"description": "(Required) Stream name and key.",
													"type": "text"
												},
												{
													"key": "page_url",
													"value": "http://skOovAWbFYAgCYKqEmxP.pqUVHIs0HJBbjhDljWqbm",
													"description": "(Required) The livestream page URL.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/livestream",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"livestream"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>**Error Code:** `1010` <br>\n User does not belong to this account: {accountId}.<br>\n **Error Code:** `3000` Cannot access webinar info.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "stream_url",
													"value": "aliquip quis",
													"description": "(Required) Streaming URL.",
													"type": "text"
												},
												{
													"key": "stream_key",
													"value": "Lorem laborum aliquip in",
													"description": "(Required) Stream name and key.",
													"type": "text"
												},
												{
													"key": "page_url",
													"value": "http://skOovAWbFYAgCYKqEmxP.pqUVHIs0HJBbjhDljWqbm",
													"description": "(Required) The livestream page URL.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/livestream",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"livestream"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>**Error Code:** `1001` <br>User {userId} does not exist.\n",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "stream_url",
													"value": "aliquip quis",
													"description": "(Required) Streaming URL.",
													"type": "text"
												},
												{
													"key": "stream_key",
													"value": "Lorem laborum aliquip in",
													"description": "(Required) Stream name and key.",
													"type": "text"
												},
												{
													"key": "page_url",
													"value": "http://skOovAWbFYAgCYKqEmxP.pqUVHIs0HJBbjhDljWqbm",
													"description": "(Required) The livestream page URL.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/livestream",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"livestream"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get live stream details",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/livestream",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"livestream"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Unique identifier of the meeting."
										}
									]
								},
								"description": "Zoom allows users to [live stream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Use this API to get a meeting's live stream configuration details such as Stream URL, Stream Key and Page URL.<br><br>\n**Prerequisites:**<br>\n* Meeting host must be a licensed user with a Pro or higher plan.<br>\n* Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the meeting.<br><br>\n**Scopes:** `meeting:read:admin` `meeting:read`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nLive Stream details returned.\n\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/livestream",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"livestream"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique identifier of the meeting."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"stream_url\": \"https://somecompany.com/livestream\",\n \"stream_key\": \"Contact It@somecompany.com\",\n \"page_url\": \"https://somecompany.com/livestream/123\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `300`<br>\nMissing meetingId<br>\nInvalid meetingId<br><br>\n**Error Code:** `1010`<br>\nUser does not belong to this account: {accountId}\n\n\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/livestream",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"livestream"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique identifier of the meeting."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist.\n\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/livestream",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"livestream"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Unique identifier of the meeting."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update Live Stream Status",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "start",
											"description": "Update the status of a livestream.\n\nThe value can be one of the following:<br>\n`start`: Start a live stream. <br>\n`stop`: Stop an ongoing live stream. (This can only be one of start,stop)",
											"type": "text"
										},
										{
											"key": "settings",
											"value": "{\"active_speaker_name\":false,\"display_name\":\"consectetur reprehenderit\"}",
											"description": "Update the settings of a live streaming session. The settings can only be updated for a live stream that has been stopped. You can not update the settings of an ongoing live stream.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/livestream/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"livestream",
										"status"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								},
								"description": "Zoom allows users to [live stream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Use this API to update the status of a meeting's live stream.<br><br>\n**Prerequisites:**<br>\n* Meeting host must have a Pro license.<br>\n**Scopes:** `meeting:write:admin` `meeting:write`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204` <br>\nMeeting live stream updated.\n\n",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "start",
													"description": "Update the status of a livestream.\n\nThe value can be one of the following:<br>\n`start`: Start a live stream. <br>\n`stop`: Stop an ongoing live stream. (This can only be one of start,stop)",
													"type": "text"
												},
												{
													"key": "settings",
													"value": "{\"active_speaker_name\":false,\"display_name\":\"consectetur reprehenderit\"}",
													"description": "Update the settings of a live streaming session. The settings can only be updated for a live stream that has been stopped. You can not update the settings of an ongoing live stream.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/livestream/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"livestream",
												"status"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Error Code:** `300` <br>\nMissing meetingId.<br>\nInvalid meetingId",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "start",
													"description": "Update the status of a livestream.\n\nThe value can be one of the following:<br>\n`start`: Start a live stream. <br>\n`stop`: Stop an ongoing live stream. (This can only be one of start,stop)",
													"type": "text"
												},
												{
													"key": "settings",
													"value": "{\"active_speaker_name\":false,\"display_name\":\"consectetur reprehenderit\"}",
													"description": "Update the settings of a live streaming session. The settings can only be updated for a live stream that has been stopped. You can not update the settings of an ongoing live stream.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/livestream/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"livestream",
												"status"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` <br>\n**Error Code:**`3000`<br>\nCannot access webinar info.<br>\n**Error Code:**`1010`<br>User does not belong to this account: {accountId}.\n",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "start",
													"description": "Update the status of a livestream.\n\nThe value can be one of the following:<br>\n`start`: Start a live stream. <br>\n`stop`: Stop an ongoing live stream. (This can only be one of start,stop)",
													"type": "text"
												},
												{
													"key": "settings",
													"value": "{\"active_speaker_name\":false,\"display_name\":\"consectetur reprehenderit\"}",
													"description": "Update the settings of a live streaming session. The settings can only be updated for a live stream that has been stopped. You can not update the settings of an ongoing live stream.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/livestream/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"livestream",
												"status"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` <br>\n**Error Code:**`1001`<br>\nUser {userId} does not exist.<br>\n",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "start",
													"description": "Update the status of a livestream.\n\nThe value can be one of the following:<br>\n`start`: Start a live stream. <br>\n`stop`: Stop an ongoing live stream. (This can only be one of start,stop)",
													"type": "text"
												},
												{
													"key": "settings",
													"value": "{\"active_speaker_name\":false,\"display_name\":\"consectetur reprehenderit\"}",
													"description": "Update the settings of a live streaming session. The settings can only be updated for a live stream that has been stopped. You can not update the settings of an ongoing live stream.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/livestream/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"livestream",
												"status"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `429`<br>Too many requests submitted to start the live stream of this meeting: {meetingId}. If the live stream has not already started, retry making a new request after 30 seconds.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "start",
													"description": "Update the status of a livestream.\n\nThe value can be one of the following:<br>\n`start`: Start a live stream. <br>\n`stop`: Stop an ongoing live stream. (This can only be one of start,stop)",
													"type": "text"
												},
												{
													"key": "settings",
													"value": "{\"active_speaker_name\":false,\"display_name\":\"consectetur reprehenderit\"}",
													"description": "Update the settings of a live streaming session. The settings can only be updated for a live stream that has been stopped. You can not update the settings of an ongoing live stream.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/meetings/:meetingId/livestream/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"meetings",
												":meetingId",
												"livestream",
												"status"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Get a meeting",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=culpa velit reprehenderit&show_previous_occurrences=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"meetings",
								":meetingId"
							],
							"query": [
								{
									"key": "occurrence_id",
									"value": "culpa velit reprehenderit",
									"description": "Meeting Occurrence ID. Provide this field to view meeting details of a particular occurrence of the [recurring meeting](https://support.zoom.us/hc/en-us/articles/214973206-Scheduling-Recurring-Meetings)."
								},
								{
									"key": "show_previous_occurrences",
									"value": "true",
									"description": "Set the value of this field to `true` if you would like to view meeting details of all previous occurrences of a [recurring meeting](https://support.zoom.us/hc/en-us/articles/214973206-Scheduling-Recurring-Meetings). "
								}
							],
							"variable": [
								{
									"key": "meetingId",
									"value": "-14804147",
									"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
								}
							]
						},
						"description": "Retrieve the details of a meeting.<br><br>\n**Scopes:** `meeting:read:admin` `meeting:read`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nMeeting object returned.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=culpa velit reprehenderit&show_previous_occurrences=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "show_previous_occurrences",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"agenda\": \"API overview\",\n \"created_at\": \"2019-09-09T15:54:24Z\",\n \"duration\": 60,\n \"host_id\": \"ABcdofjdogh11111\",\n \"id\": 1234555466,\n \"join_url\": \"https://zoom.us/j/1234555466\",\n \"settings\": {\n  \"alternative_hosts\": \"example@example.com\",\n  \"approval_type\": 2,\n  \"audio\": \"both\",\n  \"auto_recording\": \"local\",\n  \"close_registration\": false,\n  \"cn_meeting\": false,\n  \"enforce_login\": false,\n  \"enforce_login_domains\": \"example.com\",\n  \"global_dial_in_countries\": [\n   \"US\"\n  ],\n  \"global_dial_in_numbers\": [\n   {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"country_name\": \"US\",\n    \"number\": \"+1 000011100\",\n    \"type\": \"toll\"\n   },\n   {\n    \"city\": \"San Jose\",\n    \"country\": \"US\",\n    \"country_name\": \"US\",\n    \"number\": \"+1 6699006833\",\n    \"type\": \"toll\"\n   },\n   {\n    \"city\": \"San Jose\",\n    \"country\": \"US\",\n    \"country_name\": \"US\",\n    \"number\": \"+1 221122112211\",\n    \"type\": \"toll\"\n   }\n  ],\n  \"host_video\": false,\n  \"in_meeting\": false,\n  \"join_before_host\": true,\n  \"mute_upon_entry\": false,\n  \"participant_video\": false,\n  \"registrants_confirmation_email\": true,\n  \"use_pmi\": false,\n  \"waiting_room\": false,\n  \"watermark\": false,\n  \"registrants_email_notification\": true\n },\n \"start_time\": \"2019-08-30T22:00:00Z\",\n \"start_url\": \"https://zoom.us/1234555466/cdknfdffgggdfg4MDUxNjY0LCJpYXQiOjE1NjgwNDQ0NjQsImFpZCI6IjRBOWR2QkRqVHphd2J0amxoejNQZ1EiLCJjaWQiOiIifQ.Pz_msGuQwtylTtYQ\",\n \"status\": \"waiting\",\n \"timezone\": \"America/New_York\",\n \"topic\": \"My API Test\",\n \"type\": 2,\n \"uuid\": \"iAABBBcccdddd7A==\"\n}"
						},
						{
							"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `1010`<br>\nUser not found on this account: {accountId}.<br>**Error Code:** `3000`<br>\nCannot access webinar info.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=culpa velit reprehenderit&show_previous_occurrences=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "show_previous_occurrences",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404`<br>\nMeeting not found.<br>\n**Error Code:** `1001`<br>\nUser not exist: {userId}.<br>**Error Code:** `3001`<br>\nMeeting {meetingId} is not found or has expired.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=culpa velit reprehenderit&show_previous_occurrences=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "show_previous_occurrences",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Update a meeting",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "schedule_for",
									"value": "aliqua voluptate ut laboris",
									"description": "undefined",
									"type": "text"
								},
								{
									"key": "topic",
									"value": "nostrud dolore",
									"description": "undefined",
									"type": "text"
								},
								{
									"key": "type",
									"value": "2",
									"description": "undefined",
									"type": "text"
								},
								{
									"key": "pre_schedule",
									"value": "false",
									"description": "undefined",
									"type": "text"
								},
								{
									"key": "start_time",
									"value": "1976-01-06T02:15:11.306Z",
									"description": "undefined",
									"type": "text"
								},
								{
									"key": "duration",
									"value": "98487885",
									"description": "undefined",
									"type": "text"
								},
								{
									"key": "timezone",
									"value": "anim labore aliquip dolor",
									"description": "undefined",
									"type": "text"
								},
								{
									"key": "password",
									"value": "ipsum c",
									"description": "undefined",
									"type": "text"
								},
								{
									"key": "agenda",
									"value": "cillum",
									"description": "undefined",
									"type": "text"
								},
								{
									"key": "template_id",
									"value": "Duis ex",
									"description": "undefined",
									"type": "text"
								},
								{
									"key": "tracking_fields",
									"value": "[{\"field\":\"non sed consequat officia\",\"value\":\"non dolore ipsum ut\"},{\"field\":\"dolore ut\",\"value\":\"officia tempor aliquip\"}]",
									"description": "undefined",
									"type": "text"
								},
								{
									"key": "recurrence",
									"value": "{\"type\":3,\"repeat_interval\":-12011573,\"weekly_days\":\"1\",\"monthly_day\":1,\"monthly_week\":4,\"monthly_week_day\":2,\"end_times\":1,\"end_date_time\":\"1961-10-22T21:49:13.359Z\"}",
									"description": "undefined",
									"type": "text"
								},
								{
									"key": "settings",
									"value": "{\"host_video\":true,\"participant_video\":true,\"cn_meeting\":false,\"in_meeting\":false,\"join_before_host\":false,\"jbh_time\":5,\"mute_upon_entry\":false,\"watermark\":false,\"use_pmi\":false,\"approval_type\":2,\"registration_type\":1,\"audio\":\"both\",\"auto_recording\":\"none\",\"enforce_login\":true,\"enforce_login_domains\":\"deserunt eiusmod dolore eu occaecat\",\"alternative_hosts\":\"qui irure Excepteur\",\"close_registration\":false,\"waiting_room\":false,\"global_dial_in_countries\":[\"ex minim velit sit\",\"Excepteur\"],\"global_dial_in_numbers\":[{\"country\":\"minim ut consectetur eiusmod in\",\"country_name\":\"Ut culpa Excepteur velit\",\"city\":\"nostrud est\",\"number\":\"laboris magna ut s\",\"type\":\"toll\"},{\"country\":\"aliquip\",\"country_name\":\"nostrud mollit exercitation qui\",\"city\":\"minim ut cillum Excepteur\",\"number\":\"esse dolore aliquip\",\"type\":\"toll\"}],\"contact_name\":\"exercitation Duis est officia\",\"contact_email\":\"ex sed\",\"registrants_email_notification\":true,\"registrants_confirmation_email\":false,\"meeting_authentication\":true,\"authentication_option\":\"amet irure\",\"authentication_domains\":\"Excepteur\",\"authentication_name\":\"aliqua\",\"show_share_button\":false,\"allow_multiple_devices\":true,\"encryption_type\":\"enhanced_encryption\",\"approved_or_denied_countries_or_regions\":{\"enable\":false,\"method\":\"deny\",\"approved_list\":[\"veniam non Lorem irure\",\"id nisi\"],\"denied_list\":[\"sunt elit pariatur laborum\",\"nostrud amet Lorem incididunt\"]},\"authentication_exception\":[{\"name\":\"ex aute\",\"email\":\"JegX8IoPLa6gYI@nTKcMBeUWmUqF.sv\"},{\"name\":\"ad eiusmod aute sint\",\"email\":\"QpX@lUlrPrGLDmuzFNYMZxZsoHgDjv.fis\"}],\"breakout_room\":{\"enable\":true,\"rooms\":[{\"name\":\"reprehenderit incididunt ut voluptate\",\"participants\":[\"sed\",\"ipsum Excepteur\"]},{\"name\":\"aliqua\",\"participants\":[\"incididunt ex culpa\",\"voluptate irure Excepteur Ut\"]}]},\"language_interpretation\":{\"enable\":false,\"interpreters\":[{\"email\":\"Dtz3FrX@XqEIxNbxuJATfHhaAulNCHdQBSAcGm.npc\",\"languages\":\"eu el\"},{\"email\":\"7pB4-24@MDMoqgWnYfmFSOU.xtq\",\"languages\":\"aute est sit id qui\"}]},\"custom_keys\":[{\"key\":\"esse fugiat\",\"value\":\"commodo ipsum exercitation aliqua\"},{\"key\":\"ut nostrud\",\"value\":\"deserunt do adipisicing non\"}],\"alternative_hosts_email_notification\":true,\"focus_mode\":false,\"meeting_invitees\":[{\"email\":\"FwJJtg59@fVusGptXljwfPgYtXviO.coc\"},{\"email\":\"xY79LiguXgfiZaX@JSmyS.akn\"}]}",
									"description": "undefined",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=culpa velit reprehenderit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"meetings",
								":meetingId"
							],
							"query": [
								{
									"key": "occurrence_id",
									"value": "culpa velit reprehenderit",
									"description": "Meeting occurrence id. Support change of agenda, start_time, duration, settings: {host_video, participant_video, join_before_host, mute_upon_entry, waiting_room, watermark, auto_recording}"
								}
							],
							"variable": [
								{
									"key": "meetingId",
									"value": "-14804147",
									"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
								}
							]
						},
						"description": "Use this API to update a meeting's details.\n\n**Note:** \n* This API has a rate limit of **100 requests per day**. Because of this, a meeting can only be updated for a maximum of **100 times within a 24-hour period**. \n* The `start_time` value **must** be a future date. If the value is omitted or a date in the past, the API ignores this value and will **not** update any recurring meetings. \n* If the `start_time` value is a future date, the `recurrence` object is **required**.\n\n**Scopes:** `meeting:write:admin`, `meeting:write`</br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `204`<br>\nMeeting updated.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "schedule_for",
											"value": "non veniam cillum",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "topic",
											"value": "voluptate ea",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "type",
											"value": "2",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "pre_schedule",
											"value": "false",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "start_time",
											"value": "1988-08-28T04:13:00.683Z",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "duration",
											"value": "24049264",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "timezone",
											"value": "sed",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "password",
											"value": "elit ips",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "agenda",
											"value": "est consectetur id enim",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "template_id",
											"value": "quis amet",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "tracking_fields",
											"value": "[{\"field\":\"fugiat veniam Duis id\",\"value\":\"aliqua exercitation laboris id molli\"},{\"field\":\"laborum tempor\",\"value\":\"pariatur quis dolore nisi\"}]",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "recurrence",
											"value": "{\"type\":2,\"repeat_interval\":-99014168,\"weekly_days\":\"1\",\"monthly_day\":1,\"monthly_week\":4,\"monthly_week_day\":6,\"end_times\":1,\"end_date_time\":\"1955-06-22T13:34:00.911Z\"}",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "settings",
											"value": "{\"host_video\":false,\"participant_video\":true,\"cn_meeting\":false,\"in_meeting\":false,\"join_before_host\":false,\"jbh_time\":10,\"mute_upon_entry\":false,\"watermark\":false,\"use_pmi\":false,\"approval_type\":2,\"registration_type\":1,\"audio\":\"both\",\"auto_recording\":\"none\",\"enforce_login\":true,\"enforce_login_domains\":\"ut aute des\",\"alternative_hosts\":\"labore ullamco\",\"close_registration\":false,\"waiting_room\":false,\"global_dial_in_countries\":[\"magna\",\"ullamco cillum in\"],\"global_dial_in_numbers\":[{\"country\":\"dolore pariatur qui veniam do\",\"country_name\":\"sit laboris\",\"city\":\"culpa ipsum minim proident incididunt\",\"number\":\"adipisicing non\",\"type\":\"tollfree\"},{\"country\":\"eiusmod consequat irure am\",\"country_name\":\"do elit est et\",\"city\":\"magna voluptate sint\",\"number\":\"reprehenderit consectetur Ut\",\"type\":\"tollfree\"}],\"contact_name\":\"adipisicing eu ut\",\"contact_email\":\"ex et nisi amet\",\"registrants_email_notification\":false,\"registrants_confirmation_email\":true,\"meeting_authentication\":true,\"authentication_option\":\"veniam in aliquip sed ea\",\"authentication_domains\":\"dolore\",\"authentication_name\":\"sed sunt dolore\",\"show_share_button\":true,\"allow_multiple_devices\":true,\"encryption_type\":\"enhanced_encryption\",\"approved_or_denied_countries_or_regions\":{\"enable\":false,\"method\":\"deny\",\"approved_list\":[\"Duis dolore Lorem ut\",\"dolor nulla quis sint\"],\"denied_list\":[\"sit ad aute sint sed\",\"Ut\"]},\"authentication_exception\":[{\"name\":\"Ut esse eu\",\"email\":\"lsSRyHO0NW8Kn@pQTpI.gki\"},{\"name\":\"ut cupidatat\",\"email\":\"quzN1rLmcu@jIeLGovkhdHT.dm\"}],\"breakout_room\":{\"enable\":true,\"rooms\":[{\"name\":\"dolore nisi\",\"participants\":[\"officia eiusmod sint ea et\",\"commodo exercitation sint ea\"]},{\"name\":\"sed\",\"participants\":[\"ex Ut Lorem\",\"amet enim et nostrud\"]}]},\"language_interpretation\":{\"enable\":true,\"interpreters\":[{\"email\":\"oQvId-bYFd5bw@riVDoKkxVh.nt\",\"languages\":\"non eu culpa ipsum\"},{\"email\":\"UHg@fRHViJieMYmxKLVgBwFbcQErVqPahPw.mkq\",\"languages\":\"commodo amet dolor in\"}]},\"custom_keys\":[{\"key\":\"anim ut culpa\",\"value\":\"consectetur dolore\"},{\"key\":\"fugiat dolore ad\",\"value\":\"aute ea deserunt consectetur elit\"}],\"alternative_hosts_email_notification\":true,\"focus_mode\":true,\"meeting_invitees\":[{\"email\":\"l6jwmHwG1jxCh5@HdxD.tgt\"},{\"email\":\"svA4TEswS@iufjZV.wqs\"}]}",
											"description": "undefined",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										}
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**Error Code:** `300`<br>\nInvalid enforce_login_domains, separate multiple domains by semicolon.<br>\nA maximum of {rateLimitNumber} meetings can be created/updated for a single user in one day.\n",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "schedule_for",
											"value": "non veniam cillum",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "topic",
											"value": "voluptate ea",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "type",
											"value": "2",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "pre_schedule",
											"value": "false",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "start_time",
											"value": "1988-08-28T04:13:00.683Z",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "duration",
											"value": "24049264",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "timezone",
											"value": "sed",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "password",
											"value": "elit ips",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "agenda",
											"value": "est consectetur id enim",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "template_id",
											"value": "quis amet",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "tracking_fields",
											"value": "[{\"field\":\"fugiat veniam Duis id\",\"value\":\"aliqua exercitation laboris id molli\"},{\"field\":\"laborum tempor\",\"value\":\"pariatur quis dolore nisi\"}]",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "recurrence",
											"value": "{\"type\":2,\"repeat_interval\":-99014168,\"weekly_days\":\"1\",\"monthly_day\":1,\"monthly_week\":4,\"monthly_week_day\":6,\"end_times\":1,\"end_date_time\":\"1955-06-22T13:34:00.911Z\"}",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "settings",
											"value": "{\"host_video\":false,\"participant_video\":true,\"cn_meeting\":false,\"in_meeting\":false,\"join_before_host\":false,\"jbh_time\":10,\"mute_upon_entry\":false,\"watermark\":false,\"use_pmi\":false,\"approval_type\":2,\"registration_type\":1,\"audio\":\"both\",\"auto_recording\":\"none\",\"enforce_login\":true,\"enforce_login_domains\":\"ut aute des\",\"alternative_hosts\":\"labore ullamco\",\"close_registration\":false,\"waiting_room\":false,\"global_dial_in_countries\":[\"magna\",\"ullamco cillum in\"],\"global_dial_in_numbers\":[{\"country\":\"dolore pariatur qui veniam do\",\"country_name\":\"sit laboris\",\"city\":\"culpa ipsum minim proident incididunt\",\"number\":\"adipisicing non\",\"type\":\"tollfree\"},{\"country\":\"eiusmod consequat irure am\",\"country_name\":\"do elit est et\",\"city\":\"magna voluptate sint\",\"number\":\"reprehenderit consectetur Ut\",\"type\":\"tollfree\"}],\"contact_name\":\"adipisicing eu ut\",\"contact_email\":\"ex et nisi amet\",\"registrants_email_notification\":false,\"registrants_confirmation_email\":true,\"meeting_authentication\":true,\"authentication_option\":\"veniam in aliquip sed ea\",\"authentication_domains\":\"dolore\",\"authentication_name\":\"sed sunt dolore\",\"show_share_button\":true,\"allow_multiple_devices\":true,\"encryption_type\":\"enhanced_encryption\",\"approved_or_denied_countries_or_regions\":{\"enable\":false,\"method\":\"deny\",\"approved_list\":[\"Duis dolore Lorem ut\",\"dolor nulla quis sint\"],\"denied_list\":[\"sit ad aute sint sed\",\"Ut\"]},\"authentication_exception\":[{\"name\":\"Ut esse eu\",\"email\":\"lsSRyHO0NW8Kn@pQTpI.gki\"},{\"name\":\"ut cupidatat\",\"email\":\"quzN1rLmcu@jIeLGovkhdHT.dm\"}],\"breakout_room\":{\"enable\":true,\"rooms\":[{\"name\":\"dolore nisi\",\"participants\":[\"officia eiusmod sint ea et\",\"commodo exercitation sint ea\"]},{\"name\":\"sed\",\"participants\":[\"ex Ut Lorem\",\"amet enim et nostrud\"]}]},\"language_interpretation\":{\"enable\":true,\"interpreters\":[{\"email\":\"oQvId-bYFd5bw@riVDoKkxVh.nt\",\"languages\":\"non eu culpa ipsum\"},{\"email\":\"UHg@fRHViJieMYmxKLVgBwFbcQErVqPahPw.mkq\",\"languages\":\"commodo amet dolor in\"}]},\"custom_keys\":[{\"key\":\"anim ut culpa\",\"value\":\"consectetur dolore\"},{\"key\":\"fugiat dolore ad\",\"value\":\"aute ea deserunt consectetur elit\"}],\"alternative_hosts_email_notification\":true,\"focus_mode\":true,\"meeting_invitees\":[{\"email\":\"l6jwmHwG1jxCh5@HdxD.tgt\"},{\"email\":\"svA4TEswS@iufjZV.wqs\"}]}",
											"description": "undefined",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										}
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								}
							},
							"status": "Multiple Choices",
							"code": 300,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `1010`<br>\nUser not found on this account: {accountId}.<br>\n**Error Code:** `3000`<br>\nCannot access meeting information.<br>\n**Error Code:** `3003`<br>\nYou are not the meeting host.<br>\n**Error Code:** `300",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "schedule_for",
											"value": "non veniam cillum",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "topic",
											"value": "voluptate ea",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "type",
											"value": "2",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "pre_schedule",
											"value": "false",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "start_time",
											"value": "1988-08-28T04:13:00.683Z",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "duration",
											"value": "24049264",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "timezone",
											"value": "sed",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "password",
											"value": "elit ips",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "agenda",
											"value": "est consectetur id enim",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "template_id",
											"value": "quis amet",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "tracking_fields",
											"value": "[{\"field\":\"fugiat veniam Duis id\",\"value\":\"aliqua exercitation laboris id molli\"},{\"field\":\"laborum tempor\",\"value\":\"pariatur quis dolore nisi\"}]",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "recurrence",
											"value": "{\"type\":2,\"repeat_interval\":-99014168,\"weekly_days\":\"1\",\"monthly_day\":1,\"monthly_week\":4,\"monthly_week_day\":6,\"end_times\":1,\"end_date_time\":\"1955-06-22T13:34:00.911Z\"}",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "settings",
											"value": "{\"host_video\":false,\"participant_video\":true,\"cn_meeting\":false,\"in_meeting\":false,\"join_before_host\":false,\"jbh_time\":10,\"mute_upon_entry\":false,\"watermark\":false,\"use_pmi\":false,\"approval_type\":2,\"registration_type\":1,\"audio\":\"both\",\"auto_recording\":\"none\",\"enforce_login\":true,\"enforce_login_domains\":\"ut aute des\",\"alternative_hosts\":\"labore ullamco\",\"close_registration\":false,\"waiting_room\":false,\"global_dial_in_countries\":[\"magna\",\"ullamco cillum in\"],\"global_dial_in_numbers\":[{\"country\":\"dolore pariatur qui veniam do\",\"country_name\":\"sit laboris\",\"city\":\"culpa ipsum minim proident incididunt\",\"number\":\"adipisicing non\",\"type\":\"tollfree\"},{\"country\":\"eiusmod consequat irure am\",\"country_name\":\"do elit est et\",\"city\":\"magna voluptate sint\",\"number\":\"reprehenderit consectetur Ut\",\"type\":\"tollfree\"}],\"contact_name\":\"adipisicing eu ut\",\"contact_email\":\"ex et nisi amet\",\"registrants_email_notification\":false,\"registrants_confirmation_email\":true,\"meeting_authentication\":true,\"authentication_option\":\"veniam in aliquip sed ea\",\"authentication_domains\":\"dolore\",\"authentication_name\":\"sed sunt dolore\",\"show_share_button\":true,\"allow_multiple_devices\":true,\"encryption_type\":\"enhanced_encryption\",\"approved_or_denied_countries_or_regions\":{\"enable\":false,\"method\":\"deny\",\"approved_list\":[\"Duis dolore Lorem ut\",\"dolor nulla quis sint\"],\"denied_list\":[\"sit ad aute sint sed\",\"Ut\"]},\"authentication_exception\":[{\"name\":\"Ut esse eu\",\"email\":\"lsSRyHO0NW8Kn@pQTpI.gki\"},{\"name\":\"ut cupidatat\",\"email\":\"quzN1rLmcu@jIeLGovkhdHT.dm\"}],\"breakout_room\":{\"enable\":true,\"rooms\":[{\"name\":\"dolore nisi\",\"participants\":[\"officia eiusmod sint ea et\",\"commodo exercitation sint ea\"]},{\"name\":\"sed\",\"participants\":[\"ex Ut Lorem\",\"amet enim et nostrud\"]}]},\"language_interpretation\":{\"enable\":true,\"interpreters\":[{\"email\":\"oQvId-bYFd5bw@riVDoKkxVh.nt\",\"languages\":\"non eu culpa ipsum\"},{\"email\":\"UHg@fRHViJieMYmxKLVgBwFbcQErVqPahPw.mkq\",\"languages\":\"commodo amet dolor in\"}]},\"custom_keys\":[{\"key\":\"anim ut culpa\",\"value\":\"consectetur dolore\"},{\"key\":\"fugiat dolore ad\",\"value\":\"aute ea deserunt consectetur elit\"}],\"alternative_hosts_email_notification\":true,\"focus_mode\":true,\"meeting_invitees\":[{\"email\":\"l6jwmHwG1jxCh5@HdxD.tgt\"},{\"email\":\"svA4TEswS@iufjZV.wqs\"}]}",
											"description": "undefined",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										}
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404`<br>\nMeeting not found.<br>\n**Error Code:** `1001`<br>\nUser does not exist: {userId}.<br>\n**Error Code:** `3001`<br>\nA meeting with this {meetingId} is not found or has expired.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "schedule_for",
											"value": "non veniam cillum",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "topic",
											"value": "voluptate ea",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "type",
											"value": "2",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "pre_schedule",
											"value": "false",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "start_time",
											"value": "1988-08-28T04:13:00.683Z",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "duration",
											"value": "24049264",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "timezone",
											"value": "sed",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "password",
											"value": "elit ips",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "agenda",
											"value": "est consectetur id enim",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "template_id",
											"value": "quis amet",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "tracking_fields",
											"value": "[{\"field\":\"fugiat veniam Duis id\",\"value\":\"aliqua exercitation laboris id molli\"},{\"field\":\"laborum tempor\",\"value\":\"pariatur quis dolore nisi\"}]",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "recurrence",
											"value": "{\"type\":2,\"repeat_interval\":-99014168,\"weekly_days\":\"1\",\"monthly_day\":1,\"monthly_week\":4,\"monthly_week_day\":6,\"end_times\":1,\"end_date_time\":\"1955-06-22T13:34:00.911Z\"}",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "settings",
											"value": "{\"host_video\":false,\"participant_video\":true,\"cn_meeting\":false,\"in_meeting\":false,\"join_before_host\":false,\"jbh_time\":10,\"mute_upon_entry\":false,\"watermark\":false,\"use_pmi\":false,\"approval_type\":2,\"registration_type\":1,\"audio\":\"both\",\"auto_recording\":\"none\",\"enforce_login\":true,\"enforce_login_domains\":\"ut aute des\",\"alternative_hosts\":\"labore ullamco\",\"close_registration\":false,\"waiting_room\":false,\"global_dial_in_countries\":[\"magna\",\"ullamco cillum in\"],\"global_dial_in_numbers\":[{\"country\":\"dolore pariatur qui veniam do\",\"country_name\":\"sit laboris\",\"city\":\"culpa ipsum minim proident incididunt\",\"number\":\"adipisicing non\",\"type\":\"tollfree\"},{\"country\":\"eiusmod consequat irure am\",\"country_name\":\"do elit est et\",\"city\":\"magna voluptate sint\",\"number\":\"reprehenderit consectetur Ut\",\"type\":\"tollfree\"}],\"contact_name\":\"adipisicing eu ut\",\"contact_email\":\"ex et nisi amet\",\"registrants_email_notification\":false,\"registrants_confirmation_email\":true,\"meeting_authentication\":true,\"authentication_option\":\"veniam in aliquip sed ea\",\"authentication_domains\":\"dolore\",\"authentication_name\":\"sed sunt dolore\",\"show_share_button\":true,\"allow_multiple_devices\":true,\"encryption_type\":\"enhanced_encryption\",\"approved_or_denied_countries_or_regions\":{\"enable\":false,\"method\":\"deny\",\"approved_list\":[\"Duis dolore Lorem ut\",\"dolor nulla quis sint\"],\"denied_list\":[\"sit ad aute sint sed\",\"Ut\"]},\"authentication_exception\":[{\"name\":\"Ut esse eu\",\"email\":\"lsSRyHO0NW8Kn@pQTpI.gki\"},{\"name\":\"ut cupidatat\",\"email\":\"quzN1rLmcu@jIeLGovkhdHT.dm\"}],\"breakout_room\":{\"enable\":true,\"rooms\":[{\"name\":\"dolore nisi\",\"participants\":[\"officia eiusmod sint ea et\",\"commodo exercitation sint ea\"]},{\"name\":\"sed\",\"participants\":[\"ex Ut Lorem\",\"amet enim et nostrud\"]}]},\"language_interpretation\":{\"enable\":true,\"interpreters\":[{\"email\":\"oQvId-bYFd5bw@riVDoKkxVh.nt\",\"languages\":\"non eu culpa ipsum\"},{\"email\":\"UHg@fRHViJieMYmxKLVgBwFbcQErVqPahPw.mkq\",\"languages\":\"commodo amet dolor in\"}]},\"custom_keys\":[{\"key\":\"anim ut culpa\",\"value\":\"consectetur dolore\"},{\"key\":\"fugiat dolore ad\",\"value\":\"aute ea deserunt consectetur elit\"}],\"alternative_hosts_email_notification\":true,\"focus_mode\":true,\"meeting_invitees\":[{\"email\":\"l6jwmHwG1jxCh5@HdxD.tgt\"},{\"email\":\"svA4TEswS@iufjZV.wqs\"}]}",
											"description": "undefined",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										}
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete a meeting",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=culpa velit reprehenderit&schedule_for_reminder=true&cancel_meeting_reminder=culpa velit reprehenderit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"meetings",
								":meetingId"
							],
							"query": [
								{
									"key": "occurrence_id",
									"value": "culpa velit reprehenderit",
									"description": "The meeting occurrence ID."
								},
								{
									"key": "schedule_for_reminder",
									"value": "true",
									"description": "`true`: Notify host and alternative host about the meeting cancellation via email.\n`false`: Do not send any email notification."
								},
								{
									"key": "cancel_meeting_reminder",
									"value": "culpa velit reprehenderit",
									"description": "`true`: Notify registrants about the meeting cancellation via email. \n\n`false`: Do not send any email notification to meeting registrants. \n\nThe default value of this field is `false`."
								}
							],
							"variable": [
								{
									"key": "meetingId",
									"value": "-14804147",
									"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
								}
							]
						},
						"description": "Delete a meeting.<br><br>\n**Scopes:** `meeting:write:admin` `meeting:write`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n"
					},
					"response": [
						{
							"name": "**HTTP Status Code**: `204` <br>\nMeeting deleted.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=culpa velit reprehenderit&schedule_for_reminder=true&cancel_meeting_reminder=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "schedule_for_reminder",
											"value": "true"
										},
										{
											"key": "cancel_meeting_reminder",
											"value": "culpa velit reprehenderit"
										}
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code**: `400` <br>\n**Error Code**: `1010` <br>\nUser does not belong to this account: {accountId}.<br>\n**Error Code**: `3000` <br>Cannot access meeting information.<br>Invalid occurrence_id.<br>\n**Error Code**: `3002` <br>\nSorry, you cannot d",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=culpa velit reprehenderit&schedule_for_reminder=true&cancel_meeting_reminder=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "schedule_for_reminder",
											"value": "true"
										},
										{
											"key": "cancel_meeting_reminder",
											"value": "culpa velit reprehenderit"
										}
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code**: `404` <br>\nMeeting not found.\n**Error Code**: `1001` <br>\nUser does not exist: {userId}.<br>\n**Error Code**: `3001` <br>\nMeeting with this {meetingId} is not found or has expired.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId?occurrence_id=culpa velit reprehenderit&schedule_for_reminder=true&cancel_meeting_reminder=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "schedule_for_reminder",
											"value": "true"
										},
										{
											"key": "cancel_meeting_reminder",
											"value": "culpa velit reprehenderit"
										}
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Update meeting status",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "action",
									"value": "recover",
									"description": "`end` - End a meeting.<br>\n`recover` - [Recover](https://support.zoom.us/hc/en-us/articles/360038297111-Recover-a-deleted-meeting) a deleted meeting.\n (This can only be one of end,recover)",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/meetings/:meetingId/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"meetings",
								":meetingId",
								"status"
							],
							"variable": [
								{
									"key": "meetingId",
									"value": "-14804147",
									"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
								}
							]
						},
						"description": "Update the status of a meeting.<br><br>\n**Scopes:** `meeting:write:admin` `meeting:write`\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `204`<br>\nMeeting updated.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "recover",
											"description": "`end` - End a meeting.<br>\n`recover` - [Recover](https://support.zoom.us/hc/en-us/articles/360038297111-Recover-a-deleted-meeting) a deleted meeting.\n (This can only be one of end,recover)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"status"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account: {accountId}.\n**Error Code:** `3000`<br>\nCannot access meeting info.\n**Error Code:** `3003`<br>\nYou're not the meeting host.\n**Error Code:** `3063`<br>\nCan not",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "recover",
											"description": "`end` - End a meeting.<br>\n`recover` - [Recover](https://support.zoom.us/hc/en-us/articles/360038297111-Recover-a-deleted-meeting) a deleted meeting.\n (This can only be one of end,recover)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"status"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404`<br>\nMeeting not found.<br>\n**Error Code:** `1001`<br>\nMeeting host does not exist: {userId}.\n\n",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "recover",
											"description": "`end` - End a meeting.<br>\n`recover` - [Recover](https://support.zoom.us/hc/en-us/articles/360038297111-Recover-a-deleted-meeting) a deleted meeting.\n (This can only be one of end,recover)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"status"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get meeting invitation",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/meetings/:meetingId/invitation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"meetings",
								":meetingId",
								"invitation"
							],
							"variable": [
								{
									"key": "meetingId",
									"value": "-14804147",
									"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
								}
							]
						},
						"description": "Retrieve the meeting invite note that was sent for a specific meeting.<br><br>\n**Scopes:** `meeting:read:admin` `meeting:read`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nMeeting invitation returned.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/invitation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"invitation"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"invitation\": \"Shrijana G is inviting you to a scheduled Zoom meeting.\\r\\n\\r\\nTopic: MyTestMeeting\\r\\nTime: Jul 31, 2019 04:00 PM Pacific Time (US and Canada)\\r\\n\\r\\nJoin Zoom Meeting\\r\\nhttps://zoom.us/j/000000\\r\\n\\r\\nOne tap mobile\\r\\n+000000\"\n}"
						}
					]
				},
				{
					"name": "Perform batch registration",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auto_approve",
									"value": "true",
									"description": "If a meeting was scheduled with approval_type `1` (manual approval), but you would like to automatically approve the registrants that are added via this API, you can set the value of this field to `true`. \n\nYou **cannot** use this field to change approval setting for a meeting  that was originally scheduled with approval_type `0` (automatic approval).",
									"type": "text"
								},
								{
									"key": "registrants",
									"value": "[{\"first_name\":\"nisi anim\",\"email\":\"W6xgYZx6EjBFj@C.lr\",\"last_name\":\"do fugiat Excepteur\"},{\"first_name\":\"ex irure fugiat\",\"email\":\"XVPALs@ZIxkSiBOOUvpGCdzpcwIXrlo.get\",\"last_name\":\"sunt\"}]",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/meetings/:meetingId/batch_registrants",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"meetings",
								":meetingId",
								"batch_registrants"
							],
							"variable": [
								{
									"key": "meetingId",
									"value": "culpa velit reprehenderit",
									"description": "(Required) Unique identifier of the meeting (Meeting Number)."
								}
							]
						},
						"description": "Register up to 30 registrants at once for a meeting that requires [registration](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings). <br>\n\n**Prerequisites:**<br>\n* The meeting host must be a Licensed user.\n* The meeting must require registration and should be of type `2`, i.e., they should be scheduled meetings. Instant meetings and Recurring meetings are not supported by this API.<br><br>\n**Scope:** `meeting:write`, `meeting:write:admin`<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n\n\n\n\n\n\n\n"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200` **OK** <br>\nRegistrants added.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "auto_approve",
											"value": "false",
											"description": "If a meeting was scheduled with approval_type `1` (manual approval), but you would like to automatically approve the registrants that are added via this API, you can set the value of this field to `true`. \n\nYou **cannot** use this field to change approval setting for a meeting  that was originally scheduled with approval_type `0` (automatic approval).",
											"type": "text"
										},
										{
											"key": "registrants",
											"value": "[{\"first_name\":\"et Excepteur ipsum\",\"email\":\"YeoH9H@wJSMwuGDuzwRZgtKxxHrHvHlGTqml.ukuc\",\"last_name\":\"consectetur mollit\"},{\"first_name\":\"nostrud dolor\",\"email\":\"bRdEM@EICBdH.wge\",\"last_name\":\"do ut\"}]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/batch_registrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"batch_registrants"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Unique identifier of the meeting (Meeting Number)."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"registrants\": [\n  {\n   \"registrant_id\": \"conseret14re\",\n   \"email\": \"example@example.com\",\n   \"join_url\": \" https://zoom.us/w/9999999?tk=oZuwHfdgAAAAAAAAAAAAAAAA&uuid=WN_XW4_SdxBBBBxLDQt\"\n  },\n  {\n   \"registrant_id\": \"fdgsfh2ey82fuh\",\n   \"email\": \"example-2@example.com\",\n   \"join_url\": \" https://zoom.us/w/9999999?tk=oZu52542356AAAAAA&uuid=WN_XW4_SdxBBBBxLDQt\"\n  },\n  {\n   \"registrant_id\": \"hdsfhjf3iwh\",\n   \"email\": \"example-3@example.com\",\n   \"join_url\": \" https://zoom.us/w/9999999?tk=ozghdfdsghf36AAA&uuid=WN_XW4_SdxBBBBxLDQt\"\n  }\n ]\n}"
						},
						{
							"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n**Error Code:** `3038`<br>\nMeeting is over, you can not register now. If you have any questions, please contact the Meeting host.<br><br>\n**Error Code:** `303`<br> \nThis API can only be used for scheduled m",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "auto_approve",
											"value": "false",
											"description": "If a meeting was scheduled with approval_type `1` (manual approval), but you would like to automatically approve the registrants that are added via this API, you can set the value of this field to `true`. \n\nYou **cannot** use this field to change approval setting for a meeting  that was originally scheduled with approval_type `0` (automatic approval).",
											"type": "text"
										},
										{
											"key": "registrants",
											"value": "[{\"first_name\":\"et Excepteur ipsum\",\"email\":\"YeoH9H@wJSMwuGDuzwRZgtKxxHrHvHlGTqml.ukuc\",\"last_name\":\"consectetur mollit\"},{\"first_name\":\"nostrud dolor\",\"email\":\"bRdEM@EICBdH.wge\",\"last_name\":\"do ut\"}]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/batch_registrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"batch_registrants"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Unique identifier of the meeting (Meeting Number)."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404` **Not Found** <br>\n**Error Code:** `3001`<br>\nMeeting does not exist: {meetingId}.<br>\n**Error Code:** `3043`<br>\nMeeting has reached maximum attendee capacity.<br>\n**Error Code:** `404`<br>\nRegistration has not been enabled fo",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "auto_approve",
											"value": "false",
											"description": "If a meeting was scheduled with approval_type `1` (manual approval), but you would like to automatically approve the registrants that are added via this API, you can set the value of this field to `true`. \n\nYou **cannot** use this field to change approval setting for a meeting  that was originally scheduled with approval_type `0` (automatic approval).",
											"type": "text"
										},
										{
											"key": "registrants",
											"value": "[{\"first_name\":\"et Excepteur ipsum\",\"email\":\"YeoH9H@wJSMwuGDuzwRZgtKxxHrHvHlGTqml.ukuc\",\"last_name\":\"consectetur mollit\"},{\"first_name\":\"nostrud dolor\",\"email\":\"bRdEM@EICBdH.wge\",\"last_name\":\"do ut\"}]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/batch_registrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"batch_registrants"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Unique identifier of the meeting (Meeting Number)."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `429` <br> You have exceeded the daily rate limit of \"{0}\" for meeting **Perform batch registration** API requests for the registrant \"{1}\". You can resume these API requests at GMT 00:00:00.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "auto_approve",
											"value": "false",
											"description": "If a meeting was scheduled with approval_type `1` (manual approval), but you would like to automatically approve the registrants that are added via this API, you can set the value of this field to `true`. \n\nYou **cannot** use this field to change approval setting for a meeting  that was originally scheduled with approval_type `0` (automatic approval).",
											"type": "text"
										},
										{
											"key": "registrants",
											"value": "[{\"first_name\":\"et Excepteur ipsum\",\"email\":\"YeoH9H@wJSMwuGDuzwRZgtKxxHrHvHlGTqml.ukuc\",\"last_name\":\"consectetur mollit\"},{\"first_name\":\"nostrud dolor\",\"email\":\"bRdEM@EICBdH.wge\",\"last_name\":\"do ut\"}]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/batch_registrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"batch_registrants"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Unique identifier of the meeting (Meeting Number)."
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Perform batch poll creation",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "polls",
									"value": "[{\"title\":\"aliquip\",\"poll_type\":1,\"anonymous\":false,\"questions\":[{\"name\":\"consequat\",\"type\":\"rating_scale\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"irure nostrud sint sed\",\"et consectetur s\"],\"right_answers\":[\"cillum eu\"],\"prompts\":[{\"prompt_question\":\"dolor nos\",\"prompt_right_answers\":[\"ea pariatur esse aliquip eu\",\"aliqua\"]},{\"prompt_question\":\"consequat qui ad sed proident\",\"prompt_right_answers\":[\"ipsum id\",\"exercitation irure qui\"]}],\"answer_min_character\":26518877,\"answer_max_character\":-64726357,\"case_sensitive\":false,\"rating_min_value\":44571203,\"rating_max_value\":-25301282,\"rating_min_label\":\"aliqua minim veniam in nisi\",\"rating_max_label\":\"velit pariatur nostrud adipisicing amet\"},{\"name\":\"laborum aute sunt in\",\"type\":\"short_answer\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"laborum ut sed eiusmod quis\",\"qui non\"],\"right_answers\":[\"\"],\"prompts\":[{\"prompt_question\":\"pariatur\",\"prompt_right_answers\":[\"velit nisi eiusmod\",\"enim dolor\"]},{\"prompt_question\":\"ullamco Ut enim\",\"prompt_right_answers\":[\"veniam reprehenderit laboris non anim\",\"ut et quis fugiat\"]}],\"answer_min_character\":67548164,\"answer_max_character\":-69698186,\"case_sensitive\":false,\"rating_min_value\":94283246,\"rating_max_value\":-15847729,\"rating_min_label\":\"mollit adipisicing fugiat\",\"rating_max_label\":\"eiusmod nulla non ut\"}]}]",
									"description": "Information about the meeting's polls.",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/meetings/:meetingId/batch_polls",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"meetings",
								":meetingId",
								"batch_polls"
							],
							"variable": [
								{
									"key": "meetingId",
									"value": "culpa velit reprehenderit",
									"description": "(Required) "
								}
							]
						},
						"description": "Polls allow the meeting host to survey attendees. Use this API to create batch [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.<br><br>\n\n**Scopes**: `meeting:write:admin` `meeting:write`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n**Prerequisites**:<br>\n* Host user type must be **Pro** or higher plan.\n* Polling feature must be enabled in the host's account.\n* Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `201` <br>\nMeeting Poll Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "polls",
											"value": "[{\"title\":\"anim nulla est\",\"poll_type\":1,\"anonymous\":false,\"questions\":[{\"name\":\"culpa ut in\",\"type\":\"multiple\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"pariatur cupidatat nostrud sint Excepteur\",\"dolore dolore\"],\"right_answers\":[\"deserunt aliqua do\"],\"prompts\":[{\"prompt_question\":\"laboris non dolor ut\",\"prompt_right_answers\":[\"amet aute\",\"aliquip dolor esse\"]},{\"prompt_question\":\"in Excepteur voluptate\",\"prompt_right_answers\":[\"proident\",\"i\"]}],\"answer_min_character\":5167542,\"answer_max_character\":-44865243,\"case_sensitive\":false,\"rating_min_value\":23276911,\"rating_max_value\":-55879132,\"rating_min_label\":\"laboris sunt deserunt veniam voluptate\",\"rating_max_label\":\"aliqua Ut\"},{\"name\":\"et sed nulla\",\"type\":\"short_answer\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"do \",\"veniam nostrud elit incididunt\"],\"right_answers\":[\"culpa in et\"],\"prompts\":[{\"prompt_question\":\"ad quis et\",\"prompt_right_answers\":[\"culpa amet anim\",\"anim eiusmod dolor ad\"]},{\"prompt_question\":\"et esse\",\"prompt_right_answers\":[\"incididunt elit sed eu ullamco\",\"dolor ut anim\"]}],\"answer_min_character\":71353384,\"answer_max_character\":79609154,\"case_sensitive\":false,\"rating_min_value\":85136246,\"rating_max_value\":-44948898,\"rating_min_label\":\"commodo\",\"rating_max_label\":\"in quis incididunt sint occaecat\"}]}]",
											"description": "Information about the meeting's polls.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/batch_polls",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"batch_polls"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"polls\": [\n  {\n   \"id\": \"ex eiusmod\",\n   \"title\": \"Meeting Usefulness\",\n   \"status\": \"Excepteur Lorem dolor exercitation\",\n   \"anonymous\": false,\n   \"poll_type\": 2,\n   \"questions\": [\n    {\n     \"name\": \"How useful was this meeting?\",\n     \"type\": \"single\",\n     \"answer_required\": false,\n     \"answers\": [\n      \"Extremely useful\",\n      \"Somewhat useful\",\n      \"Not useful at all\"\n     ],\n     \"right_answers\": [\n      \"Not useful at all\"\n     ]\n    }\n   ]\n  },\n  {\n   \"id\": \"mollit do\",\n   \"title\": \"Learn something new\",\n   \"status\": \"ended\",\n   \"anonymous\": false,\n   \"poll_type\": 2,\n   \"questions\": [\n    {\n     \"name\": \"How are you?\",\n     \"type\": \"multiple\",\n     \"answer_required\": false,\n     \"answers\": [\n      \"Good\",\n      \"Not so good\"\n     ],\n     \"right_answers\": [\n      \"Good\"\n     ]\n    }\n   ]\n  }\n ]\n}"
						},
						{
							"name": "**HTTP Status Code:** `404` **Not Found** <br>\n**Error Code:** `300` <br>\nInvalid Meeting ID.\n**Error Code:** `300` <br>\nMeeting id does not exist.\n**Error Code:** `3000` <br>\nCannot access meeting information.\n**Error Code:** `3001`<br>\nMeeting does not ",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "polls",
											"value": "[{\"title\":\"anim nulla est\",\"poll_type\":1,\"anonymous\":false,\"questions\":[{\"name\":\"culpa ut in\",\"type\":\"multiple\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"pariatur cupidatat nostrud sint Excepteur\",\"dolore dolore\"],\"right_answers\":[\"deserunt aliqua do\"],\"prompts\":[{\"prompt_question\":\"laboris non dolor ut\",\"prompt_right_answers\":[\"amet aute\",\"aliquip dolor esse\"]},{\"prompt_question\":\"in Excepteur voluptate\",\"prompt_right_answers\":[\"proident\",\"i\"]}],\"answer_min_character\":5167542,\"answer_max_character\":-44865243,\"case_sensitive\":false,\"rating_min_value\":23276911,\"rating_max_value\":-55879132,\"rating_min_label\":\"laboris sunt deserunt veniam voluptate\",\"rating_max_label\":\"aliqua Ut\"},{\"name\":\"et sed nulla\",\"type\":\"short_answer\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"do \",\"veniam nostrud elit incididunt\"],\"right_answers\":[\"culpa in et\"],\"prompts\":[{\"prompt_question\":\"ad quis et\",\"prompt_right_answers\":[\"culpa amet anim\",\"anim eiusmod dolor ad\"]},{\"prompt_question\":\"et esse\",\"prompt_right_answers\":[\"incididunt elit sed eu ullamco\",\"dolor ut anim\"]}],\"answer_min_character\":71353384,\"answer_max_character\":79609154,\"case_sensitive\":false,\"rating_min_value\":85136246,\"rating_max_value\":-44948898,\"rating_min_label\":\"commodo\",\"rating_max_label\":\"in quis incididunt sint occaecat\"}]}]",
											"description": "Information about the meeting's polls.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/batch_polls",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"batch_polls"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create meeting's invite links",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ttl",
									"value": "7200",
									"description": "undefined",
									"type": "text"
								},
								{
									"key": "attendees",
									"value": "[{\"name\":\"mollit non\"},{\"name\":\"Excepteur ad\"}]",
									"description": "undefined",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/meetings/:meetingId/invite_links",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"meetings",
								":meetingId",
								"invite_links"
							],
							"variable": [
								{
									"key": "meetingId",
									"value": "-14804147",
									"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
								}
							]
						},
						"description": "Use this API to create a batch of invitation links for a meeting.\n\n**Scopes**: `meeting:write:admin`, `meeting:write`</br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `201` <br>\nMeeting Invite Links Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ttl",
											"value": "7200",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "attendees",
											"value": "[{\"name\":\"culpa et\"},{\"name\":\"Lorem\"}]",
											"description": "undefined",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/invite_links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"invite_links"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Location",
									"value": "culpa velit reprehenderit",
									"description": "The location of the created meeting invite links."
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"attendees\": [\n  {\n   \"name\": \"Mike Brown\",\n   \"join_url\": \"https://zoom.us/j/935364234?wp=9a84R6-YFwCCP04ss8PwwImO-3Rm9HSM0RwPn3Ll05WGBEJJDI21846QS-nJuNs7JKcwHTG2VoILGWJkljPTKw.tRxEV0sF4mEBkAaE\"\n  }\n ]\n}"
						},
						{
							"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `300`<br>\n* Meeting id does not exist.<br>\n* Invalid meeting id.<br>\n**Error Code:** `3000` Cannot access webinar info.<br>\n**Error Code:** `3001` Meeting does not exist: {meetingId}.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ttl",
											"value": "7200",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "attendees",
											"value": "[{\"name\":\"culpa et\"},{\"name\":\"Lorem\"}]",
											"description": "undefined",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/meetings/:meetingId/invite_links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"meetings",
										":meetingId",
										"invite_links"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "past meetings",
			"item": [
				{
					"name": "{meeting UUID}",
					"item": [
						{
							"name": "archive files",
							"item": [
								{
									"name": "Get meeting archived files",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingUUID/archive_files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingUUID",
												"archive_files"
											],
											"variable": [
												{
													"key": "meetingUUID",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
												}
											]
										},
										"description": "List the archived recording files of the specific meeting instance. For more information, read our [Managing archiving of meeting and webinar data](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) documentation.\n\n**Scopes:** `recording:read`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* Follow the [enablement process](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data#h_01ENPBD3WR68D7FAKTBY92SG45) to access the archiving feature."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200` **OK**\nMeeting with Archived files returned.\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/past_meetings/:meetingUUID/archive_files",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"past_meetings",
														":meetingUUID",
														"archive_files"
													],
													"variable": [
														{
															"key": "meetingUUID",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"uuid\": \"yVaEafxxRN+tiOZUSWKJVw==\",\n \"id\": 4554919265,\n \"host_id\": \"7pTFNV2SS0i0LKfQhmMyHQ\",\n \"topic\": \"ZOOM_API Test's Personal Meeting Room\",\n \"type\": 4,\n \"start_time\": \"2021-04-26T05:23:18Z\",\n \"timezone\": \"Asia/Shanghai\",\n \"duration\": 1,\n \"total_size\": 2676453,\n \"recording_count\": 2,\n \"meeting_type\": \"internal\",\n \"account_name\": \"account_01\",\n \"complete_time\": \"2021-03-12T02:57:27Z\",\n \"archive_files\": [\n  {\n   \"id\": \"20d04c59-df9a-442b-9a3d-570884bede07\",\n   \"file_type\": \"MP4\",\n   \"file_extension\": \"MP4\",\n   \"file_size\": 1434664,\n   \"download_url\": \"https://example.com/recording/download/Qg75t7xZBtEbAkjdlgbfdngBBBB\",\n   \"status\": \"completed\",\n   \"recording_type\": \"shared_screen_with_speaker_view\",\n   \"individual\": true,\n   \"participant_email\": \"user@example.com\",\n   \"participant_join_time\": \"2021-03-12T02:07:27Z\",\n   \"participant_leave_time\": \"2021-03-12T02:12:27Z\"\n  },\n  {\n   \"id\": \"83cc23a5-3a35-44e2-87b3-a2b5a4dac6f8\",\n   \"file_type\": \"M4A\",\n   \"file_extension\": \"M4A\",\n   \"file_size\": 1241789,\n   \"download_url\": \"https://example.com/recording/download/Qg75t7xZBtEbAkjdlgbfdngCCCC\",\n   \"status\": \"completed\",\n   \"recording_type\": \"audio_only\",\n   \"individual\": true,\n   \"participant_email\": \"user1@example.com\",\n   \"participant_join_time\": \"2021-03-12T02:07:27Z\",\n   \"participant_leave_time\": \"2021-03-12T02:12:27Z\"\n  }\n ]\n}"
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nMeeting recording not found.<br>\n**Error Code:** `3001`<br>\nMeeting {meetingUUId} does not exist.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/past_meetings/:meetingUUID/archive_files",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"past_meetings",
														":meetingUUID",
														"archive_files"
													],
													"variable": [
														{
															"key": "meetingUUID",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete archived meeting files",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingUUID/archive_files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingUUID",
												"archive_files"
											],
											"variable": [
												{
													"key": "meetingUUID",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
												}
											]
										},
										"description": "Use this API to delete a meeting instance's archived recording files. For more information, read our [Managing archiving of meeting and webinar data](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) documentation.\n\n**Scopes:** `recording:write:admin`, `recording:write` <br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:** \n* Follow the [enablement process](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data#h_01ENPBD3WR68D7FAKTBY92SG45) to access the archiving feature."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204` **OK** <br>\n Meeting Archived file deleted.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/past_meetings/:meetingUUID/archive_files",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"past_meetings",
														":meetingUUID",
														"archive_files"
													],
													"variable": [
														{
															"key": "meetingUUID",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` <br> **Error Code:** `200` <br>\n Only available for Paid account. <br >**Error Code:** `200` <br>\n Not available for this account.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/past_meetings/:meetingUUID/archive_files",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"past_meetings",
														":meetingUUID",
														"archive_files"
													],
													"variable": [
														{
															"key": "meetingUUID",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404` <br> **Error Code:** `3001` <br>\n Meeting does not exist: {0}.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/past_meetings/:meetingUUID/archive_files",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"past_meetings",
														":meetingUUID",
														"archive_files"
													],
													"variable": [
														{
															"key": "meetingUUID",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get past meeting details",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/past_meetings/:meetingUUID",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_meetings",
										":meetingUUID"
									],
									"variable": [
										{
											"key": "meetingUUID",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
										}
									]
								},
								"description": "Use this API to get information about a past meeting. \n\n **Scopes:** `meeting:read:admin`, `meeting:read` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nMeeting details returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingUUID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingUUID"
											],
											"variable": [
												{
													"key": "meetingUUID",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"uuid\": \"JbkqFkfqQ0e7+CZluSnc1g==\",\n \"id\": 535548971,\n \"host_id\": \"DYHrdpjrS3uaOf7dPkkg8w\",\n \"type\": 2,\n \"topic\": \"My Meeting\",\n \"user_name\": \"JilLChill\",\n \"user_email\": \"user@example.com\",\n \"start_time\": \"2020-04-01T07:00:30Z\",\n \"end_time\": \"2020-04-01T07:02:01Z\",\n \"duration\": 2,\n \"total_minutes\": 2,\n \"participants_count\": 1,\n \"dept\": \"Engineering\",\n \"source\": \"Zoom\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nMeeting not found<br><br>\n**Error Code:** `1010`<br>\nUser not exist: {userId}<br><br>\nUser {userId} not exist or not belong to this account.<br><br>\n**Error Code:** `300`<br>\nCannot access meeting info.<br><br>\n**Error Code",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingUUID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingUUID"
											],
											"variable": [
												{
													"key": "meetingUUID",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nMeeting not found<br><br>\n**Error Code:** `3001`<br>\nThis meeting is not available or ID is not valid.<br>\nMeeting ID is invalid or not end.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingUUID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingUUID"
											],
											"variable": [
												{
													"key": "meetingUUID",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get past meeting participants",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/past_meetings/:meetingUUID/participants?page_size=30&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_meetings",
										":meetingUUID",
										"participants"
									],
									"query": [
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										}
									],
									"variable": [
										{
											"key": "meetingUUID",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
										}
									]
								},
								"description": "Retrieve information on participants from a past meeting. <br><br>\n**Scopes:** `meeting:read:admin` `meeting:read`\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n**Prerequisites:**<br>\n* Paid account on a Pro or higher plan.\n\n<br> <br>  **Note**: Please double encode your UUID when using this API if the UUID begins with a '/'or contains '//' in it.\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nMeeting participants' report returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingUUID/participants?page_size=30&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingUUID",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "meetingUUID",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"page_count\": 1,\n \"page_size\": 30,\n \"total_records\": 1,\n \"next_page_token\": \"aliqua\",\n \"participants\": [\n  {\n   \"id\": \"8b29rgg4bb\",\n   \"name\": \"Ram Shekhar\",\n   \"user_email\": \"example@example.com\"\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `1010`<br>\nUser {userId} not exist or not belong to this account.<br><br>\n**Error Code:** `300`<br>\nCannot access meeting information.<br><br>\n**Error Code:** `200`<br>\nOnly available for paid account: {acco",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingUUID/participants?page_size=30&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingUUID",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "meetingUUID",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nMeeting not found<br>\n**Error Code:** `1001`<br>\nUser {userId} not exist or not belong to this account.<br>\nUser not exist: {userId}<br><br>\n**Error Code:** `3001`<br>\nThis meeting is not available or ID is not valid.<br>\nM",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingUUID/participants?page_size=30&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingUUID",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "meetingUUID",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.\n\nIf the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "{meeting Id}",
					"item": [
						{
							"name": "List ended meeting instances",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/past_meetings/:meetingId/instances",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_meetings",
										":meetingId",
										"instances"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								},
								"description": "Get a list of ended meeting instances<br><br>\n**Scopes:** `meeting:read:admin` `meeting:read`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` "
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nList of ended meeting instances returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingId",
												"instances"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meetings\": [\n  {\n   \"uuid\": \"ut officia\",\n   \"start_time\": \"1951-03-28T20:45:33.531Z\"\n  },\n  {\n   \"uuid\": \"ut do elit exercitation veniam\",\n   \"start_time\": \"2011-01-28T06:07:12.318Z\"\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nMeeting not found.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingId",
												"instances"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List past meeting's poll results",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/past_meetings/:meetingId/polls",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_meetings",
										":meetingId",
										"polls"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
										}
									]
								},
								"description": "[Polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) allow the meeting host to survey attendees. Use this API to list poll results of a meeting.<br><br>\n\n**Scopes**: `meeting:read:admin`, `meeting:read`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` <br>\n**Prerequisites**:<br>\n* Host user type must be **Pro**.\n* Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nPolls returned successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingId",
												"polls"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": 123456,\n \"uuid\": \"gsdjfhsdfkhjdsf\",\n \"start_time\": \"2019-02-01T12:34:12.660Z\",\n \"title\": \"Learn something new\",\n \"questions\": [\n  {\n   \"name\": \"Sam S\",\n   \"email\": \"example@example.com\",\n   \"question_details\": [\n    {\n     \"question\": \"How are you?\",\n     \"answer\": \"I am wonderful.\"\n    }\n   ]\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "List past meeting's files",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/past_meetings/:meetingId/files",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_meetings",
										":meetingId",
										"files"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "-14804147",
											"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
										}
									]
								},
								"description": "**Note: This API has been deprecated and is no longer supported due to GCM encryption updates for security purposes.** To learn about saving the in-meeting chat files via Zoom Client, refer to the [Saving in-meeting chat](https://support.zoom.us/hc/en-us/articles/115004792763-Saving-in-meeting-chat) guide.\n\nList files sent via in-meeting chat during a meeting. The in-meeting files are deleted after 24 hours of the meeting completion time. \n<br><br>\n**Scope:** `meeting:read`, `meeting:read:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` "
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nFiles retrieved successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingId/files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingId",
												"files"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"total_records\": 1,\n \"in_meeting_files\": [\n  {\n   \"file_name\": \"somefile.txt\",\n   \"download_url\": \"somefile.txt/randomurl\",\n   \"file_size\": 300\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account: {accountId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingId/files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingId",
												"files"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `3001`<br>\nMeeting ID is invalid or not end.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_meetings/:meetingId/files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_meetings",
												":meetingId",
												"files"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "-14804147",
													"description": "(Required) The meeting ID in **long** format. The data type of this field is \"long\"(represented as int64 in JSON).\n\nWhile storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "metrics",
			"item": [
				{
					"name": "meetings",
					"item": [
						{
							"name": "{meeting Id}",
							"item": [
								{
									"name": "participants",
									"item": [
										{
											"name": "List meeting participants",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants?type=live&page_size=30&next_page_token=culpa velit reprehenderit&include_fields=registrant_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"meetings",
														":meetingId",
														"participants"
													],
													"query": [
														{
															"key": "type",
															"value": "live",
															"description": "The type of meeting to query: \n* `past` — All past meetings. \n* `pastOne` — All past one-user meetings. \n* `live` - All live meetings. \n\nThis value defaults to `live`."
														},
														{
															"key": "page_size",
															"value": "30",
															"description": "The number of records returned within a single API call."
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit",
															"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
														},
														{
															"key": "include_fields",
															"value": "registrant_id",
															"description": "Provide `registrant_id` as the value for this field if you would like to see the registrant ID attribute in the response of this API call. A registrant ID is a unique identifier of a [meeting registrant](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingregistrants). This is not supported for `live` meeting types."
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
														}
													]
												},
												"description": "Use this API to return a list of participants from live or past meetings. \n\n If you do not provide the `type` query parameter, the default value will be set to the `live` value. This API will only return metrics for participants in a live meeting, if any exist. You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months. \n\n**Note:** \n\nThis API may return empty values for participants' `user_name`, `ip_address`, `location`, and `email` responses when the account calling this API: \n* Does **not** have a signed HIPAA business associate agreement (BAA). \n* Is a [**legacy** HIPAA BAA account](https://marketplace.zoom.us/docs/api-reference/other-references/legacy-business-associate-agreements). \n\n**Scopes:** `dashboard_meetings:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` \n\n**Prerequisites:** \n* A Business or higher plan."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\nMeeting participants returned.<br>\nOnly available for paid accounts that have enabled the dashboard feature.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants?type=live&page_size=30&next_page_token=culpa velit reprehenderit&include_fields=registrant_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																},
																{
																	"key": "include_fields",
																	"value": "registrant_id"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"page_count\": 1,\n \"page_size\": 30,\n \"total_records\": 2,\n \"next_page_token\": \"\",\n \"participants\": [\n  {\n   \"id\": \"d52f19c548b88490b5d16fcbd38\",\n   \"user_id\": \"32dsfsd4g5gd\",\n   \"user_name\": \"dojo\",\n   \"device\": \"WIN\",\n   \"ip_address\": \"127.0.0.1\",\n   \"location\": \"New York\",\n   \"network_type\": \"Wired\",\n   \"microphone\": \"Plantronics BT600\",\n   \"camera\": \"FaceTime HD Camera\",\n   \"speaker\": \"Plantronics BT600\",\n   \"data_center\": \"SC\",\n   \"connection_type\": \"P2P\",\n   \"join_time\": \"2019-09-07T13:15:02.837Z\",\n   \"leave_time\": \"2019-09-07T13:15:09.837Z\",\n   \"share_application\": false,\n   \"share_desktop\": true,\n   \"share_whiteboard\": true,\n   \"recording\": false,\n   \"status\": \"in_waiting_room\",\n   \"pc_name\": \"dojo's pc\",\n   \"domain\": \"Dojo-workspace\",\n   \"mac_addr\": \" 00:0a:95:9d:68:16\",\n   \"harddisk_id\": \"sed proident in\",\n   \"version\": \"4.4.55383.0716\",\n   \"leave_reason\": \"Dojo left the meeting.<br>Reason: Host ended the meeting.\"\n  },\n  {\n   \"id\": \"z8aaaaaaCfp8uQ\",\n   \"user_id\": \"1670000000\",\n   \"user_name\": \"Rea\",\n   \"device\": \"Android\",\n   \"ip_address\": \"120.000.000\",\n   \"location\": \"San Jose (US)\",\n   \"network_type\": \"Wifi\",\n   \"data_center\": \"SC\",\n   \"connection_type\": \"UDP\",\n   \"join_time\": \"2019-08-02T15:31:48Z\",\n   \"leave_time\": \"2019-08-02T16:04:12Z\",\n   \"share_application\": false,\n   \"share_desktop\": false,\n   \"share_whiteboard\": false,\n   \"recording\": false,\n   \"pc_name\": \"Rea's PC\",\n   \"domain\": \"Rea-workspace\",\n   \"mac_addr\": \"\",\n   \"harddisk_id\": \"\",\n   \"version\": \"4.4.55383.0716\",\n   \"leave_reason\": \"Rea left the meeting.<br>Reason: Host closed the meeting.\",\n   \"sip_uri\": \"sip:sipp@10.100.112.140:11029\",\n   \"from_sip_uri\": \"sip:sipp@10.100.112.140:11029\"\n  }\n ]\n}"
												},
												{
													"name": "**Error Code:** `300`<br>\nCan not access webinar info.<br>\n{meetingId} or the next page token is either invalid or expired.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants?type=live&page_size=30&next_page_token=culpa velit reprehenderit&include_fields=registrant_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																},
																{
																	"key": "include_fields",
																	"value": "registrant_id"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
																}
															]
														}
													},
													"status": "Multiple Choices",
													"code": 300,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001`<br>\nMeeting ID is invalid or has not ended.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants?type=live&page_size=30&next_page_token=culpa velit reprehenderit&include_fields=registrant_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																},
																{
																	"key": "include_fields",
																	"value": "registrant_id"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get meeting participant QoS",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/:participantId/qos?type=live",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"meetings",
														":meetingId",
														"participants",
														":participantId",
														"qos"
													],
													"query": [
														{
															"key": "type",
															"value": "live",
															"description": "The type of meeting to query: \n* `past` — All past meetings. \n* `live` - All live meetings. \n\nThis value defaults to `live`."
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
														},
														{
															"key": "participantId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The participant's ID."
														}
													]
												},
												"description": "Use this API to return the quality of service (QoS) report for participants from live or past meetings. The data returned indicates the connection quality for sending/receiving video, audio, and shared content. The API returns this data for either the API request or when the API request was last received. \n\nWhen the sender sends data, a timestamp is attached to the sender’s data packet. The receiver then returns this timestamp to the sender. This helps determine the upstream and downstream latency, which includes the application processing time. The latency data returned is the five second average and five second maximum. \n\n This API will **not** return data if there is no data being sent or received at the time of request. \n\n**Note:** \n\nThis API may return empty values for participants' `user_name`, `ip_address`, `location`, and `email` responses when the account calling this API: \n* Does **not** have a signed HIPAA business associate agreement (BAA). \n* Is a [**legacy** HIPAA BAA account](https://marketplace.zoom.us/docs/api-reference/other-references/legacy-business-associate-agreements). \n\n**Scopes:** `dashboard_meetings:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\nMeeting participant QOS returned.<br>\nOnly available for paid account that have enabled the dashboard feature.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/:participantId/qos?type=live",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants",
																":participantId",
																"qos"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
																},
																{
																	"key": "participantId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The participant's ID."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"user_id\": \"1670000000\",\n \"user_name\": \"User\",\n \"device\": \"Android\",\n \"ip_address\": \"192.0.2.0\",\n \"location\": \"San Jose (US)\",\n \"join_time\": \"2021-06-24T20:00:00Z\",\n \"leave_time\": \"2021-06-24T20:00:00Z\",\n \"pc_name\": \"User's Phone\",\n \"domain\": \"user-android\",\n \"mac_addr\": \"\",\n \"harddisk_id\": \"\",\n \"version\": \"4.4.55383.0726\",\n \"user_qos\": [\n  {\n   \"date_time\": \"2021-06-24T20:00:00Z\",\n   \"audio_input\": {\n    \"bitrate\": \"23 kbps\",\n    \"latency\": \"126 ms\",\n    \"jitter\": \"6 ms\",\n    \"avg_loss\": \"0.3%\",\n    \"max_loss\": \"1.9%\"\n   },\n   \"audio_output\": {\n    \"bitrate\": \"63 kbps\",\n    \"latency\": \"134 ms\",\n    \"jitter\": \"6 ms\",\n    \"avg_loss\": \"0.0%\",\n    \"max_loss\": \"0.0%\"\n   },\n   \"video_input\": {\n    \"bitrate\": \"1055 kbps\",\n    \"latency\": \"129 ms\",\n    \"jitter\": \"11 ms\",\n    \"avg_loss\": \"0.0%\",\n    \"max_loss\": \"4.9%\",\n    \"resolution\": \"1280*720\",\n    \"frame_rate\": \"12 fps\"\n   },\n   \"video_output\": {\n    \"bitrate\": \"673 kbps\",\n    \"latency\": \"135 ms\",\n    \"jitter\": \"11 ms\",\n    \"avg_loss\": \"0.0%\",\n    \"max_loss\": \"0.0%\",\n    \"resolution\": \"640*360\",\n    \"frame_rate\": \"22 fps\"\n   },\n   \"as_input\": {\n    \"bitrate\": \"70 kbps\",\n    \"latency\": \"135 ms\",\n    \"jitter\": \"8 ms\",\n    \"avg_loss\": \"0.0%\",\n    \"max_loss\": \"0.0%\",\n    \"resolution\": \"0*0\",\n    \"frame_rate\": \"\"\n   },\n   \"as_output\": {\n    \"bitrate\": \"70 kbps\",\n    \"latency\": \"135 ms\",\n    \"jitter\": \"8 ms\",\n    \"avg_loss\": \"0.0%\",\n    \"max_loss\": \"0.0%\",\n    \"resolution\": \"0*0\",\n    \"frame_rate\": \"\"\n   },\n   \"cpu_usage\": {\n    \"zoom_min_cpu_usage\": \"8%\",\n    \"zoom_avg_cpu_usage\": \"12%\",\n    \"zoom_max_cpu_usage\": \"18%\",\n    \"system_max_cpu_usage\": \"40%\"\n   }\n  }\n ]\n}"
												},
												{
													"name": "**Error Code:** `300`<br>\nCan not access webinar info, {meetingId}.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/:participantId/qos?type=live",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants",
																":participantId",
																"qos"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
																},
																{
																	"key": "participantId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The participant's ID."
																}
															]
														}
													},
													"status": "Multiple Choices",
													"code": 300,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001`<br>\nThis meeting's detail info is not available.<br>\nThis meeting has not ended yet or the Meeting ID is invalid.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/:participantId/qos?type=live",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants",
																":participantId",
																"qos"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
																},
																{
																	"key": "participantId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The participant's ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "List meeting participants QoS",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/qos?type=live&page_size=1&next_page_token=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"meetings",
														":meetingId",
														"participants",
														"qos"
													],
													"query": [
														{
															"key": "type",
															"value": "live",
															"description": "The type of meeting to query: \n* `past` — All past meetings. \n* `live` - All live meetings. \n\nThis value defaults to `live`."
														},
														{
															"key": "page_size",
															"value": "1",
															"description": "The number of items returned per page."
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit",
															"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
														}
													]
												},
												"description": "Use this API to return a list of meeting participants from live or past meetings and their quality of service recieved during the meeting. The data returned indicates the connection quality for sending/receiving video, audio, and shared content. \n\n**Note:** \n\nThis API may return empty values for participants' `user_name`, `ip_address`, `location`, and `email` responses when the account calling this API: \n* Does **not** have a signed HIPAA business associate agreement (BAA). \n* Is a [**legacy** HIPAA BAA account](https://marketplace.zoom.us/docs/api-reference/other-references/legacy-business-associate-agreements). \n\n**Scopes:** `dashboard_meetings:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` \n\n**Prerequisites:** \n* A Business or a higher plan."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\nMeeting participants returned.<br>\nOnly available for paid accounts that have enabled the dashboard feature.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/qos?type=live&page_size=1&next_page_token=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants",
																"qos"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																},
																{
																	"key": "page_size",
																	"value": "1"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"page_count\": \"integer [int64]\",\n \"page_size\": \"integer\",\n \"total_records\": \"integer [int64]\",\n \"next_page_token\": \"string\",\n \"participants\": [\n  {\n   \"user_id\": \"1670000000\",\n   \"user_name\": \"User\",\n   \"device\": \"Android\",\n   \"ip_address\": \"192.0.2.0\",\n   \"location\": \"San Jose (US)\",\n   \"join_time\": \"2021-06-24T20:00:00Z\",\n   \"leave_time\": \"2021-06-24T20:00:00Z\",\n   \"pc_name\": \"User's Phone\",\n   \"domain\": \"user-android\",\n   \"mac_addr\": \"\",\n   \"harddisk_id\": \"\",\n   \"version\": \"4.4.55383.0726\",\n   \"user_qos\": [\n    {\n     \"date_time\": \"2021-06-24T20:00:00Z\",\n     \"audio_input\": {\n      \"bitrate\": \"23 kbps\",\n      \"latency\": \"126 ms\",\n      \"jitter\": \"6 ms\",\n      \"avg_loss\": \"0.3%\",\n      \"max_loss\": \"1.9%\"\n     },\n     \"audio_output\": {\n      \"bitrate\": \"63 kbps\",\n      \"latency\": \"134 ms\",\n      \"jitter\": \"6 ms\",\n      \"avg_loss\": \"0.0%\",\n      \"max_loss\": \"0.0%\"\n     },\n     \"video_input\": {\n      \"bitrate\": \"1055 kbps\",\n      \"latency\": \"129 ms\",\n      \"jitter\": \"11 ms\",\n      \"avg_loss\": \"0.0%\",\n      \"max_loss\": \"4.9%\",\n      \"resolution\": \"1280*720\",\n      \"frame_rate\": \"12 fps\"\n     },\n     \"video_output\": {\n      \"bitrate\": \"673 kbps\",\n      \"latency\": \"135 ms\",\n      \"jitter\": \"11 ms\",\n      \"avg_loss\": \"0.0%\",\n      \"max_loss\": \"0.0%\",\n      \"resolution\": \"640*360\",\n      \"frame_rate\": \"22 fps\"\n     },\n     \"as_input\": {\n      \"bitrate\": \"70 kbps\",\n      \"latency\": \"135 ms\",\n      \"jitter\": \"8 ms\",\n      \"avg_loss\": \"0.0%\",\n      \"max_loss\": \"0.0%\",\n      \"resolution\": \"0*0\",\n      \"frame_rate\": \"\"\n     },\n     \"as_output\": {\n      \"bitrate\": \"70 kbps\",\n      \"latency\": \"135 ms\",\n      \"jitter\": \"8 ms\",\n      \"avg_loss\": \"0.0%\",\n      \"max_loss\": \"0.0%\",\n      \"resolution\": \"0*0\",\n      \"frame_rate\": \"\"\n     },\n     \"cpu_usage\": {\n      \"zoom_min_cpu_usage\": \"8%\",\n      \"zoom_avg_cpu_usage\": \"12%\",\n      \"zoom_max_cpu_usage\": \"18%\",\n      \"system_max_cpu_usage\": \"40%\"\n     }\n    }\n   ]\n  }\n ]\n}"
												},
												{
													"name": "**Error Code:** `300`<br>\nCan not access webinar info, {meetingId}.<br>\nThe next page token is either invalid or expired.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/qos?type=live&page_size=1&next_page_token=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants",
																"qos"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																},
																{
																	"key": "page_size",
																	"value": "1"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
																}
															]
														}
													},
													"status": "Multiple Choices",
													"code": 300,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001`<br>\nThis meeting's detail info is not available.<br>\nThe Meeting ID is not valid or the meeting has not ended yet.\n",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/qos?type=live&page_size=1&next_page_token=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants",
																"qos"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																},
																{
																	"key": "page_size",
																	"value": "1"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get sharing/recording details",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/sharing?type=live&page_size=30&next_page_token=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"meetings",
														":meetingId",
														"participants",
														"sharing"
													],
													"query": [
														{
															"key": "type",
															"value": "live",
															"description": "The type of meeting to query: \n* `past` — All past meetings. \n* `live` - All live meetings. \n\nThis value defaults to `live`."
														},
														{
															"key": "page_size",
															"value": "30",
															"description": "The number of records returned within a single API call."
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit",
															"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes."
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
														}
													]
												},
												"description": "Retrieve the sharing and recording details of participants from live or past meetings.<br>\n**Scopes:** `dashboard_meetings:read:admin`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:** <br>\n* Business or a higher plan."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\nMeeting participants returned.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/sharing?type=live&page_size=30&next_page_token=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants",
																"sharing"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"page_count\": \"integer\",\n \"page_size\": \"integer\",\n \"total_records\": \"integer\",\n \"next_page_token\": \"string\",\n \"participants\": [\n  {\n   \"id\": \"string\",\n   \"user_id\": \"string\",\n   \"user_name\": \"string\",\n   \"details\": [\n    {\n     \"content\": \"string\",\n     \"start_time\": \"string\",\n     \"end_time\": \"string\"\n    }\n   ]\n  }\n ]\n}"
												},
												{
													"name": "**Error Code:** `300`<br>\nCan not access webinar info, {meetingId}.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/sharing?type=live&page_size=30&next_page_token=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants",
																"sharing"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
																}
															]
														}
													},
													"status": "Multiple Choices",
													"code": 300,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001`<br>\nThis meeting's detail info is not available or ID is not valid.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/sharing?type=live&page_size=30&next_page_token=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants",
																"sharing"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get post meeting feedback",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/satisfaction?type=live&next_page_token=culpa velit reprehenderit&page_size=30",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"meetings",
														":meetingId",
														"participants",
														"satisfaction"
													],
													"query": [
														{
															"key": "type",
															"value": "live",
															"description": "Specify a value to get the response for the corresponding meeting type. The value of this field can be one of the following:<br> <br>`past` - Meeting that already occurred in the specified date range.<br>`pastOne` - Past meetings that were attended by only one user. <br>`live` - Live meetings.<br><br>\n\nIf you do not provide this field, the default value will be `live` and thus, the API will only query responses for live meetings."
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit",
															"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
														},
														{
															"key": "page_size",
															"value": "30",
															"description": "The number of records returned within a single API call."
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
														}
													]
												},
												"description": "When a meeting ends, each attendee will be prompted to share their meeting experience by clicking either thumbs up or thumbs down. Use this API to retrieve the feedback submitted for a specific meeting. Note that this API only works for meetings scheduled after December 20, 2020.\n\n**Prerequisites:**\n* [Feedback to Zoom](https://support.zoom.us/hc/en-us/articles/115005838023) setting must be enabled by the participant prior to the meeting.\n* The user making the API request must be enrolled in a Business or a higher plan.\n\n<br> **Scope:** `dashboard_meetings:read:admiin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\n\n",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/satisfaction?type=live&next_page_token=culpa velit reprehenderit&page_size=30",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants",
																"satisfaction"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																},
																{
																	"key": "page_size",
																	"value": "30"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"page_size\": 1,\n \"next_page_token\": \"\",\n \"participants\": [\n  {\n   \"user_id\": \"aegr46312rum\",\n   \"email\": \"example@example.com\",\n   \"quality\": \"GOOD\",\n   \"date_time\": \"2021-02-21T18:48:06.423Z\"\n  }\n ]\n}"
												},
												{
													"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `200`<br>\nOnly available for paid accounts that have dashboard feature enabled.\n",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/satisfaction?type=live&next_page_token=culpa velit reprehenderit&page_size=30",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants",
																"satisfaction"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																},
																{
																	"key": "page_size",
																	"value": "30"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001`<br>\nMeeting ID is invalid or not end.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/meetings/:meetingId/participants/satisfaction?type=live&next_page_token=culpa velit reprehenderit&page_size=30",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"meetings",
																":meetingId",
																"participants",
																"satisfaction"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																},
																{
																	"key": "page_size",
																	"value": "30"
																}
															],
															"variable": [
																{
																	"key": "meetingId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get meeting details",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/metrics/meetings/:meetingId?type=live",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"meetings",
												":meetingId"
											],
											"query": [
												{
													"key": "type",
													"value": "live",
													"description": "The type of meeting to query: \n* `past` — All past meetings. \n* `pastOne` — All past one-user meetings. \n* `live` - All live meetings. \n\nThis value defaults to `live`."
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										},
										"description": "Get details on live or past meetings. This overview will show if features such as audio, video, screen sharing, and recording were being used in the meeting. You can also see the license types of each user on your account.<br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.  <br>\n**Scopes:** `dashboard_meetings:read:admin`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:** <br>\n* Business or a higher plan."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nMeeting returned.<br>\nOnly available for paid accounts that have enabled the dashboard feature.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/meetings/:meetingId?type=live",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"meetings",
														":meetingId"
													],
													"query": [
														{
															"key": "type",
															"value": "live"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"uuid\": \"carreter@-2c9b447f3\",\n \"id\": 33281536,\n \"topic\": \"My meeting\",\n \"host\": \"cool host\",\n \"email\": \"example@example.com\",\n \"user_type\": \"Pro|Webinar1000\",\n \"start_time\": \"2007-06-16T16:55:42.078Z\",\n \"end_time\": \"2007-06-16T16:59:42.078Z\",\n \"duration\": \"30:00\",\n \"participants\": 4874645,\n \"has_pstn\": false,\n \"has_voip\": false,\n \"has_3rd_party_audio\": false,\n \"has_video\": false,\n \"has_screen_share\": false,\n \"has_recording\": false,\n \"has_sip\": false,\n \"has_archiving\": false,\n \"in_room_participants\": 3\n}"
										},
										{
											"name": "**Error Code:** `300`<br>\nCan not access webinar info, {meetingId}.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/meetings/:meetingId?type=live",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"meetings",
														":meetingId"
													],
													"query": [
														{
															"key": "type",
															"value": "live"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001`<br>\nMeeting ID is invalid or the meeting has not ended yet.<br>\nThis meeting's details are not available.\n",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/meetings/:meetingId?type=live",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"meetings",
														":meetingId"
													],
													"query": [
														{
															"key": "type",
															"value": "live"
														}
													],
													"variable": [
														{
															"key": "meetingId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "List meetings",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/metrics/meetings?type=live&from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit&include_fields=tracking_fields",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"metrics",
										"meetings"
									],
									"query": [
										{
											"key": "type",
											"value": "live",
											"description": "Specify a value to get the response for the corresponding meeting type. The value of this field can be one of the following:<br> <br>`past` - Meeting that already occurred in the specified date range.<br>`pastOne` - Past meetings that were attended by only one user. <br>`live` - Live meetings.<br><br>\n\nIf you do not provide this field, the default value will be `live` and thus, the API will only query responses for live meetings."
										},
										{
											"key": "from",
											"value": "1948-05-09",
											"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
										},
										{
											"key": "to",
											"value": "1948-05-09",
											"description": "(Required) End date."
										},
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										},
										{
											"key": "include_fields",
											"value": "tracking_fields",
											"description": "Set the value of this field to \"tracking_fields\" if you would like to include tracking fields of each meeting in the response."
										}
									]
								},
								"description": "List total live or past meetings that occurred during a specified period of time. This overview will show if features such as audio, video, screen sharing, and recording were being used in the meeting. You can also see the license types of each user on your account.<br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.<br>\n**Scopes:** `dashboard_meetings:read:admin`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Resource-intensive`<br><br>\n**Prerequisites:** <br>\n* Business or a higher plan.<br><br>"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nMeetings returned.<br>\nOnly available for paid accounts that have dashboard feature enabled.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/meetings?type=live&from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit&include_fields=tracking_fields",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"meetings"
											],
											"query": [
												{
													"key": "type",
													"value": "live"
												},
												{
													"key": "from",
													"value": "1948-05-09"
												},
												{
													"key": "to",
													"value": "1948-05-09"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "include_fields",
													"value": "tracking_fields"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"from\": \"string [date]\",\n \"to\": \"string [date]\",\n \"page_count\": \"integer\",\n \"page_size\": \"integer\",\n \"total_records\": \"integer\",\n \"next_page_token\": \"string\",\n \"meetings\": [\n  {\n   \"uuid\": \"string [uuid]\",\n   \"id\": \"integer\",\n   \"topic\": \"string\",\n   \"host\": \"string\",\n   \"email\": \"string\",\n   \"user_type\": \"string\",\n   \"start_time\": \"string [date-time]\",\n   \"end_time\": \"string [date-time]\",\n   \"duration\": \"string\",\n   \"participants\": \"integer\",\n   \"has_pstn\": \"boolean\",\n   \"has_voip\": \"boolean\",\n   \"has_3rd_party_audio\": \"boolean\",\n   \"has_video\": \"boolean\",\n   \"has_screen_share\": \"boolean\",\n   \"has_recording\": \"boolean\",\n   \"has_sip\": \"boolean\",\n   \"has_archiving\": \"boolean\"\n  }\n ]\n}"
								},
								{
									"name": "**Error Code:** `300`<br>\nThe next page token is invalid or expired.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/meetings?type=live&from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit&include_fields=tracking_fields",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"meetings"
											],
											"query": [
												{
													"key": "type",
													"value": "live"
												},
												{
													"key": "from",
													"value": "1948-05-09"
												},
												{
													"key": "to",
													"value": "1948-05-09"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "include_fields",
													"value": "tracking_fields"
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "webinars",
					"item": [
						{
							"name": "{webinar Id}",
							"item": [
								{
									"name": "participants",
									"item": [
										{
											"name": "Get webinar participants",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants?type=live&page_size=30&next_page_token=culpa velit reprehenderit&include_fields=registrant_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"webinars",
														":webinarId",
														"participants"
													],
													"query": [
														{
															"key": "type",
															"value": "live",
															"description": "The type of webinar to query: \n* `past` — All past webinars. \n* `live` - All live webinars. \n\nThis value defaults to `live`."
														},
														{
															"key": "page_size",
															"value": "30",
															"description": "The number of records returned within a single API call."
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit",
															"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
														},
														{
															"key": "include_fields",
															"value": "registrant_id",
															"description": "Additional fields to include in the query: \n* `registrant_id` — Include the webinar registrant's ID. The registrant ID is the [webinar registrant's unique ID](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarregistrants)."
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
														}
													]
												},
												"description": "Use this API to return information about participants from live or past webinars. \n\n**Note:** \n\nThis API may return empty values for participants' `user_name`, `ip_address`, `location`, and `email` responses when the account calling this API: \n* Does **not** have a signed HIPAA business associate agreement (BAA). \n* Is a [**legacy** HIPAA BAA account](https://marketplace.zoom.us/docs/api-reference/other-references/legacy-business-associate-agreements). \n\n**Scopes:** `dashboard_webinars:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` \n\n**Prerequisites:** \n* A Business, Education, or API Plan with Webinar add-on."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\nWebinar participants returned.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants?type=live&page_size=30&next_page_token=culpa velit reprehenderit&include_fields=registrant_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																},
																{
																	"key": "include_fields",
																	"value": "registrant_id"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"page_count\": 1,\n \"page_size\": 30,\n \"total_records\": 1,\n \"next_page_token\": \"\",\n \"participants\": [\n  {\n   \"id\": \"d52f19c548b88490b5d16fcbd38\",\n   \"user_id\": \"32dsfsd4g5gd\",\n   \"user_name\": \"dojo\",\n   \"device\": \"WIN\",\n   \"ip_address\": \"127.0.0.1\",\n   \"location\": \"New York\",\n   \"network_type\": \"Wired\",\n   \"microphone\": \"Plantronics BT600\",\n   \"camera\": \"FaceTime HD Camera\",\n   \"speaker\": \"Plantronics BT600\",\n   \"data_center\": \"SC\",\n   \"connection_type\": \"P2P\",\n   \"join_time\": \"2019-09-07T13:15:02.837Z\",\n   \"leave_time\": \"2019-09-07T13:15:09.837Z\",\n   \"share_application\": false,\n   \"share_desktop\": true,\n   \"share_whiteboard\": true,\n   \"recording\": false,\n   \"status\": \"in_waiting_room\",\n   \"pc_name\": \"dojo's pc\",\n   \"domain\": \"Dojo-workspace\",\n   \"mac_addr\": \" 00:0a:95:9d:68:16\",\n   \"harddisk_id\": \"sed proident in\",\n   \"version\": \"4.4.55383.0716\",\n   \"leave_reason\": \"Dojo left the meeting.<br>Reason: Host ended the meeting.\",\n   \"sip_uri\": \"sip:sipp@10.100.112.140:11029\",\n   \"from_sip_uri\": \"sip:sipp@10.100.112.140:11029\"\n  }\n ]\n}"
												},
												{
													"name": "**Error Code:** `300`<br>\nCan not access webinar info, {webinarId}.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants?type=live&page_size=30&next_page_token=culpa velit reprehenderit&include_fields=registrant_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																},
																{
																	"key": "include_fields",
																	"value": "registrant_id"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
																}
															]
														}
													},
													"status": "Multiple Choices",
													"code": 300,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001`<br>\nThis webinar's detail info is not available or ID is not valid.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants?type=live&page_size=30&next_page_token=culpa velit reprehenderit&include_fields=registrant_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																},
																{
																	"key": "include_fields",
																	"value": "registrant_id"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get webinar participant QoS",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/:participantId/qos?type=live",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"webinars",
														":webinarId",
														"participants",
														":participantId",
														"qos"
													],
													"query": [
														{
															"key": "type",
															"value": "live",
															"description": "The type of webinar to query: \n* `past` — All past webinars. \n* `live` - All live webinars. \n\nThis value defaults to `live`."
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
														},
														{
															"key": "participantId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The participant's ID."
														}
													]
												},
												"description": "Use this API to return the quality of service (QoS) for participants during live or past webinars. This data returned indicates the connection quality for sending/receiving video, audio, and shared content. The API returns this data for either the API request or when the API request was last received. \n\nWhen the sender sends its data, a timestamp is attached to the sender’s data packet. The receiver then returns this timestamp to the sender. This helps determine the upstream and downstream latency, which includes the application processing time. The latency data returned is the five second average and five second maximum. \n\nThis API will **not** return data if there is no data being sent or received at the time of request. \n\n**Note:** \n\nThis API may return empty values for participants' `user_name`, `ip_address`, `location`, and `email` responses when the account calling this API: \n* Does **not** have a signed HIPAA business associate agreement (BAA). \n* Is a [**legacy** HIPAA BAA account](https://marketplace.zoom.us/docs/api-reference/other-references/legacy-business-associate-agreements). \n\n**Scopes:** `dashboard_webinars:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` \n\n**Prerequisites:** \n* A Business, Education, or API Plan with Zoom Rooms set up."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\nWebinar participant QOS returned.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/:participantId/qos?type=live",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants",
																":participantId",
																"qos"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
																},
																{
																	"key": "participantId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The participant's ID."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"user_id\": \"1670000000\",\n \"user_name\": \"User\",\n \"device\": \"Android\",\n \"ip_address\": \"192.0.2.0\",\n \"location\": \"San Jose (US)\",\n \"join_time\": \"2021-06-24T20:00:00Z\",\n \"leave_time\": \"2021-06-24T20:00:00Z\",\n \"pc_name\": \"User's Phone\",\n \"domain\": \"user-android\",\n \"mac_addr\": \"\",\n \"harddisk_id\": \"\",\n \"version\": \"4.4.55383.0726\",\n \"user_qos\": [\n  {\n   \"date_time\": \"2021-06-24T20:00:00Z\",\n   \"audio_input\": {\n    \"bitrate\": \"23 kbps\",\n    \"latency\": \"126 ms\",\n    \"jitter\": \"6 ms\",\n    \"avg_loss\": \"0.3%\",\n    \"max_loss\": \"1.9%\"\n   },\n   \"audio_output\": {\n    \"bitrate\": \"63 kbps\",\n    \"latency\": \"134 ms\",\n    \"jitter\": \"6 ms\",\n    \"avg_loss\": \"0.0%\",\n    \"max_loss\": \"0.0%\"\n   },\n   \"video_input\": {\n    \"bitrate\": \"1055 kbps\",\n    \"latency\": \"129 ms\",\n    \"jitter\": \"11 ms\",\n    \"avg_loss\": \"0.0%\",\n    \"max_loss\": \"4.9%\",\n    \"resolution\": \"1280*720\",\n    \"frame_rate\": \"12 fps\"\n   },\n   \"video_output\": {\n    \"bitrate\": \"673 kbps\",\n    \"latency\": \"135 ms\",\n    \"jitter\": \"11 ms\",\n    \"avg_loss\": \"0.0%\",\n    \"max_loss\": \"0.0%\",\n    \"resolution\": \"640*360\",\n    \"frame_rate\": \"22 fps\"\n   },\n   \"as_input\": {\n    \"bitrate\": \"70 kbps\",\n    \"latency\": \"135 ms\",\n    \"jitter\": \"8 ms\",\n    \"avg_loss\": \"0.0%\",\n    \"max_loss\": \"0.0%\",\n    \"resolution\": \"0*0\",\n    \"frame_rate\": \"\"\n   },\n   \"as_output\": {\n    \"bitrate\": \"70 kbps\",\n    \"latency\": \"135 ms\",\n    \"jitter\": \"8 ms\",\n    \"avg_loss\": \"0.0%\",\n    \"max_loss\": \"0.0%\",\n    \"resolution\": \"0*0\",\n    \"frame_rate\": \"\"\n   },\n   \"cpu_usage\": {\n    \"zoom_min_cpu_usage\": \"8%\",\n    \"zoom_avg_cpu_usage\": \"12%\",\n    \"zoom_max_cpu_usage\": \"18%\",\n    \"system_max_cpu_usage\": \"40%\"\n   }\n  }\n ]\n}"
												},
												{
													"name": "**Error Code:** `300`<br>\nCan not access webinar info, {webinarId}.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/:participantId/qos?type=live",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants",
																":participantId",
																"qos"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
																},
																{
																	"key": "participantId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The participant's ID."
																}
															]
														}
													},
													"status": "Multiple Choices",
													"code": 300,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001`<br>\nThis webinar's detail info is not available or ID is not valid.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/:participantId/qos?type=live",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants",
																":participantId",
																"qos"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
																},
																{
																	"key": "participantId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The participant's ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "List webinar participant QoS",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/qos?type=live&page_size=1&next_page_token=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"webinars",
														":webinarId",
														"participants",
														"qos"
													],
													"query": [
														{
															"key": "type",
															"value": "live",
															"description": "The type of webinar to query: \n* `past` — All past webinars. \n* `live` - All live webinars. \n\nThis value defaults to `live`."
														},
														{
															"key": "page_size",
															"value": "1",
															"description": "The number of items returned per page."
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit",
															"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
														}
													]
												},
												"description": "Use this API to return a list of webinar participants from live or past webinars and the quality of service they received during the webinar. The data returned indicates the connection quality for sending/receiving video, audio, and shared content. \n\n**Note:** \n\nThis API may return empty values for participants' `user_name`, `ip_address`, `location`, and `email` responses when the account calling this API: \n* Does **not** have a signed HIPAA business associate agreement (BAA). \n* Is a [**legacy** HIPAA BAA account](https://marketplace.zoom.us/docs/api-reference/other-references/legacy-business-associate-agreements). \n\n**Scopes:** `dashboard_webinars:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` \n\n**Prerequisites:** \n* A Business, Education, or API Plan with Webinar add-on."
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\nWebinar participants returned.<br>\nOnly available for paid accounts that have enabled the Dashboard feature.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/qos?type=live&page_size=1&next_page_token=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants",
																"qos"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																},
																{
																	"key": "page_size",
																	"value": "1"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"page_count\": \"integer [int64]\",\n \"page_size\": \"integer\",\n \"total_records\": \"integer [int64]\",\n \"next_page_token\": \"string\",\n \"participants\": [\n  {\n   \"user_id\": \"1670000000\",\n   \"user_name\": \"User\",\n   \"device\": \"Android\",\n   \"ip_address\": \"192.0.2.0\",\n   \"location\": \"San Jose (US)\",\n   \"join_time\": \"2021-06-24T20:00:00Z\",\n   \"leave_time\": \"2021-06-24T20:00:00Z\",\n   \"pc_name\": \"User's Phone\",\n   \"domain\": \"user-android\",\n   \"mac_addr\": \"\",\n   \"harddisk_id\": \"\",\n   \"version\": \"4.4.55383.0726\",\n   \"user_qos\": [\n    {\n     \"date_time\": \"2021-06-24T20:00:00Z\",\n     \"audio_input\": {\n      \"bitrate\": \"23 kbps\",\n      \"latency\": \"126 ms\",\n      \"jitter\": \"6 ms\",\n      \"avg_loss\": \"0.3%\",\n      \"max_loss\": \"1.9%\"\n     },\n     \"audio_output\": {\n      \"bitrate\": \"63 kbps\",\n      \"latency\": \"134 ms\",\n      \"jitter\": \"6 ms\",\n      \"avg_loss\": \"0.0%\",\n      \"max_loss\": \"0.0%\"\n     },\n     \"video_input\": {\n      \"bitrate\": \"1055 kbps\",\n      \"latency\": \"129 ms\",\n      \"jitter\": \"11 ms\",\n      \"avg_loss\": \"0.0%\",\n      \"max_loss\": \"4.9%\",\n      \"resolution\": \"1280*720\",\n      \"frame_rate\": \"12 fps\"\n     },\n     \"video_output\": {\n      \"bitrate\": \"673 kbps\",\n      \"latency\": \"135 ms\",\n      \"jitter\": \"11 ms\",\n      \"avg_loss\": \"0.0%\",\n      \"max_loss\": \"0.0%\",\n      \"resolution\": \"640*360\",\n      \"frame_rate\": \"22 fps\"\n     },\n     \"as_input\": {\n      \"bitrate\": \"70 kbps\",\n      \"latency\": \"135 ms\",\n      \"jitter\": \"8 ms\",\n      \"avg_loss\": \"0.0%\",\n      \"max_loss\": \"0.0%\",\n      \"resolution\": \"0*0\",\n      \"frame_rate\": \"\"\n     },\n     \"as_output\": {\n      \"bitrate\": \"70 kbps\",\n      \"latency\": \"135 ms\",\n      \"jitter\": \"8 ms\",\n      \"avg_loss\": \"0.0%\",\n      \"max_loss\": \"0.0%\",\n      \"resolution\": \"0*0\",\n      \"frame_rate\": \"\"\n     },\n     \"cpu_usage\": {\n      \"zoom_min_cpu_usage\": \"8%\",\n      \"zoom_avg_cpu_usage\": \"12%\",\n      \"zoom_max_cpu_usage\": \"18%\",\n      \"system_max_cpu_usage\": \"40%\"\n     }\n    }\n   ]\n  }\n ]\n}"
												},
												{
													"name": "**Error Code:** `300`<br>\nCan not access webinar info, {webinarId}.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/qos?type=live&page_size=1&next_page_token=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants",
																"qos"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																},
																{
																	"key": "page_size",
																	"value": "1"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
																}
															]
														}
													},
													"status": "Multiple Choices",
													"code": 300,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001`<br>\nThis webinar's detail is not available or the Webinar ID is not valid.<br>\nThis webinar has not ended yet.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/qos?type=live&page_size=1&next_page_token=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants",
																"qos"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																},
																{
																	"key": "page_size",
																	"value": "1"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get sharing/recording details",
											"request": {
												"auth": {
													"type": "oauth2"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/sharing?type=live&page_size=30&next_page_token=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"webinars",
														":webinarId",
														"participants",
														"sharing"
													],
													"query": [
														{
															"key": "type",
															"value": "live",
															"description": "The type of webinar to query: \n* `past` — All past webinars. \n* `live` - All live webinars. \n\nThis value defaults to `live`."
														},
														{
															"key": "page_size",
															"value": "30",
															"description": "The number of records returned within a single API call."
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit",
															"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes."
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
														}
													]
												},
												"description": "Retrieve the sharing and recording details of participants from live or past webinars. <br><br>\n**Scopes:** `dashboard_webinars:read:admin`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` <br>\n**Prerequisites:**<br>\n* Business, Education or API Plan with Webinar add-on.\n\n"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\nWebinar participants returned.<br>\nOnly available for paid accounts that have enabled the Dashboard feature.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/sharing?type=live&page_size=30&next_page_token=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants",
																"sharing"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"page_count\": \"integer\",\n \"page_size\": \"integer\",\n \"total_records\": \"integer\",\n \"next_page_token\": \"string\",\n \"participants\": [\n  {\n   \"id\": \"string\",\n   \"user_id\": \"string\",\n   \"user_name\": \"string\",\n   \"details\": [\n    {\n     \"content\": \"string\",\n     \"start_time\": \"string\",\n     \"end_time\": \"string\"\n    }\n   ]\n  }\n ]\n}"
												},
												{
													"name": "**Error Code:** `300`<br>\nCan not access webinar info, {webinarId}.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/sharing?type=live&page_size=30&next_page_token=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants",
																"sharing"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
																}
															]
														}
													},
													"status": "Multiple Choices",
													"code": 300,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001`<br>\nThis webinar's detail info is not available or ID is not valid.<br>\nThis webinar has not ended yet.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/sharing?type=live&page_size=30&next_page_token=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants",
																"sharing"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get post webinar feedback",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/satisfaction?type=live&page_size=30&next_page_token=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"webinars",
														":webinarId",
														"participants",
														"satisfaction"
													],
													"query": [
														{
															"key": "type",
															"value": "live",
															"description": "Specify a value to get the response for the corresponding meeting type. The value of this field can be one of the following:<br> <br>`past` - Meeting that already occurred in the specified date range.<br>`pastOne` - Past meetings that were attended by only one user. <br>`live` - Live meetings.<br><br>\n\nIf you do not provide this field, the default value will be `live` and thus, the API will only query responses for live meetings."
														},
														{
															"key": "page_size",
															"value": "30",
															"description": "The number of records returned within a single API call."
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit",
															"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
														}
													]
												},
												"description": "When a Webinar ends, each attendee will be prompted to share their Webinar experience by clicking either thumbs up or thumbs down. Use this API to retrieve the feedback submitted for a specific webinar. Note that this API only works for meetings scheduled after December 20, 2020.\n\n**Prerequisites:**\n* [Feedback to Zoom](https://support.zoom.us/hc/en-us/articles/115005838023) setting must be enabled by the participant prior to the meeting.\n* The user making the API request must be enrolled in a Business or a higher plan.\n\n\n<br> **Scope:** `dashboard_webinars:read:admin`\n\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>"
											},
											"response": [
												{
													"name": "**HTTP Status Code:** `200`<br>\n\n",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/satisfaction?type=live&page_size=30&next_page_token=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants",
																"satisfaction"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"page_size\": 1,\n \"next_page_token\": \"\",\n \"participants\": [\n  {\n   \"user_id\": \"aegr46312rum\",\n   \"email\": \"example@example.com\",\n   \"quality\": \"GOOD\",\n   \"date_time\": \"2021-02-21T18:48:06.423Z\"\n  }\n ]\n}"
												},
												{
													"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `200`<br>\nOnly available for paid accounts that have dashboard feature enabled.\n",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/satisfaction?type=live&page_size=30&next_page_token=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants",
																"satisfaction"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001`<br>\nWebinar ID is invalid or not end.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/metrics/webinars/:webinarId/participants/satisfaction?type=live&page_size=30&next_page_token=culpa velit reprehenderit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"metrics",
																"webinars",
																":webinarId",
																"participants",
																"satisfaction"
															],
															"query": [
																{
																	"key": "type",
																	"value": "live"
																},
																{
																	"key": "page_size",
																	"value": "30"
																},
																{
																	"key": "next_page_token",
																	"value": "culpa velit reprehenderit"
																}
															],
															"variable": [
																{
																	"key": "webinarId",
																	"value": "culpa velit reprehenderit",
																	"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get webinar details",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/metrics/webinars/:webinarId?type=live",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"webinars",
												":webinarId"
											],
											"query": [
												{
													"key": "type",
													"value": "live",
													"description": "The type of webinar to query: \n* `past` — All past webinars. \n* `live` - All live webinars. \n\nThis value defaults to `live`."
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										},
										"description": "Retrieve details from live or past webinars.<br><br>\n**Scopes:** `dashboard_webinars:read:admin`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:**<br>\n* Business, Education or API Plan with Webinar add-on.\n\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nWebinar details returned.<br>\nOnly available for paid accounts that have enabled the Dashboard feature.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/webinars/:webinarId?type=live",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"webinars",
														":webinarId"
													],
													"query": [
														{
															"key": "type",
															"value": "live"
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"{\\n    \\\"uuid\\\": \\\"CJaaaaaaaEV6A==\\\",\\n    \\\"id\\\": 00001,\\n    \\\"topic\\\": \\\"MyTestWebinar\\\",\\n    \\\"host\\\": \\\"Henry Chao\\\",\\n    \\\"email\\\": \\\"hc@sdfdfdsfdfsdf.com\\\",\\n    \\\"user_type\\\": \\\"Pro|Webinar1000\\\",\\n    \\\"start_time\\\": \\\"2019-07-16T17:14:39Z\\\",\\n    \\\"end_time\\\": \\\"2019-07-16T17:26:20Z\\\",\\n    \\\"duration\\\": 12,\\n    \\\"participants\\\": 1,\\n    \\\"has_pstn\\\": false,\\n    \\\"has_voip\\\": false,\\n    \\\"has_3rd_party_audio\\\": false,\\n    \\\"has_video\\\": false,\\n    \\\"has_screen_share\\\": false,\\n    \\\"has_recording\\\": false,\\n    \\\"has_sip\\\": false\\n    \\\"has_archiving\\\": false\\n}\""
										},
										{
											"name": "**Error Code:** `200`<br>\nCan not access webinar info, {webinarId}.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/webinars/:webinarId?type=live",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"webinars",
														":webinarId"
													],
													"query": [
														{
															"key": "type",
															"value": "live"
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001`<br>\nThe webinar has not ended yet or the Webinar ID is not valid.<br>\nThis webinar's detail is not available.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/webinars/:webinarId?type=live",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"webinars",
														":webinarId"
													],
													"query": [
														{
															"key": "type",
															"value": "live"
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "List webinars",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/metrics/webinars?type=live&from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"metrics",
										"webinars"
									],
									"query": [
										{
											"key": "type",
											"value": "live",
											"description": "The type of webinar to query: \n* `past` — All past webinars. \n* `live` - All live webinars. \n\nThis value defaults to `live`."
										},
										{
											"key": "from",
											"value": "1948-05-09",
											"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
										},
										{
											"key": "to",
											"value": "1948-05-09",
											"description": "(Required) End date."
										},
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										}
									]
								},
								"description": "List all the live or past webinars from a specified period of time. <br><br>\n**Scopes:** `dashboard_webinars:read:admin`<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Resource-intensive`<br>\n**Prerequisites:**<br>\n* Business, Education or API Plan with Webinar add-on.\n\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nMeetings returned.<br>\nOnly available for paid accounts that have enabled the Dashboard feature.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/webinars?type=live&from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"webinars"
											],
											"query": [
												{
													"key": "type",
													"value": "live"
												},
												{
													"key": "from",
													"value": "1948-05-09"
												},
												{
													"key": "to",
													"value": "1948-05-09"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"from\": \"string [date]\",\n \"to\": \"string [date]\",\n \"page_count\": \"integer\",\n \"page_size\": \"integer\",\n \"total_records\": \"integer\",\n \"next_page_token\": \"string\",\n \"webinars\": [\n  {\n   \"uuid\": \"string [uuid]\",\n   \"id\": \"integer\",\n   \"topic\": \"string\",\n   \"host\": \"string\",\n   \"email\": \"string\",\n   \"user_type\": \"string\",\n   \"start_time\": \"string [date-time]\",\n   \"end_time\": \"string [date-time]\",\n   \"duration\": \"string\",\n   \"participants\": \"integer\",\n   \"has_pstn\": \"boolean\",\n   \"has_voip\": \"boolean\",\n   \"has_3rd_party_audio\": \"boolean\",\n   \"has_video\": \"boolean\",\n   \"has_screen_share\": \"boolean\",\n   \"has_recording\": \"boolean\",\n   \"has_sip\": \"boolean\",\n   \"has_archiving\": \"boolean\"\n  }\n ]\n}"
								},
								{
									"name": "**Error Code:** `200`<br>\nThe next page token is invalid or has expired.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/webinars?type=live&from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"webinars"
											],
											"query": [
												{
													"key": "type",
													"value": "live"
												},
												{
													"key": "from",
													"value": "1948-05-09"
												},
												{
													"key": "to",
													"value": "1948-05-09"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "zoomrooms",
					"item": [
						{
							"name": "List Zoom Rooms",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/metrics/zoomrooms?page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"metrics",
										"zoomrooms"
									],
									"query": [
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "page_number",
											"value": "1",
											"description": "The page number of the current page in the returned records."
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										}
									]
								},
								"description": "List information on all Zoom Rooms in an account.<br><br>\n**Scopes:** `dashboard_zr:read:admin`\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Resource-intensive`<br>\n **Prerequisites:**<br>\n* Business, Education or API Plan with Zoom Rooms set up.\n\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nList of Zoom rooms returned.<br>\nOnly available for paid accounts that have enabled the Dashboard feature.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/zoomrooms?page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"zoomrooms"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "page_number",
													"value": "1"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"page_count\": 1,\n \"page_number\": 1,\n \"page_size\": 30,\n \"total_records\": 1,\n \"zoom_rooms\": [\n  {\n   \"id\": \"EbgjgjhghZY9wh0A\",\n   \"room_name\": \"testZoomRoom\",\n   \"calendar_name\": \"example.cal\",\n   \"email\": \"example@example.com\",\n   \"account_type\": \"Work Email\",\n   \"status\": \"Offline\",\n   \"device_ip\": \"Computer : 192.0.2.0\",\n   \"camera\": \"Integrated Webcam\",\n   \"microphone\": \"Microphone Array (Realtek Audio)\",\n   \"speaker\": \"Speakers / Headphones (Realtek Audio)\",\n   \"last_start_time\": \"2019-08-29T16:37:07Z\",\n   \"issues\": [\n    \"Zoom room is offline\"\n   ],\n   \"health\": \"critical\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Get Zoom Rooms details",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/metrics/zoomrooms/:zoomroomId?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"metrics",
										"zoomrooms",
										":zoomroomId"
									],
									"query": [
										{
											"key": "from",
											"value": "1948-05-09",
											"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
										},
										{
											"key": "to",
											"value": "1948-05-09",
											"description": "(Required) End date."
										},
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										}
									],
									"variable": [
										{
											"key": "zoomroomId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The Zoom room ID."
										}
									]
								},
								"description": "The Zoom Rooms dashboard metrics lets you know the type of configuration a Zoom room has and details on the meetings held in that room. \n\nUse this API to retrieve information on a specific room.<br><br>\n**Scopes:** `dashboard_zr:read:admin`<br> <br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`**Prerequisites:**<br>\n* Business, Education or API Plan with Zoom Rooms set up.\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nZoom room returned.<br>\nOnly available for paid accounts that have enabled the Dashboard feature.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/zoomrooms/:zoomroomId?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"zoomrooms",
												":zoomroomId"
											],
											"query": [
												{
													"key": "from",
													"value": "1948-05-09"
												},
												{
													"key": "to",
													"value": "1948-05-09"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "zoomroomId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The Zoom room ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"account_type\": \"Work Email\",\n \"calendar_name\": \"testZoomRoom\",\n \"camera\": \"Integrated Webcam\",\n \"device_ip\": \"Computer : 192.0.2.0; Controller : 192.0.2.1\",\n \"email\": \"example@example.com\",\n \"health\": \"critical\",\n \"id\": \"fdjdsfdYYYYY\",\n \"issues\": [\n  \"Zoom room is offline\"\n ],\n \"last_start_time\": \"2020-01-30T17:47:47Z\",\n \"live_meeting\": {},\n \"microphone\": \"Microphone Array (Realtek Audio)\",\n \"past_meetings\": {\n  \"from\": \"2020-03-01\",\n  \"meetings\": [],\n  \"next_page_token\": \"\",\n  \"page_count\": 0,\n  \"page_size\": 30,\n  \"to\": \"2020-03-02\",\n  \"total_records\": 0\n },\n \"room_name\": \"testZoomRoom\",\n \"speaker\": \"Speakers / Headphones (Realtek Audio)\",\n \"status\": \"Offline\"\n}"
								},
								{
									"name": "**Error Code:** `300`<br>\nThe next page token is either invalid or has expired.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/zoomrooms/:zoomroomId?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"zoomrooms",
												":zoomroomId"
											],
											"query": [
												{
													"key": "from",
													"value": "1948-05-09"
												},
												{
													"key": "to",
													"value": "1948-05-09"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "zoomroomId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The Zoom room ID."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get top 25 issues of Zoom Rooms",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/metrics/zoomrooms/issues?from=1948-05-09&to=1948-05-09",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"metrics",
										"zoomrooms",
										"issues"
									],
									"query": [
										{
											"key": "from",
											"value": "1948-05-09",
											"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
										},
										{
											"key": "to",
											"value": "1948-05-09",
											"description": "(Required) End date."
										}
									]
								},
								"description": "Get top 25 issues of Zoom Rooms.<br>\n**Scopes:** `dashboard_zr:read:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n **Prerequisites:**<br>\n* Business, Education or API Plan with Zoom Rooms set up.\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nZoom Room Issue details returned",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/zoomrooms/issues?from=1948-05-09&to=1948-05-09",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"zoomrooms",
												"issues"
											],
											"query": [
												{
													"key": "from",
													"value": "1948-05-09"
												},
												{
													"key": "to",
													"value": "1948-05-09"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"from\": \"2019-08-15\",\n \"to\": \"2019-09-15\",\n \"total_records\": 2,\n \"room_issues\": [\n  {\n   \"issue_name\": \"Controller disconnected\",\n   \"zoom_rooms_count\": 1\n  },\n  {\n   \"issue_name\": \"Controller is not charging\",\n   \"zoom_rooms_count\": 1\n  }\n ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "client",
					"item": [
						{
							"name": "feedback",
							"item": [
								{
									"name": "List Zoom meetings client feedback",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/metrics/client/feedback?from=1948-05-09&to=1948-05-09",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"client",
												"feedback"
											],
											"query": [
												{
													"key": "from",
													"value": "1948-05-09",
													"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
												},
												{
													"key": "to",
													"value": "1948-05-09",
													"description": "(Required) End date."
												}
											]
										},
										"description": "Use this API to return [Zoom meetings client feedback](https://support.zoom.us/hc/en-us/articles/115005855266-End-of-Meeting-Feedback-Survey#h_e30d552b-6d8e-4e0a-a588-9ca8180c4dbf) survey results. You can specify a monthly date range for the Dashboard data using the `from` and `to` query parameters. The month should fall within the last six months. \n\n**Scopes:** `dashboard_home:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` \n\n**Prerequisites:** \n* A Business or higher account. \n* The \"[**Feedback to Zoom**](https://support.zoom.us/hc/en-us/articles/115005838023)\" option enabled."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nClient Feedback details returned.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/client/feedback?from=1948-05-09&to=1948-05-09",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"client",
														"feedback"
													],
													"query": [
														{
															"key": "from",
															"value": "1948-05-09"
														},
														{
															"key": "to",
															"value": "1948-05-09"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"from\": \"2013-03-16\",\n \"to\": \"2013-04-16\",\n \"total_records\": 2,\n \"client_feedbacks\": [\n  {\n   \"feedback_id\": \"53532100000\",\n   \"feedback_name\": \"Poor audio quality.\",\n   \"participants_count\": 1\n  },\n  {\n   \"feedback_id\": \"53532100000\",\n   \"feedback_name\": \"They could not hear us.\",\n   \"participants_count\": 2\n  }\n ]\n}"
										}
									]
								},
								{
									"name": "Get zoom meetings client feedback",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/metrics/client/feedback/:feedbackId?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"client",
												"feedback",
												":feedbackId"
											],
											"query": [
												{
													"key": "from",
													"value": "1948-05-09"
												},
												{
													"key": "to",
													"value": "1948-05-09"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "feedbackId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Feedback Detail Id"
												}
											]
										},
										"description": "Retrieve detailed information on a [Zoom meetings client feedback](https://support.zoom.us/hc/en-us/articles/115005855266-End-of-Meeting-Feedback-Survey#h_e30d552b-6d8e-4e0a-a588-9ca8180c4dbf). <br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.\n\n**Prerequisites:**\n* Business or higher account\n* [Feedback to Zoom](https://support.zoom.us/hc/en-us/articles/115005838023) enabled.\n\n**Scope:** `dashboard_home:read:admin`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`\n\n`"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nClient Feedback details returned",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/metrics/client/feedback/:feedbackId?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"metrics",
														"client",
														"feedback",
														":feedbackId"
													],
													"query": [
														{
															"key": "from",
															"value": "1948-05-09"
														},
														{
															"key": "to",
															"value": "1948-05-09"
														},
														{
															"key": "page_size",
															"value": "30"
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "feedbackId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Feedback Detail Id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"from\": \"2017-09-28\",\n \"to\": \"2017-10-28\",\n \"page_size\": 30,\n \"next_page_token\": \"w7587w4eiyfsudgf\",\n \"client_feedback_details\": [\n  {\n   \"participant_name\": \"Meghan Styles\",\n   \"meeting_id\": \"3789500000000\",\n   \"time\": \"2017-10-21T11:35:33.480Z\",\n   \"email\": \"example@example.com\"\n  }\n ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "List client meeting satisfaction",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/metrics/client/satisfaction?from=1948-05-09&to=1948-05-09",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"metrics",
										"client",
										"satisfaction"
									],
									"query": [
										{
											"key": "from",
											"value": "1948-05-09",
											"description": "The start date for the query in “yyyy-mm-dd” format. "
										},
										{
											"key": "to",
											"value": "1948-05-09",
											"description": "The end date for the query in “yyyy-mm-dd” format. "
										}
									]
								},
								"description": "If the [End of Meeting Feedback Survey](https://support.zoom.us/hc/en-us/articles/115005855266) option is enabled, attendees will be prompted with a survey window where they can tap either the **Thumbs Up** or **Thumbs Down** button that indicates their Zoom meeting experience. With this API, you can get information on the attendees' meeting satisfaction. Specify a monthly date range for the query using the from and to query parameters. The month should fall within the last six months.\n\nTo get information on the survey results with negative experiences (indicated by **Thumbs Down**), use the [Get Zoom Meetings Client Feedback API](https://marketplace.zoom.us/docs/api-reference/zoom-api/dashboards/dashboardclientfeedbackdetail).<br>\n**Scopes:** `dashboard:read:admin`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nClient satisfaction data returned. ",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/client/satisfaction?from=1948-05-09&to=1948-05-09",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"client",
												"satisfaction"
											],
											"query": [
												{
													"key": "from",
													"value": "1948-05-09"
												},
												{
													"key": "to",
													"value": "1948-05-09"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"from\": \"2019-08-05\",\n \"to\": \"2019-09-05\",\n \"total_records\": 30,\n \"client_satisfaction\": [\n  {\n   \"date\": \"2019-08-05\",\n   \"satisfaction_percent\": 100,\n   \"good_count\": 5,\n   \"none_count\": 0,\n   \"not_good_count\": 1\n  },\n  {\n   \"date\": \"2019-08-06\",\n   \"satisfaction_percent\": 100,\n   \"good_count\": 0,\n   \"none_count\": 0,\n   \"not_good_count\": 0\n  }\n ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "issues/zoomrooms",
					"item": [
						{
							"name": "Get top 25 Zoom Rooms with issues",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/metrics/issues/zoomrooms?from=1948-05-09&to=1948-05-09",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"metrics",
										"issues",
										"zoomrooms"
									],
									"query": [
										{
											"key": "from",
											"value": "1948-05-09",
											"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
										},
										{
											"key": "to",
											"value": "1948-05-09",
											"description": "(Required) End date."
										}
									]
								},
								"description": "Get information on top 25 Zoom Rooms with issues in a month. The month specified with the \"from\" and \"to\" range should fall within the last six months.<br>\n**Scope:** `dashboard_home:read:admin`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:**<br>\n* Business or a higher plan.\n* Zoom Room must be enabled in the account."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nZoom Room with issue details returned",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/issues/zoomrooms?from=1948-05-09&to=1948-05-09",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"issues",
												"zoomrooms"
											],
											"query": [
												{
													"key": "from",
													"value": "1948-05-09"
												},
												{
													"key": "to",
													"value": "1948-05-09"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"from\": \"2015-11-02\",\n \"to\": \"2003-12-11\",\n \"total_records\": -43635367,\n \"zoom_rooms\": [\n  {\n   \"id\": \"sunt cupidatat ullamco\",\n   \"room_name\": \"pariatur\",\n   \"issues_count\": -62313990\n  },\n  {\n   \"id\": \"quis nisi non elit\",\n   \"room_name\": \"mollit\",\n   \"issues_count\": -45944598\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Get issues of Zoom Rooms",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/metrics/issues/zoomrooms/:zoomroomId?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"metrics",
										"issues",
										"zoomrooms",
										":zoomroomId"
									],
									"query": [
										{
											"key": "from",
											"value": "1948-05-09",
											"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
										},
										{
											"key": "to",
											"value": "1948-05-09",
											"description": "(Required) End date."
										},
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										}
									],
									"variable": [
										{
											"key": "zoomroomId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The Zoom room ID."
										}
									]
								},
								"description": "Use this API to return information about the Zoom Rooms in an account with issues, such as disconnected hardware or bandwidth issues. You can specify a monthly date range for the Dashboard data using the `from` and `to` query parameters. The month should fall within the last six months. \n\n**Scopes:** `dashboard_home:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` \n\n**Prerequisites:** \n* A Business or a higher plan. \n* A Zoom Room must be enabled in the account."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nZoom Room with issue details returned",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/metrics/issues/zoomrooms/:zoomroomId?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"issues",
												"zoomrooms",
												":zoomroomId"
											],
											"query": [
												{
													"key": "from",
													"value": "1948-05-09"
												},
												{
													"key": "to",
													"value": "1948-05-09"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "zoomroomId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The Zoom room ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"from\": \"2019-02-28\",\n \"to\": \"2019-03-28\",\n \"page_count\": 1,\n \"page_size\": 1,\n \"total_records\": 1,\n \"issue_details\": [\n  {\n   \"issue\": \"Zoom room is offline\",\n   \"time\": \"2019-03-07T11:17:00.956Z\"\n  }\n ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "Get CRC port usage",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/metrics/crc?from=1948-05-09&to=1948-05-09",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"metrics",
								"crc"
							],
							"query": [
								{
									"key": "from",
									"value": "1948-05-09",
									"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
								},
								{
									"key": "to",
									"value": "1948-05-09",
									"description": "(Required) End date."
								}
							]
						},
						"description": "A Cloud Room Connector allows H.323/SIP endpoints to connect to a Zoom meeting. \n\nUse this API to get the hour by hour CRC Port usage for a specified period of time. <aside class='notice'>We will provide the report for a maximum of one month. For example, if \"from\" is set to \"2017-08-05\" and \"to\" is set to \"2017-10-10\", we will adjust \"from\" to \"2017-09-10\".</aside><br><br>\n**Prerequisites:**<br>\n* Business, Education or API Plan.\n* Room Connector must be enabled on the account.<br><br>\n**Scopes:** `dashboard_crc:read:admin`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` "
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nCRC usage returned.<br>\nOnly available for paid accounts that have enabled the Dashboard feature.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/metrics/crc?from=1948-05-09&to=1948-05-09",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"metrics",
										"crc"
									],
									"query": [
										{
											"key": "from",
											"value": "1948-05-09"
										},
										{
											"key": "to",
											"value": "1948-05-09"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"from\": \"2019-04-03\",\n \"to\": \"2019-04-04\",\n \"crc_ports_usage\": [\n  {\n   \"date_time\": \"2019-05-01T15:13:39.424Z\",\n   \"crc_ports_hour_usage\": [\n    {\n     \"hour\": \"sed\",\n     \"max_usage\": 8,\n     \"total_usage\": 14\n    }\n   ]\n  }\n ]\n}"
						}
					]
				},
				{
					"name": "Get IM metrics",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/metrics/im?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"metrics",
								"im"
							],
							"query": [
								{
									"key": "from",
									"value": "1948-05-09",
									"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
								},
								{
									"key": "to",
									"value": "1948-05-09",
									"description": "(Required) End date."
								},
								{
									"key": "page_size",
									"value": "30",
									"description": "The number of records returned within a single API call."
								},
								{
									"key": "next_page_token",
									"value": "culpa velit reprehenderit",
									"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
								}
							]
						},
						"description": "Get [metrics](https://support.zoom.us/hc/en-us/articles/204654719-Dashboard#h_cc7e9749-1c70-4afb-a9a2-9680654821e4) on how users are utilizing the Zoom Chat client.\n\nYou can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.<p style=\"background-color:#e1f5fe; color:#000000; padding:8px\"><b>Deprecated:</b> We will completely deprecate this endpoint in a future release. You can continue using this endpoint to query data for messages sent <b>before</b> July 1, 2021.</br></br>To get metrics on chat messages sent <b>on and after</b> July 1, 2021, use the <a href=\"https://marketplace.zoom.us/docs/api-reference/zoom-api/dashboards/dashboardchat\">Get chat metrics API</a>.</p>\n\n**Scopes:** `dashboard_im:read:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Resource-intensive`\n\n**Prerequisites:**\n\n* Business or a higher plan."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nIM details returned.<br>\nOnly available for paid accounts that have enabled the dashboard feature.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/metrics/im?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"metrics",
										"im"
									],
									"query": [
										{
											"key": "from",
											"value": "1948-05-09"
										},
										{
											"key": "to",
											"value": "1948-05-09"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"from\": \"2019-04-09\",\n \"to\": \"2019-05-09\",\n \"page_count\": 1,\n \"page_size\": 1,\n \"total_records\": 1,\n \"users\": [\n  {\n   \"user_id\": \"sdfjk393lklrf\",\n   \"user_name\": \"culpa ipsum\",\n   \"email\": \"example@example.com\",\n   \"total_send\": 20,\n   \"total_receive\": 30,\n   \"group_send\": 5,\n   \"group_receive\": 5,\n   \"calls_send\": 1,\n   \"calls_receive\": 5,\n   \"files_send\": 3,\n   \"files_receive\": 8,\n   \"images_send\": 5,\n   \"images_receive\": 2,\n   \"voice_send\": 0,\n   \"voice_receive\": 3,\n   \"videos_send\": 1,\n   \"videos_receive\": 2,\n   \"emoji_send\": 4,\n   \"emoji_receive\": 5\n  }\n ]\n}"
						}
					]
				},
				{
					"name": "Get chat metrics",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/metrics/chat?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"metrics",
								"chat"
							],
							"query": [
								{
									"key": "from",
									"value": "1948-05-09",
									"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
								},
								{
									"key": "to",
									"value": "1948-05-09",
									"description": "(Required) End date."
								},
								{
									"key": "page_size",
									"value": "30",
									"description": "The number of records returned within a single API call."
								},
								{
									"key": "next_page_token",
									"value": "culpa velit reprehenderit",
									"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
								}
							]
						},
						"description": "Get [metrics](https://support.zoom.us/hc/en-us/articles/204654719-Dashboard#h_cc7e9749-1c70-4afb-a9a2-9680654821e4) for how users are utilizing Zoom Chat to send messages.\n\nUse the `from` and `to` query parameters to specify a monthly date range for the dashboard data. The monthly date range must be within the last six months.\n\n> **Note:** To query chat metrics from July 1, 2021 and later, use this endpoint instead of the [Get IM metrics API](https://marketplace.zoom.us/docs/api-reference/zoom-api/dashboards/dashboardim).\n\n**Scope:** `dashboard_im:read:admin`</br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Resource-intensive`\n\n**Prerequisites:**\n\n* Business or a higher plan"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nChat details returned.<br>\nOnly available for paid accounts that have enabled the dashboard feature.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/metrics/chat?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"metrics",
										"chat"
									],
									"query": [
										{
											"key": "from",
											"value": "1948-05-09"
										},
										{
											"key": "to",
											"value": "1948-05-09"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"from\": \"2019-04-09\",\n \"to\": \"2019-05-09\",\n \"page_size\": 1,\n \"next_page_token\": \"\",\n \"users\": [\n  {\n   \"user_id\": \"sdfjk393lklrf\",\n   \"user_name\": \"culpa ipsum\",\n   \"email\": \"example@example.com\",\n   \"total_sent\": 20,\n   \"p2p_sent\": 30,\n   \"group_sent\": 5,\n   \"files_sent\": 3,\n   \"text_sent\": 8,\n   \"images_sent\": 5,\n   \"code_sippet_sent\": 2,\n   \"giphys_sent\": 2,\n   \"audio_sent\": 4,\n   \"video_sent\": 5\n  }\n ]\n}"
						}
					]
				},
				{
					"name": "Get meeting quality scores",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/metrics/quality?from=1948-05-09&to=1948-05-09&type=meeting",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"metrics",
								"quality"
							],
							"query": [
								{
									"key": "from",
									"value": "1948-05-09",
									"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
								},
								{
									"key": "to",
									"value": "1948-05-09",
									"description": "(Required) End date."
								},
								{
									"key": "type",
									"value": "meeting",
									"description": "The type of meeting quality score to query: \n* `meeting` — Query by meetings. \n* `participants` — Query by meeting participants."
								}
							]
						},
						"description": "Use this API to return [meeting quality score](https://support.zoom.us/hc/en-us/articles/360061244651-Meeting-quality-scores-and-network-alerts-on-Dashboard) information. Meeting quality scores are based on the mean opinion score (MOS). The MOS measures a meeting's quality on a scale of \"Good\" (5-4), \"Fair\" (4-3), \"Poor\" (3-2), or \"Bad\" (2-1). \n\n**Scopes:** `dashboard_home:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` \n\n**Prerequisites:** \n* A Business or a higher plan."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nMeeting quality returned",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/metrics/quality?from=1948-05-09&to=1948-05-09&type=meeting",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"metrics",
										"quality"
									],
									"query": [
										{
											"key": "from",
											"value": "1948-05-09"
										},
										{
											"key": "to",
											"value": "1948-05-09"
										},
										{
											"key": "type",
											"value": "meeting"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"from\": \"2019-02-28\",\n \"to\": \"2019-03-28\",\n \"quality\": [\n  {\n   \"audio\": {\n    \"good\": 13,\n    \"fair\": 2,\n    \"poor\": 1,\n    \"bad\": 0\n   },\n   \"video\": {\n    \"good\": 16,\n    \"fair\": 0,\n    \"poor\": 0,\n    \"bad\": 0\n   },\n   \"screen_share\": {\n    \"good\": 6,\n    \"fair\": 4,\n    \"poor\": 3,\n    \"bad\": 3\n   }\n  }\n ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "report",
			"item": [
				{
					"name": "users",
					"item": [
						{
							"name": "Get active/inactive host reports",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/report/users?type=inactive&from=1948-05-09&to=1948-05-09&page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"users"
									],
									"query": [
										{
											"key": "type",
											"value": "inactive",
											"description": "Active or inactive hosts.<br>`active` - Active hosts. <br>`inactive` - Inactive hosts."
										},
										{
											"key": "from",
											"value": "1948-05-09",
											"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
										},
										{
											"key": "to",
											"value": "1948-05-09",
											"description": "(Required) End date."
										},
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "page_number",
											"value": "1",
											"description": "The page number of the current page in the returned records."
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										}
									]
								},
								"description": "A user is considered to be an active host during the month specified in the \"from\" and \"to\" range, if the user has hosted at least one meeting during this period. If the user didn't host any meetings during this period, the user is considered to be inactive.<br>The Active Hosts report displays a list of meetings, participants, and meeting minutes for a specific time range, up to one month. The month should fall within the last six months.<br>The Inactive Hosts report pulls a list of users who were not active during a specific period of time. \nUse this API to retrieve an active or inactive host report for a specified period of time. The time range for the report is limited to a month and the month should fall under the past six months. <br>You can specify the type of report and date range using the query parameters.<br>\n**Scopes:** `report:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:**<br>\n* Pro or higher plan."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nActive or inactive hosts report returned.<br>\nThis is only available for paid account: {accountId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/users?type=inactive&from=1948-05-09&to=1948-05-09&page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"users"
											],
											"query": [
												{
													"key": "type",
													"value": "inactive"
												},
												{
													"key": "from",
													"value": "1948-05-09"
												},
												{
													"key": "to",
													"value": "1948-05-09"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "page_number",
													"value": "1"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"from\": \"2019-08-14\",\n \"to\": \"2019-09-14\",\n \"page_count\": 1,\n \"page_number\": 1,\n \"page_size\": 30,\n \"total_records\": 3,\n \"total_meetings\": 2,\n \"total_participants\": 10,\n \"total_meeting_minutes\": 10,\n \"users\": [\n  {\n   \"id\": \"BzBAAAAAAAfprg\",\n   \"email\": \"example@example.com\",\n   \"user_name\": \"cbcvbvcbvbc\",\n   \"type\": 1,\n   \"dept\": \"\",\n   \"meetings\": 1,\n   \"participants\": 5,\n   \"meeting_minutes\": 5,\n   \"last_client_version\": \"4.4.1242.0623(win)\",\n   \"last_login_time\": \"2019-09-13T16:21:40Z\",\n   \"create_time\": \"2019-09-13T16:20:30Z\"\n  },\n  {\n   \"id\": \"0CAAAAA6jxcA\",\n   \"email\": \"example@example.com\",\n   \"user_name\": \"xgdzgdfg\",\n   \"type\": 1,\n   \"dept\": \"Business\",\n   \"meetings\": 0,\n   \"participants\": 0,\n   \"meeting_minutes\": 0,\n   \"last_client_version\": \"4.4.1242.0623(win)\",\n   \"last_login_time\": \"2019-07-23T00:28:00Z\",\n   \"create_time\": \"2019-07-23T00:27:34Z\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Get meeting reports",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/report/users/:userId/meetings?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit&type=past",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"users",
										":userId",
										"meetings"
									],
									"query": [
										{
											"key": "from",
											"value": "1948-05-09",
											"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
										},
										{
											"key": "to",
											"value": "1948-05-09",
											"description": "(Required) End date."
										},
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										},
										{
											"key": "type",
											"value": "past",
											"description": "The meeting types: <br>`past` - Past meetings.<br>`pastOne` - Past one user meetings. "
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
										}
									]
								},
								"description": "Retrieve [report](https://support.zoom.us/hc/en-us/articles/216378603-Meeting-Reporting) on past meetings and webinars for a specified time period. The time range for the report is limited to a month and the month must fall within the past six months.\n\nMeetings and webinars are returned only if they have two or more unique participants.  <br><br>\n**Scopes:** `report:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:**<br>\n* Pro or higher plan."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nActive or inactive hosts report returned.<br>\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/users/:userId/meetings?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit&type=past",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"users",
												":userId",
												"meetings"
											],
											"query": [
												{
													"key": "from",
													"value": "1948-05-09"
												},
												{
													"key": "to",
													"value": "1948-05-09"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "type",
													"value": "past"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"{\\n    \\\"from\\\": \\\"2019-07-14\\\",\\n    \\\"to\\\": \\\"2019-08-14\\\",\\n    \\\"page_count\\\": 1,\\n    \\\"page_size\\\": 30,\\n    \\\"total_records\\\": 9,\\n    \\\"next_page_token\\\": \\\"\\\",\\n    \\\"meetings\\\": [\\n        {\\n            \\\"uuid\\\": \\\"/lqsAAAA5VBBBw==\\\",\\n            \\\"id\\\": 12345,\\n            \\\"host_id\\\": \\\"gdfg3434dsssfss\\\",\\n            \\\"type\\\": 2,\\n            \\\"topic\\\": \\\"MyTestMeetings\\\",\\n            \\\"user_name\\\": \\\"Prashant Bhandari\\\",\\n            \\\"user_email\\\": \\\"pb@hjdskfhds.fdskhfhds\\\",\\n            \\\"start_time\\\": \\\"2019-07-15T23:24:52Z\\\",\\n            \\\"end_time\\\": \\\"2019-07-15T23:30:19Z\\\",\\n            \\\"duration\\\": 6,\\n            \\\"total_minutes\\\": 11,\\n            \\\"participants_count\\\": 2\\n        },\\n        {\\n            \\\"uuid\\\": \\\"411bbbbbbcVyw==\\\",\\n            \\\"id\\\": 000000,\\n            \\\"host_id\\\": \\\"gdfg3434dsssfss\\\",\\n            \\\"type\\\": 2,\\n            \\\"topic\\\": \\\"My Meeting\\\",\\n            \\\"user_name\\\": \\\"Raju Khanal\\\",\\n            \\\"user_email\\\": \\\"srhkdjfh@jh.fsadghjm\\\",\\n            \\\"start_time\\\": \\\"2019-07-16T17:14:39Z\\\",\\n            \\\"end_time\\\": \\\"2019-07-16T17:26:20Z\\\",\\n            \\\"duration\\\": 12,\\n            \\\"total_minutes\\\": 17,\\n            \\\"participants_count\\\": 2\\n        }\\n    ]\\n}\""
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n\n**Error Code:** `200`<br>\nThis is only available for paid account:{accountId}.<br>\n\n**Error Code:** `300`<br>\nThe next page token is invalid or expired.\n\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/users/:userId/meetings?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit&type=past",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"users",
												":userId",
												"meetings"
											],
											"query": [
												{
													"key": "from",
													"value": "1948-05-09"
												},
												{
													"key": "to",
													"value": "1948-05-09"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "type",
													"value": "past"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**\n<br>**Error Code:** `1001`<br>\nUser {userId} not exist or not belong to this account.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/users/:userId/meetings?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit&type=past",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"users",
												":userId",
												"meetings"
											],
											"query": [
												{
													"key": "from",
													"value": "1948-05-09"
												},
												{
													"key": "to",
													"value": "1948-05-09"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "type",
													"value": "past"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The user ID or email address of the user. For user-level apps, pass the `me` value for this parameter."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "meetings/{meeting Id}",
					"item": [
						{
							"name": "Get meeting detail reports",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/report/meetings/:meetingId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"meetings",
										":meetingId"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
										}
									]
								},
								"description": "Get a detailed report for a past meeting. <br>\n**Scopes:** `report:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:**<br>\n* Pro or a higher plan.<br>\n "
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nMeeting details returned.<br>\nThis is only available for paid account.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/meetings/:meetingId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"meetings",
												":meetingId"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"uuid\": \"sfsdfsdfc6122222d\",\n \"id\": 1000000,\n \"type\": 2,\n \"topic\": \"Awesome meeting\",\n \"user_name\": \"officia\",\n \"user_email\": \"example@example.com\",\n \"start_time\": \"2019-07-14T09:05:19.754Z\",\n \"end_time\": \"2019-08-14T09:05:19.754Z\",\n \"duration\": 11,\n \"total_minutes\": 11,\n \"participants_count\": 4,\n \"tracking_fields\": [\n  {\n   \"field\": \"Meeting Purpose\",\n   \"value\": \"Sales\"\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `300`<br>\nCan not access meeting information:{meetingId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/meetings/:meetingId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"meetings",
												":meetingId"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/meetings/:meetingId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"meetings",
												":meetingId"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nMeeting ID not found.<br>\n**Error Code:** `3001`<br>\nMeeting {meetingId} not found or has expired.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/meetings/:meetingId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"meetings",
												":meetingId"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get meeting participant reports",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/report/meetings/:meetingId/participants?page_size=30&next_page_token=culpa velit reprehenderit&include_fields=registrant_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"meetings",
										":meetingId",
										"participants"
									],
									"query": [
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										},
										{
											"key": "include_fields",
											"value": "registrant_id",
											"description": "Provide `registrant_id` as the value for this field if you would like to see the registrant ID attribute in the response of this API call. A registrant ID is a unique identifier of a [meeting registrant](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingregistrants).<br>\n\n"
										}
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
										}
									]
								},
								"description": "Use this API to return a report of a past meeting with two or more participants, including the host. To return a report for past meeting with only **one** participant, use the [**List meeting participants**](https://marketplace.zoom.us/docs/api-reference/zoom-api/dashboards/dashboardmeetingparticipants) API. \n\n**Note:** \n\nThis API may return empty values for participants' `user_name`, `ip_address`, `location`, and `email` responses when the account calling this API: \n* Does **not** have a signed HIPAA business associate agreement (BAA). \n* Is a [**legacy** HIPAA BAA account](https://marketplace.zoom.us/docs/api-reference/other-references/legacy-business-associate-agreements). \n\n**Scopes:** `report:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` \n\n**Prerequisites:** \n* A Pro or a higher plan."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nMeeting participants report returned.<br>\nThis is only available for paid account.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/meetings/:meetingId/participants?page_size=30&next_page_token=culpa velit reprehenderit&include_fields=registrant_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"meetings",
												":meetingId",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "include_fields",
													"value": "registrant_id"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"page_count\": \"1\",\n \"page_size\": \"30\",\n \"total_records\": \"1\",\n \"next_page_token\": \"\",\n \"participants\": [\n  {\n   \"id\": \"dskfjladjskfl\",\n   \"user_id\": \"sdfjkldsfdfgdfg\",\n   \"name\": \"Riya\",\n   \"user_email\": \"example@example.com\",\n   \"join_time\": \"2019-02-01T12:34:12.660Z\",\n   \"leave_time\": \"2019-03-01T12:34:12.660Z\",\n   \"duration\": \"20:00\"\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `300`<br>Cannot access meeting information:{meetingId}.<br>\nThe next page token is either invalid or has expired.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/meetings/:meetingId/participants?page_size=30&next_page_token=culpa velit reprehenderit&include_fields=registrant_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"meetings",
												":meetingId",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "include_fields",
													"value": "registrant_id"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/meetings/:meetingId/participants?page_size=30&next_page_token=culpa velit reprehenderit&include_fields=registrant_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"meetings",
												":meetingId",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "include_fields",
													"value": "registrant_id"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nMeeting ID not found.<br>\n**Error Code:** `3001`<br>\nMeeting  {MeetingId} not found or has expired.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/meetings/:meetingId/participants?page_size=30&next_page_token=culpa velit reprehenderit&include_fields=registrant_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"meetings",
												":meetingId",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "include_fields",
													"value": "registrant_id"
												}
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get meeting poll reports",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/report/meetings/:meetingId/polls",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"meetings",
										":meetingId",
										"polls"
									],
									"variable": [
										{
											"key": "meetingId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
										}
									]
								},
								"description": "Retrieve a report of [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) results for a past meeting. <br><br>\n**Scopes:** `report:read:admin`<br>\n \n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:**<br>\n* Pro or a higher plan.<br>\n "
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nMeeting polls report returned.<br>\nThis is only available for paid account:{accountId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/meetings/:meetingId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"meetings",
												":meetingId",
												"polls"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": 123456,\n \"uuid\": \"gsdjfhsdfkhjdsf\",\n \"status\": \"ended\",\n \"start_time\": \"2019-02-01T12:34:12.660Z\",\n \"title\": \"Learn something new\",\n \"questions\": [\n  {\n   \"name\": \"Sam S\",\n   \"email\": \"example@example.com\",\n   \"question_details\": [\n    {\n     \"question\": \"How are you?\",\n     \"answer\": \"I am wonderful.\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nMeeting ID not found.<br>\n**Error Code:** `3001`<br>\nMeeting  {meetingId} not found or has expired.<br>\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/meetings/:meetingId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"meetings",
												":meetingId",
												"polls"
											],
											"variable": [
												{
													"key": "meetingId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The meeting's ID or universally unique ID (UUID). \n* If you provide a meeting ID, the API will return a response for the latest meeting instance. \n* If you provide a meeting UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the meeting UUID before making an API request."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "webinars/{webinar Id}",
					"item": [
						{
							"name": "Get webinar detail reports",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/report/webinars/:webinarId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"webinars",
										":webinarId"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
										}
									]
								},
								"description": "Retrieve a [report](https://support.zoom.us/hc/en-us/articles/201393719-Webinar-Reporting) containing past webinar details.  <br><br>\n**Scopes:** `report:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:**<br>\n* Pro or higher plan with Webinar add-on."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nWebinar details returned.<br>\nThis is only available for paid account:{accountId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"uuid\": \"urn4fe6caeb98\",\n \"id\": 51788617,\n \"type\": 5,\n \"topic\": \"My Health Webinar\",\n \"user_name\": \"Utfdfdget\",\n \"user_email\": \"example@example.com\",\n \"start_time\": \"2019-11-18T03:15:00.056Z\",\n \"end_time\": \"2019-11-18T03:15:20.056Z\",\n \"duration\": 20,\n \"total_minutes\": 10,\n \"participants_count\": 13,\n \"tracking_fields\": [\n  {\n   \"field\": \"Webinar Purpose\",\n   \"value\": \"Health awareness\"\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `300`<br>\nCan not access webinar information:{webinarId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar ID not found.<br>\n**Error Code:** `3001`<br>\nMeeting  {meetingId} not found or has expired.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get webinar participant reports",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/report/webinars/:webinarId/participants?page_size=30&next_page_token=culpa velit reprehenderit&include_fields=registrant_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"webinars",
										":webinarId",
										"participants"
									],
									"query": [
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										},
										{
											"key": "include_fields",
											"value": "registrant_id",
											"description": "Enter 'registrant_id' as the value for this field if you would like to see the registrant ID attribute included in the response of this API call. A registrant ID is a unique identifier of a [webinar registrant](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarregistrants).<br>\n\n"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
										}
									]
								},
								"description": "Get detailed report on each attendee of a webinar.<br><br>\n**Scopes:** `report:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:**<br>\n* Pro or a higher plan with Webinar add-on enabled."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nMeeting participants report returned.<br>\nThis is only available for paid account: {accountId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId/participants?page_size=30&next_page_token=culpa velit reprehenderit&include_fields=registrant_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "include_fields",
													"value": "registrant_id"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"page_count\": \"1\",\n \"page_size\": \"30\",\n \"total_records\": \"1\",\n \"next_page_token\": \"\",\n \"participants\": [\n  {\n   \"id\": \"dskfjladjskfl\",\n   \"user_id\": \"sdfjkldsfdfgdfg\",\n   \"name\": \"Riya\",\n   \"user_email\": \"example@example.com\",\n   \"join_time\": \"2019-02-01T12:34:12.660Z\",\n   \"leave_time\": \"2019-03-01T12:34:12.660Z\",\n   \"duration\": \"20\"\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `300`<br>\nThe next page token is invalid or has expired.<br>\nCan not access the webinar information, {webinarId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId/participants?page_size=30&next_page_token=culpa velit reprehenderit&include_fields=registrant_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "include_fields",
													"value": "registrant_id"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId/participants?page_size=30&next_page_token=culpa velit reprehenderit&include_fields=registrant_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "include_fields",
													"value": "registrant_id"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar ID not found.<br>\n**Error Code:** `3001`<br>\nWebinar  {webinarId} not found or has expired.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId/participants?page_size=30&next_page_token=culpa velit reprehenderit&include_fields=registrant_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "include_fields",
													"value": "registrant_id"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get webinar poll reports",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/report/webinars/:webinarId/polls",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"webinars",
										":webinarId",
										"polls"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
										}
									]
								},
								"description": "Retrieve a report on past [webinar polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).<br><br>\n**Scopes:** `report:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:**<br>\n* Pro or a higher plan with Webinar add-on enabled."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nWebinar polls report returned.<br>\nMissing webinar subscription plan.<br>\nThis is only available for paid account:{accountId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId",
												"polls"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": 123456,\n \"uuid\": \"gsdjfhsdfkhjdsf\",\n \"status\": \"ended\",\n \"start_time\": \"2019-02-01T12:34:12.660Z\",\n \"title\": \"Learn something new\",\n \"questions\": [\n  {\n   \"name\": \"Sam S\",\n   \"email\": \"example@example.com\",\n   \"question_details\": [\n    {\n     \"question\": \"How are you?\",\n     \"answer\": \"I am wonderful.\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId",
												"polls"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar ID not found.<br>\n**Error Code:** `3001`<br>\nWebinar  {webinarId} not found or has expired.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId",
												"polls"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get webinar Q&A report",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/report/webinars/:webinarId/qa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"webinars",
										":webinarId",
										"qa"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
										}
									]
								},
								"description": "The Question & Answer (Q&A) feature for webinars allows attendees to ask questions during the webinar and for the panelists, co-hosts and host to answer their questions.\n\nUse this API to retrieve a report on question and answers from past webinars. <br><br>\n**Scopes:** `report:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:**<br>\n* Pro or a higher plan with Webinar add-on enabled."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nWebinar Q&A report returned.<br>\nThis is only available for paid account:{accountId}.<br>\nA report cannot be generated for this account because this account has not subscribed to a webinar plan.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId/qa",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId",
												"qa"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": 14321,\n \"uuid\": \"urgvhge945\",\n \"start_time\": \"2019-02-01T12:34:12.660Z\",\n \"questions\": [\n  {\n   \"name\": \"Harry S\",\n   \"email\": \"example@example.com\",\n   \"question_details\": [\n    {\n     \"question\": \"How often will you hold this webinar?\",\n     \"answer\": \"Once a month.\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId/qa",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId",
												"qa"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar ID not found.<br>\n**Error Code:** `1001`<br>\nUser does not exist: {userId}.<br>\n**Error Code:** `3001`<br>\nWebinar  {webinarId} not found or has expired.<br>\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/webinars/:webinarId/qa",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"webinars",
												":webinarId",
												"qa"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "billing",
					"item": [
						{
							"name": "Get billing reports",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/report/billing",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"billing"
									]
								},
								"description": "Get department billing reports of a Zoom account.\n\n**Prerequisites:**<br>\n* Pro or a higher account with Department Billing option enabled. Contact Zoom Support team for details.\n\n**Scopes:** `report:read:admin`, `report:master`\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nBilling report returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/billing",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"billing"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"billing_reports\": [\n  {\n   \"id\": \"indfhgfhfho\",\n   \"start_date\": \"2020-01-01\",\n   \"end_date\": \"2020-01-31\",\n   \"total_amount\": \"1500\",\n   \"tax_amount\": \"25\",\n   \"type\": 0\n  },\n  {\n   \"id\": \"dfhjkdgsds\",\n   \"start_date\": \"2019-12-24\",\n   \"end_date\": \"2020-01-23\",\n   \"total_amount\": \"2000\",\n   \"tax_amount\": \"38\",\n   \"type\": 1\n  }\n ],\n \"currency\": \"USD\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `200`<br> No permission.\n\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/billing",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"billing"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get billing invoice reports",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/report/billing/invoices?billing_id=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"billing",
										"invoices"
									],
									"query": [
										{
											"key": "billing_id",
											"value": "culpa velit reprehenderit",
											"description": "Unique Identifier of the Billing Report. Retrieve this ID from the response of **Get Billing Reports** API request. \n\n"
										}
									]
								},
								"description": "Get department billing invoices reports for a specific billing period. Provide the `billing_id` of the billing period for which you would like to retrieve the invoices for. This ID can be retrieved from **Get Billing Reports** API. \n\n**Prerequisites:**<br>\n* Pro or a higher account with Department Billing option enabled. Contact the Zoom Support team to enable this feature.\n\n**Scopes:** `report:read:admin`, `report:master`\n\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nBilling Invoice reports returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/billing/invoices?billing_id=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"billing",
												"invoices"
											],
											"query": [
												{
													"key": "billing_id",
													"value": "culpa velit reprehenderit"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"invoices\": [\n  {\n   \"invoice_number\": \"1234665\",\n   \"invoice_charge_name\": \"Audio Conferencing Options\",\n   \"quantity\": 5,\n   \"total_amount\": \"150000\",\n   \"tax_amount\": \"1000\",\n   \"start_date\": \"2019-12-12\",\n   \"end_date\": \"2020-01-12\"\n  }\n ],\n \"currency\": \"USD\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `5010`<br>\nReport does not exist.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/billing/invoices?billing_id=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"billing",
												"invoices"
											],
											"query": [
												{
													"key": "billing_id",
													"value": "culpa velit reprehenderit"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "chat/sessions",
					"item": [
						{
							"name": "Get chat sessions reports",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/report/chat/sessions?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"chat",
										"sessions"
									],
									"query": [
										{
											"key": "from",
											"value": "1948-05-09",
											"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
										},
										{
											"key": "to",
											"value": "1948-05-09",
											"description": "(Required) End date."
										},
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										}
									]
								},
								"description": "Use this API to get Zoom Chat session reports for a specified period of time. The monthly date range **must** be within the last six months.\n\n**Scopes:** `report_chat:read:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`\n\n**Prerequisites:** \n* A Pro or higher plan \n* Report chat permissions."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` <br>\nArchived chat sessions returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/chat/sessions?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"chat",
												"sessions"
											],
											"query": [
												{
													"key": "from",
													"value": "1948-05-09"
												},
												{
													"key": "to",
													"value": "1948-05-09"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"from\": \"2019-08-31\",\n \"to\": \"2019-09-12\",\n \"page_size\": 30,\n \"next_page_token\": \"vsdfjesfdhs\",\n \"sessions\": [\n  {\n   \"id\": \"dkhfgjd\",\n   \"type\": \"Group\",\n   \"name\": \"API overview meeting\",\n   \"last_message_sent_time\": \"2016-12-16T05:04:08.470Z\"\n  }\n ]\n}"
								},
								{
									"name": "**Error Code:** `300` <br>\nThe next page token is invalid or expired. <br>\nReport requested exceeds 6 month limit.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/chat/sessions?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"chat",
												"sessions"
											],
											"query": [
												{
													"key": "from",
													"value": "1948-05-09"
												},
												{
													"key": "to",
													"value": "1948-05-09"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get chat messages reports",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/report/chat/sessions/:sessionId?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit&include_fields=deleted_messages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"chat",
										"sessions",
										":sessionId"
									],
									"query": [
										{
											"key": "from",
											"value": "1948-05-09",
											"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
										},
										{
											"key": "to",
											"value": "1948-05-09",
											"description": "(Required) End date."
										},
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										},
										{
											"key": "include_fields",
											"value": "deleted_messages",
											"description": "Return all edited and deleted messages. The API only returns this value if the `include_fields` query parameter contains the `edited_messages` and/or the `deleted_messages` values.\n\nTo include **both** edited and deleted messages, comma-separate both values."
										}
									],
									"variable": [
										{
											"key": "sessionId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Chat session ID."
										}
									]
								},
								"description": "Use this API to get Zoom Chat message reports for a specified period of time. The monthly date range must be within the last six months.\n\n**Scopes:** `report_chat:read:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n**Prerequisites:** \n* A Pro or higher plan \n* Report chat permissions"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` <br>\nArchived chat messages returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/chat/sessions/:sessionId?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit&include_fields=deleted_messages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"chat",
												"sessions",
												":sessionId"
											],
											"query": [
												{
													"key": "from",
													"value": "1948-05-09"
												},
												{
													"key": "to",
													"value": "1948-05-09"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "include_fields",
													"value": "deleted_messages"
												}
											],
											"variable": [
												{
													"key": "sessionId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Chat session ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"from\": \"string [date]\",\n \"to\": \"string [date]\",\n \"page_size\": \"integer\",\n \"next_page_token\": \"string\",\n \"messages\": [\n  {\n   \"id\": \"0fbd238a0519d3abb0e4ce\",\n   \"message\": \"I am good.\",\n   \"sender\": \"user@example.com\",\n   \"date_time\": \"2019-09-17T20:25:17Z\",\n   \"reply_main_message_id\": \"{52400403-DA96-4D7B-9E05-C1C399FF0725}\",\n   \"reply_main_message_timestamp\": \"1568751917976\"\n  }\n ],\n \"edited_messages\": [\n  {\n   \"id\": \"0fbd238a0519d3abb0e4ce\",\n   \"message\": \"I am good.\",\n   \"sender\": \"user@example.com\",\n   \"date_time\": \"2019-09-17T20:25:17Z\",\n   \"reply_main_message_id\": \"{52400403-DA96-4D7B-9E05-C1C399FF0725}\",\n   \"reply_main_message_timestamp\": \"1568751917976\"\n  }\n ],\n \"deleted_messages\": [\n  {\n   \"id\": \"0fbd238a0519d3abb0e4ce\",\n   \"message\": \"I am good.\",\n   \"sender\": \"user@example.com\",\n   \"date_time\": \"2019-09-17T20:25:17Z\",\n   \"reply_main_message_id\": \"{52400403-DA96-4D7B-9E05-C1C399FF0725}\",\n   \"reply_main_message_timestamp\": \"1568751917976\"\n  }\n ]\n}"
								},
								{
									"name": "**Error Code:**`300` <br>\nThe next page token is either invalid or has expired.<br>\nReport requested exceeds 6 month limit.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/report/chat/sessions/:sessionId?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit&include_fields=deleted_messages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"report",
												"chat",
												"sessions",
												":sessionId"
											],
											"query": [
												{
													"key": "from",
													"value": "1948-05-09"
												},
												{
													"key": "to",
													"value": "1948-05-09"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "include_fields",
													"value": "deleted_messages"
												}
											],
											"variable": [
												{
													"key": "sessionId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Chat session ID."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Get daily usage report",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/report/daily?year=-14804147&month=-14804147",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"report",
								"daily"
							],
							"query": [
								{
									"key": "year",
									"value": "-14804147",
									"description": "Year for this report"
								},
								{
									"key": "month",
									"value": "-14804147",
									"description": "Month for this report"
								}
							]
						},
						"description": "Retrieve daily report to access the account-wide usage of Zoom services for each day in a given month. It lists the number of new users, meetings, participants, and meeting minutes.<br>\n**Prerequisites**<br>\n* Pro or higher plan.<br>\n**Scopes:** `report:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nDaily report retrieved.<br>\nThis is only available for paid accounts:{accountId}.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/daily?year=-14804147&month=-14804147",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"daily"
									],
									"query": [
										{
											"key": "year",
											"value": "-14804147"
										},
										{
											"key": "month",
											"value": "-14804147"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"year\": 2019,\n \"month\": 6,\n \"dates\": [\n  {\n   \"date\": \"2019-06-01\",\n   \"new_users\": 3,\n   \"meetings\": 10,\n   \"participants\": 20,\n   \"meeting_minutes\": 100\n  },\n  {\n   \"date\": \"2019-06-02\",\n   \"new_users\": 0,\n   \"meetings\": 20,\n   \"participants\": 80,\n   \"meeting_minutes\": 200\n  },\n  {\n   \"date\": \"2019-06-03\",\n   \"new_users\": 10,\n   \"meetings\": 35,\n   \"participants\": 100,\n   \"meeting_minutes\": 380\n  }\n ]\n}"
						},
						{
							"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `300`<br> \nDaily report can only be provided for a month that falls within the recent 6 months.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/daily?year=-14804147&month=-14804147",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"daily"
									],
									"query": [
										{
											"key": "year",
											"value": "-14804147"
										},
										{
											"key": "month",
											"value": "-14804147"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get telephone reports",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/report/telephone?type=1&query_date_type=start_time&from=1948-05-09&to=1948-05-09&page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"report",
								"telephone"
							],
							"query": [
								{
									"key": "type",
									"value": "1",
									"description": "Audio types:<br>`1` - Toll-free Call-in & Call-out.<br>`2` - Toll <br>\n`3` - SIP Connected Audio"
								},
								{
									"key": "query_date_type",
									"value": "start_time",
									"description": "The type of date to query: \n* `start_time` — Query by call start time. \n* `end_time` — Query by call end time. \n* `meeting_start_time` — Query by meeting start time. \n* `meeting_end_time` — Query by meeting end time. \n\nThis value defaults to `start_time`."
								},
								{
									"key": "from",
									"value": "1948-05-09",
									"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
								},
								{
									"key": "to",
									"value": "1948-05-09",
									"description": "(Required) End date."
								},
								{
									"key": "page_size",
									"value": "30",
									"description": "The number of records returned within a single API call."
								},
								{
									"key": "page_number",
									"value": "1",
									"description": "The page number of the current page in the returned records. This field is **not** available if the `query_date_type` parameter is the `meeting_start_time` or `meeting_end_time` value. \n\n**DEPRECATED** — This field is deprecated and we will no longer support it in a future release. Instead, use the `next_page_token` query parameter for pagination."
								},
								{
									"key": "next_page_token",
									"value": "culpa velit reprehenderit",
									"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
								}
							]
						},
						"description": "The [telephone report](https://support.zoom.us/hc/en-us/articles/206514816-Telephone-reports) allows you to view who dialed into meetings via phone (Audio Conferencing or SIP Connected Audio) and which number they dialed into and other details. Use this API to get telephone report for a specified period of time.\n\n**Scopes:** `report:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>**Prerequisites:**<br>\n* Pro or higher plan."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nTelephone report returned.<br>\nThis is only available for paid account:{accountId}.<br>\nThe requested report cannot be generated for this account because this account has not subscribed to toll-free audio conference plan.<b",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/telephone?type=1&query_date_type=start_time&from=1948-05-09&to=1948-05-09&page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"telephone"
									],
									"query": [
										{
											"key": "type",
											"value": "1"
										},
										{
											"key": "query_date_type",
											"value": "start_time"
										},
										{
											"key": "from",
											"value": "1948-05-09"
										},
										{
											"key": "to",
											"value": "1948-05-09"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "page_number",
											"value": "1"
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"{\\n  \\\"from\\\": \\\"2019-06-20\\\",\\n  \\\"to\\\": \\\"2019-07-20\\\",\\n  \\\"page_count\\\": 1,\\n  \\\"page_number\\\": 1,\\n  \\\"page_size\\\": 30,\\n  \\\"total_records\\\": 1,\\n  \\\"telephony_usage\\\": [\\n    {\\n      \\\"meeting_id\\\": 00000,\\n      \\\"phone_number\\\": \\\"000002001\\\",\\n      \\\"host_name\\\": \\\"John Dev\\\",\\n      \\\"host_email\\\": \\\"example@example.com\\\",\\n      \\\"dept\\\": \\\"Billing\\\",\\n      \\\"start_time\\\": \\\"2019-07-15T23:24:52Z\\\",\\n      \\\"end_time\\\": \\\"2019-07-15T23:30:19Z\\\",\\n      \\\"duration\\\": 6,\\n      \\\"total\\\": 11,\\n      \\\"country_name\\\": \\\"Macau SAR\\\",\\n      \\\"meeting_type\\\": \\\"Meeting\\\",\\n      \\\"call_in_number\\\": \\\"+85123456789\\\"\\n    }\\n  ]\\n}\""
						}
					]
				},
				{
					"name": "Get cloud recording usage report",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/report/cloud_recording?from=1948-05-09&to=1948-05-09",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"report",
								"cloud_recording"
							],
							"query": [
								{
									"key": "from",
									"value": "1948-05-09",
									"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
								},
								{
									"key": "to",
									"value": "1948-05-09",
									"description": "(Required) End date."
								}
							]
						},
						"description": "Retrieve cloud recording usage report for a specified period. You can only get cloud recording reports that is one day ealier than the current date and for the most recent period of 6 months. The date gap between from and to dates should be smaller or equal to 30 days. <br>\n**Prerequisites**<br>\n* Pro or higher plan.<br>\n**Scopes:** `report:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nCloud Recording Report Returned",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/cloud_recording?from=1948-05-09&to=1948-05-09",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"cloud_recording"
									],
									"query": [
										{
											"key": "from",
											"value": "1948-05-09"
										},
										{
											"key": "to",
											"value": "1948-05-09"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"from\": \"2019-09-14\",\n \"to\": \"2019-09-14\",\n \"cloud_recording_storage\": [\n  {\n   \"date\": \"2019-09-14\",\n   \"usage\": \"29 MB\",\n   \"plan_usage\": \"0\",\n   \"free_usage\": \"1 GB\"\n  }\n ]\n}"
						},
						{
							"name": "**HTTP Status Code:** `300`<br>\nOnly provide report in recent 6 months",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/cloud_recording?from=1948-05-09&to=1948-05-09",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"cloud_recording"
									],
									"query": [
										{
											"key": "from",
											"value": "1948-05-09"
										},
										{
											"key": "to",
											"value": "1948-05-09"
										}
									]
								}
							},
							"status": "Multiple Choices",
							"code": 300,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get operation logs report",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/report/operationlogs?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit&category_type=phone_contacts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"report",
								"operationlogs"
							],
							"query": [
								{
									"key": "from",
									"value": "1948-05-09",
									"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
								},
								{
									"key": "to",
									"value": "1948-05-09",
									"description": "(Required) End date."
								},
								{
									"key": "page_size",
									"value": "30",
									"description": "The number of records returned within a single API call."
								},
								{
									"key": "next_page_token",
									"value": "culpa velit reprehenderit",
									"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
								},
								{
									"key": "category_type",
									"value": "phone_contacts",
									"description": "**Optional**<br>\nFilter your response by a category type to see reports for a specific category.\nThe value for this field can be one of the following:<br> `all`<br>`user`<br>`user_settings`<br>`account`<br>`billing`<br>`im`<br>`recording`<br>`phone_contacts`<br>`webinar`<br>`sub_account`<br>`role`<br>`zoom_rooms`"
								}
							]
						},
						"description": "The [Operations Logs](https://support.zoom.us/hc/en-us/articles/360032748331-Operation-Logs) report allows you to audit admin and user activity, such as adding a new user, changing account settings, and deleting recordings.<br>\nUse this API to retrieve operation logs report for a specified period of time.<br>\n**Scopes:** `report:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n**Prerequisites:**<br>\n* Pro or higher plan."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nOperation Logs Report Returned",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/operationlogs?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit&category_type=phone_contacts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"operationlogs"
									],
									"query": [
										{
											"key": "from",
											"value": "1948-05-09"
										},
										{
											"key": "to",
											"value": "1948-05-09"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "category_type",
											"value": "phone_contacts"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"from\": \"2019-08-14\",\n \"to\": \"2019-09-14\",\n \"page_size\": 30,\n \"next_page_token\": \"czxcxdvxvddc\",\n \"operation_logs\": [\n  {\n   \"time\": \"2019-08-20T19:09:01Z\",\n   \"operator\": \"someuser@sfksfhksdfsf.com\",\n   \"category_type\": \"User\",\n   \"action\": \"Update\",\n   \"operation_detail\": \"Activate User sjkfhdsf@jdfgkhgd.com \"\n  },\n  {\n   \"time\": \"2019-08-20T18:59:56Z\",\n   \"operator\": \"anotheruser@sfhidshfidshufds.com\",\n   \"category_type\": \"User\",\n   \"action\": \"Update\",\n   \"operation_detail\": \"Deactivate User mynewemail@jdfkdshfhjdsf.ffasdm \"\n  }\n ]\n}"
						},
						{
							"name": "**HTTP Status Code:** `300`<br>Only provide report in recent 6 months",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/operationlogs?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit&category_type=phone_contacts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"operationlogs"
									],
									"query": [
										{
											"key": "from",
											"value": "1948-05-09"
										},
										{
											"key": "to",
											"value": "1948-05-09"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "category_type",
											"value": "phone_contacts"
										}
									]
								}
							},
							"status": "Multiple Choices",
							"code": 300,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get upcoming events report",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/report/upcoming_events?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit&type=all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"report",
								"upcoming_events"
							],
							"query": [
								{
									"key": "from",
									"value": "1948-05-09",
									"description": "(Required) Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once."
								},
								{
									"key": "to",
									"value": "1948-05-09",
									"description": "(Required) End date."
								},
								{
									"key": "page_size",
									"value": "30",
									"description": "The number of records returned within a single API call."
								},
								{
									"key": "next_page_token",
									"value": "culpa velit reprehenderit",
									"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
								},
								{
									"key": "type",
									"value": "all",
									"description": "The type of event to query: \n* `meeting` — A meeting event. \n* `webinar` — A webinar event. \n* `all` — Both meeting and webinar events.\n\nThis value defaults to `all`."
								}
							]
						},
						"description": "Use this API to list upcoming meeting and/or webinar events within a specified period of time. The report's time range is limited to one month and must also be within the past six months.\n\n**Scopes:** `report:read:admin`<br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`\n\n**Prerequisites:** \n* A Pro or higher plan"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nUpcoming events report returned.<br>\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/upcoming_events?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit&type=all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"upcoming_events"
									],
									"query": [
										{
											"key": "from",
											"value": "1948-05-09"
										},
										{
											"key": "to",
											"value": "1948-05-09"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "type",
											"value": "all"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"from\": \"2019-07-14\",\n \"to\": \"2019-08-14\",\n \"page_size\": 30,\n \"next_page_token\": \"token\",\n \"upcoming_events\": [\n  {\n   \"id\": 12345,\n   \"start_time\": \"08/24/2021 16:00\",\n   \"topic\": \"topic\",\n   \"host_id\": \"host_id\",\n   \"host_name\": \"Ming\",\n   \"dept\": \"dept\"\n  }\n ]\n}"
						},
						{
							"name": "**HTTP Status Code:** `400` <br> Bad Request <br> **Error Code:** `200` <br> This is only available for the paid account: {accountId} <br> **Error Code:** `300`<br> The next page token is invalid or expired.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/upcoming_events?from=1948-05-09&to=1948-05-09&page_size=30&next_page_token=culpa velit reprehenderit&type=all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"upcoming_events"
									],
									"query": [
										{
											"key": "from",
											"value": "1948-05-09"
										},
										{
											"key": "to",
											"value": "1948-05-09"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "type",
											"value": "all"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get sign In / sign out activity report",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/report/activities?from=1948-05-09&to=1948-05-09&page_size=-14804147&next_page_token=culpa velit reprehenderit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"report",
								"activities"
							],
							"query": [
								{
									"key": "from",
									"value": "1948-05-09",
									"description": "Start date for which you would like to view the activity logs report. Using the `from` and `to` parameters, specify a monthly date range for the report as the API only provides one month worth of data in one request. The specified date range should fall within the last six months."
								},
								{
									"key": "to",
									"value": "1948-05-09",
									"description": "End date up to which you would like to view the activity logs report."
								},
								{
									"key": "page_size",
									"value": "-14804147",
									"description": "The number of records to be returned within a single API call"
								},
								{
									"key": "next_page_token",
									"value": "culpa velit reprehenderit",
									"description": "Next page token is used to paginate through large result sets"
								}
							]
						},
						"description": "Retrieve a list of sign in / sign out activity logs [report](https://support.zoom.us/hc/en-us/articles/201363213-Getting-Started-with-Reports) of users under a Zoom account.<br>\n**Prerequisites**<br>\n* Pro or higher plan.<br>\n**Scopes:** `report:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nSuccess",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/report/activities?from=1948-05-09&to=1948-05-09&page_size=-14804147&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"report",
										"activities"
									],
									"query": [
										{
											"key": "from",
											"value": "1948-05-09"
										},
										{
											"key": "to",
											"value": "1948-05-09"
										},
										{
											"key": "page_size",
											"value": "-14804147"
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"{\\n            \\\"email\\\": \\\"sfkjsldfhjdsf@dskjflhdsf.com\\\",\\n            \\\"time\\\": \\\"2019-09-15T20:56:09Z\\\",\\n            \\\"type\\\": \\\"Sign in\\\",\\n            \\\"ip_address\\\": \\\"38.99.100.6\\\",\\n            \\\"client_type\\\": \\\"Browser\\\",\\n            \\\"version\\\": \\\"-\\\"\\n        },\\n        {\\n            \\\"email\\\": \\\"dfdsfdfdf@gidfdfdl.com\\\",\\n            \\\"time\\\": \\\"2019-09-15T19:13:41Z\\\",\\n            \\\"type\\\": \\\"Sign in\\\",\\n            \\\"ip_address\\\": \\\"38.99.100.6\\\",\\n            \\\"client_type\\\": \\\"Browser\\\",\\n            \\\"version\\\": \\\"-\\\"\\n        },\\n        {\\n            \\\"email\\\": \\\"fdfdfdf@gfdgfdgdsfg.com\\\",\\n            \\\"time\\\": \\\"2019-09-15T18:50:15Z\\\",\\n            \\\"type\\\": \\\"Sign out\\\",\\n            \\\"ip_address\\\": \\\"38.99.100.6\\\",\\n            \\\"client_type\\\": \\\"Browser\\\",\\n            \\\"version\\\": \\\"-\\\"\\n        }\""
						}
					]
				}
			]
		},
		{
			"name": "roles",
			"item": [
				{
					"name": "{role Id}",
					"item": [
						{
							"name": "members",
							"item": [
								{
									"name": "List members in a role",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:roleId/members?page_count=culpa velit reprehenderit&page_number=1&next_page_token=culpa velit reprehenderit&page_size=30",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":roleId",
												"members"
											],
											"query": [
												{
													"key": "page_count",
													"value": "culpa velit reprehenderit",
													"description": "The number of pages returned for this request."
												},
												{
													"key": "page_number",
													"value": "1",
													"description": "\n**Deprecated** - This field has been deprecated and we will stop supporting it completely in a future release. Please use \"next_page_token\" for pagination instead of this field.\n\nThe page number of the current page in the returned records."
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit",
													"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
												},
												{
													"key": "page_size",
													"value": "30",
													"description": "The number of records returned within a single API call."
												}
											],
											"variable": [
												{
													"key": "roleId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The role ID"
												}
											]
										},
										"description": "User [roles](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) can have a set of permissions that allows access only to the pages a user needs to view or edit. Use this API to list all the members that are assigned a specific role.\n\n**Scope:** `role:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>**Prerequisites:**<br>\n* A Pro or a higher plan."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nSuccess",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/roles/:roleId/members?page_count=culpa velit reprehenderit&page_number=1&next_page_token=culpa velit reprehenderit&page_size=30",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"roles",
														":roleId",
														"members"
													],
													"query": [
														{
															"key": "page_count",
															"value": "culpa velit reprehenderit"
														},
														{
															"key": "page_number",
															"value": "1"
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit"
														},
														{
															"key": "page_size",
															"value": "30"
														}
													],
													"variable": [
														{
															"key": "roleId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The role ID"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"page_count\": 1,\n \"page_number\": 1,\n \"page_size\": 30,\n \"total_records\": 1,\n \"members\": [\n  {\n   \"id\": \"zadksadjBBBBBBB8uQ\",\n   \"email\": \"example@example.com\",\n   \"first_name\": \"Taylor\",\n   \"last_name\": \"Gomez\",\n   \"type\": 2,\n   \"department\": \"Chemistry\"\n  }\n ]\n}"
										},
										{
											"name": "**HTTP Status Code:** `404`<br>Role not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/roles/:roleId/members?page_count=culpa velit reprehenderit&page_number=1&next_page_token=culpa velit reprehenderit&page_size=30",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"roles",
														":roleId",
														"members"
													],
													"query": [
														{
															"key": "page_count",
															"value": "culpa velit reprehenderit"
														},
														{
															"key": "page_number",
															"value": "1"
														},
														{
															"key": "next_page_token",
															"value": "culpa velit reprehenderit"
														},
														{
															"key": "page_size",
															"value": "30"
														}
													],
													"variable": [
														{
															"key": "roleId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The role ID"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Assign a role",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "members",
													"value": "[{\"id\":\"eiusmod in\",\"email\":\"YaD@mpMpwBluooYiKEUzDTnOxtVTw.ufg\"},{\"id\":\"labore\",\"email\":\"xNBIFk9@dWakLPYfJrUMTJyVXzaxGFmJLRHs.khlq\"}]",
													"description": "Array of userId/user email of users to whom you would like to assign this role. Upto 30 users can be assigned a role at once.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/roles/:roleId/members",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":roleId",
												"members"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The role ID"
												}
											]
										},
										"description": "User [roles](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) can have a set of permissions that allows access only to the pages a user needs to view or edit. Use this API to [assign a role](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control#h_748b6fd8-5057-4cf4-bbfd-787909c09db0) to members.\n\n**Scopes:** `role:write:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n**Prerequisites:**<br>\n* A Pro or a higher plan."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `201`<br>Members Added",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "members",
															"value": "[{\"id\":\"eiusmod in\",\"email\":\"YaD@mpMpwBluooYiKEUzDTnOxtVTw.ufg\"},{\"id\":\"labore\",\"email\":\"xNBIFk9@dWakLPYfJrUMTJyVXzaxGFmJLRHs.khlq\"}]",
															"description": "Array of userId/user email of users to whom you would like to assign this role. Upto 30 users can be assigned a role at once.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/roles/:roleId/members",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"roles",
														":roleId",
														"members"
													],
													"variable": [
														{
															"key": "roleId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The role ID"
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Location",
													"value": "culpa velit reprehenderit",
													"description": "Location of created members"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"ids\": \"nulla in ad\",\n \"add_at\": \"1996-03-28T07:26:48.801Z\"\n}"
										},
										{
											"name": "**HTTP Status Code:** `400`<br>\n\n**Error Code:** `1034`\nRole does not exist.<br><br>\n**Error Code:** `300`<br>\nRoleId required.<br>\nCan’t delete or add members for Normal/Owner roles.<br><br>",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "members",
															"value": "[{\"id\":\"eiusmod in\",\"email\":\"YaD@mpMpwBluooYiKEUzDTnOxtVTw.ufg\"},{\"id\":\"labore\",\"email\":\"xNBIFk9@dWakLPYfJrUMTJyVXzaxGFmJLRHs.khlq\"}]",
															"description": "Array of userId/user email of users to whom you would like to assign this role. Upto 30 users can be assigned a role at once.",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/roles/:roleId/members",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"roles",
														":roleId",
														"members"
													],
													"variable": [
														{
															"key": "roleId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The role ID"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Unassign a role",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/roles/:roleId/members/:memberId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":roleId",
												"members",
												":memberId"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The role ID"
												},
												{
													"key": "memberId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Member's ID"
												}
											]
										},
										"description": "User [roles](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) can have a set of permissions that allows access only to the pages a user needs to view or edit. Use this API to unassign a user's role.\n\n**Scope:** `role:write:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n**Prerequisites:**<br>\n* A Pro or a higher plan."
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204`<br>\nRole withdrawn from user.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/roles/:roleId/members/:memberId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"roles",
														":roleId",
														"members",
														":memberId"
													],
													"variable": [
														{
															"key": "roleId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The role ID"
														},
														{
															"key": "memberId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Member's ID"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>Role or Member not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/roles/:roleId/members/:memberId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"roles",
														":roleId",
														"members",
														":memberId"
													],
													"variable": [
														{
															"key": "roleId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The role ID"
														},
														{
															"key": "memberId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) Member's ID"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get role information",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/roles/:roleId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles",
										":roleId"
									],
									"variable": [
										{
											"key": "roleId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Role Id. "
										}
									]
								},
								"description": "Each Zoom user automatically has a role which can either be owner, administrator, or a member. Account Owners and users with edit privileges for Role management can add customized roles with a list of privileges.\n\nUse this API to get information including specific privileges assigned to a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control).<br>\n**Pre-requisite:**<br>\n* A Pro or higher plan.<br>\n* For role management and updates, you must be the Account Owner or user with role management permissions.\n\n**Scopes:** `role:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**Status Code:** `200`<br>\nInformation about a specific role returned.\n\n**Error Code:** `200`<br>\nYou do not have the permission to retrieve role information.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/roles/:roleId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Role Id. "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"laboris cupidatat amet\",\n \"name\": \"ipsum sint dolore\",\n \"description\": \"esse\",\n \"total_members\": -88351821,\n \"privileges\": [\n  \"elit deserunt velit\",\n  \"deserunt enim occaecat\"\n ],\n \"sub_account_privileges\": {\n  \"second_level\": -72610257\n }\n}"
								},
								{
									"name": "**Error Code:** `300`<br>\nRole not found.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/roles/:roleId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Role Id. "
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update role information",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "id",
											"value": "cupidatat aliquip occaecat",
											"description": "Role Id.",
											"type": "text"
										},
										{
											"key": "name",
											"value": "in veniam",
											"description": "Name of the role.",
											"type": "text"
										},
										{
											"key": "description",
											"value": "labore fu",
											"description": "Description of the role.",
											"type": "text"
										},
										{
											"key": "total_members",
											"value": "85720149",
											"description": "Total members assigned to that role.",
											"type": "text"
										},
										{
											"key": "privileges",
											"value": "[\"dolor eu ea nostrud\",\"sunt Excepteur magna laborum\"]",
											"description": "Privileges assigned to the role. Can be one or a combination of [these permissions](https://marketplace.zoom.us/docs/api-reference/other-references/privileges).\n",
											"type": "text"
										},
										{
											"key": "sub_account_privileges",
											"value": "{\"second_level\":-76589145}",
											"description": "This field will only be displayed to accounts that are enrolled in the partner plan and follow master accounts and sub accounts structure.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/roles/:roleId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles",
										":roleId"
									],
									"variable": [
										{
											"key": "roleId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Role Id"
										}
									]
								},
								"description": "Each Zoom user automatically has a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) which can either be owner, administrator, or a member. Account Owners and users with edit privileges for Role management can add customized roles with a list.\n\nUse this API to change the privileges, name and description of a specific role.<br>\n**Pre-requisite:**<br>\n* A Pro or higher plan.<br>\n* For role management and updates, you must be the Account Owner or user with role management permissions.<br>**Scopes:** `role:write:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**Error Code:** `200`<br>\nThe account must be a paid account to update the role.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "id",
													"value": "in nostrud elit laboris",
													"description": "Role Id.",
													"type": "text"
												},
												{
													"key": "name",
													"value": "ullamco mollit no",
													"description": "Name of the role.",
													"type": "text"
												},
												{
													"key": "description",
													"value": "pariatur tempor",
													"description": "Description of the role.",
													"type": "text"
												},
												{
													"key": "total_members",
													"value": "82370022",
													"description": "Total members assigned to that role.",
													"type": "text"
												},
												{
													"key": "privileges",
													"value": "[\"esse et eiusmod ex\",\"nostru\"]",
													"description": "Privileges assigned to the role. Can be one or a combination of [these permissions](https://marketplace.zoom.us/docs/api-reference/other-references/privileges).\n",
													"type": "text"
												},
												{
													"key": "sub_account_privileges",
													"value": "{\"second_level\":90267955}",
													"description": "This field will only be displayed to accounts that are enrolled in the partner plan and follow master accounts and sub accounts structure.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/roles/:roleId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Role Id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "**Status Code:** `400`<br>\nRole updated.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "id",
													"value": "in nostrud elit laboris",
													"description": "Role Id.",
													"type": "text"
												},
												{
													"key": "name",
													"value": "ullamco mollit no",
													"description": "Name of the role.",
													"type": "text"
												},
												{
													"key": "description",
													"value": "pariatur tempor",
													"description": "Description of the role.",
													"type": "text"
												},
												{
													"key": "total_members",
													"value": "82370022",
													"description": "Total members assigned to that role.",
													"type": "text"
												},
												{
													"key": "privileges",
													"value": "[\"esse et eiusmod ex\",\"nostru\"]",
													"description": "Privileges assigned to the role. Can be one or a combination of [these permissions](https://marketplace.zoom.us/docs/api-reference/other-references/privileges).\n",
													"type": "text"
												},
												{
													"key": "sub_account_privileges",
													"value": "{\"second_level\":90267955}",
													"description": "This field will only be displayed to accounts that are enrolled in the partner plan and follow master accounts and sub accounts structure.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/roles/:roleId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Role Id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Error Code:** `300`\nThis role cannot be updated.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "id",
													"value": "in nostrud elit laboris",
													"description": "Role Id.",
													"type": "text"
												},
												{
													"key": "name",
													"value": "ullamco mollit no",
													"description": "Name of the role.",
													"type": "text"
												},
												{
													"key": "description",
													"value": "pariatur tempor",
													"description": "Description of the role.",
													"type": "text"
												},
												{
													"key": "total_members",
													"value": "82370022",
													"description": "Total members assigned to that role.",
													"type": "text"
												},
												{
													"key": "privileges",
													"value": "[\"esse et eiusmod ex\",\"nostru\"]",
													"description": "Privileges assigned to the role. Can be one or a combination of [these permissions](https://marketplace.zoom.us/docs/api-reference/other-references/privileges).\n",
													"type": "text"
												},
												{
													"key": "sub_account_privileges",
													"value": "{\"second_level\":90267955}",
													"description": "This field will only be displayed to accounts that are enrolled in the partner plan and follow master accounts and sub accounts structure.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/roles/:roleId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Role Id"
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a role",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/roles/:roleId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles",
										":roleId"
									],
									"variable": [
										{
											"key": "roleId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Role Id."
										}
									]
								},
								"description": "Each Zoom user automatically has a role which can either be owner, administrator, or a member. Account Owners and users with edit privileges for Role management can add customized roles with a list.\n\nUse this API to delete a role.<br>\n**Pre-requisite:**<br>\n* A Pro or higher plan.<br>\n* For role management and updates, you must be the Account Owner or user with role management permissions.\n\n**Scopes:** `role:write:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
							},
							"response": [
								{
									"name": "**Error Code:** `200`<br>\nRole not found.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/roles/:roleId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Role Id."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**Status Code:** `204`<br>\nRole deleted.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/roles/:roleId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Role Id."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "**Error Code:** `300`<br>\nRole not found.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/roles/:roleId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) Role Id."
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "List roles",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/roles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"roles"
							]
						},
						"description": "List [roles](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) on your account\n\n**Scopes:** `role:read:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n**Prerequisites** :\n*  Pro or higher plan. \n*  For setting the initial role, you must be the Account Owner. \n*  For subsequent role management, you must be the Account Owner or user with role management permissions."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nList of roles returned.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"total_records\": 3,\n \"roles\": [\n  {\n   \"id\": \"0\",\n   \"name\": \"Owner\",\n   \"description\": \"Account owner has full privileges to access and manage a Zoom account.\",\n   \"total_members\": 1\n  },\n  {\n   \"id\": \"1\",\n   \"name\": \"Admin\",\n   \"description\": \"Admins have wide range privileges to access and manage a Zoom account.\",\n   \"total_members\": 0\n  },\n  {\n   \"id\": \"2\",\n   \"name\": \"Member\",\n   \"description\": \"Members have access to basic Zoom video meeting functions but no account management privileges.\",\n   \"total_members\": 1\n  }\n ]\n}"
						},
						{
							"name": "**HTTP Status Code:** `400`<br>\nBad request<br>**Error Code:** `4700`<br>Invalid access token, does not contain role:read:admin scope.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create a role",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "ex dolor sit reprehenderit est",
									"description": "Name of the role.",
									"type": "text"
								},
								{
									"key": "description",
									"value": "no",
									"description": "Description of the role.",
									"type": "text"
								},
								{
									"key": "privileges",
									"value": "[\"quis\",\"qui adipisicing\"]",
									"description": "Privileges assigned to the role. Can be one or a combination of [these permissions](https://marketplace.zoom.us/docs/api-reference/other-references/privileges).",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/roles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"roles"
							]
						},
						"description": "Each Zoom user automatically has a role which can either be owner, administrator, or a member. \n\n**Pre-requisite:**<br>\n* Pro or higher plan.\n* For setting the initial role, you must be the Account Owner.<br>\n* For subsequent role management, you must be the Account Owner or user with role management permissions.<br>\n**Scopes:** `role:write:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
					},
					"response": [
						{
							"name": "**Status Code:** `200`<br>\nYou do not have the permission to create a role.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "pariatur",
											"description": "Name of the role.",
											"type": "text"
										},
										{
											"key": "description",
											"value": "pariatur elit occaecat non",
											"description": "Description of the role.",
											"type": "text"
										},
										{
											"key": "privileges",
											"value": "[\"dolor anim\",\"ea incididunt nisi adipisicing\"]",
											"description": "Privileges assigned to the role. Can be one or a combination of [these permissions](https://marketplace.zoom.us/docs/api-reference/other-references/privileges).",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						},
						{
							"name": "**Status Code:** `201`<br>\nRole created.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "pariatur",
											"description": "Name of the role.",
											"type": "text"
										},
										{
											"key": "description",
											"value": "pariatur elit occaecat non",
											"description": "Description of the role.",
											"type": "text"
										},
										{
											"key": "privileges",
											"value": "[\"dolor anim\",\"ea incididunt nisi adipisicing\"]",
											"description": "Privileges assigned to the role. Can be one or a combination of [these permissions](https://marketplace.zoom.us/docs/api-reference/other-references/privileges).",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"dolore enim do\",\n \"name\": \"voluptate qui fugiat id\",\n \"description\": \"voluptate ut\",\n \"total_members\": 88057444,\n \"privileges\": [\n  \"enim id sed in dolor\",\n  \"reprehenderit id aute anim nostrud\"\n ]\n}"
						},
						{
							"name": "**Error Code:** `300`<br>\nThe name field cannot be empty.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "pariatur",
											"description": "Name of the role.",
											"type": "text"
										},
										{
											"key": "description",
											"value": "pariatur elit occaecat non",
											"description": "Description of the role.",
											"type": "text"
										},
										{
											"key": "privileges",
											"value": "[\"dolor anim\",\"ea incididunt nisi adipisicing\"]",
											"description": "Privileges assigned to the role. Can be one or a combination of [these permissions](https://marketplace.zoom.us/docs/api-reference/other-references/privileges).",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"status": "Multiple Choices",
							"code": 300,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "tsp",
			"item": [
				{
					"name": "Get account's TSP information",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tsp",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tsp"
							]
						},
						"description": "Get information on Telephony Service Provider on an account level.<br><br>\n**Scopes:** `tsp:read:admin` <br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:**<br>\n* A Pro or a higher plan."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nTSP account detail returned successfully.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tsp",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tsp"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"tsp_provider\": \"someprovidername\",\n \"enable\": true,\n \"dial_in_numbers\": [\n  {\n   \"code\": \"111\",\n   \"number\": \"000000000\",\n   \"type\": \"toll\"\n  }\n ],\n \"tsp_enabled\": true,\n \"master_account_setting_extended\": false,\n \"modify_credential_forbidden\": true,\n \"dial_in_number_unrestricted\": false,\n \"tsp_bridge\": \"string\"\n}"
						}
					]
				},
				{
					"name": "Update account's TSP information",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "tsp_provider",
									"value": "nulla Duis incididunt",
									"description": "3rd party audio conferencing provider",
									"type": "text"
								},
								{
									"key": "enable",
									"value": "true",
									"description": "Enable 3rd party audio conferencing for account users",
									"type": "text"
								},
								{
									"key": "tsp_enabled",
									"value": "true",
									"description": "Enable TSP feature for account. This has to be enabled to use any other tsp settings/features.",
									"type": "text"
								},
								{
									"key": "master_account_setting_extended",
									"value": "true",
									"description": "For master account, extend its TSP setting to all sub accounts. For sub account, extend TSP setting from master account.",
									"type": "text"
								},
								{
									"key": "modify_credential_forbidden",
									"value": "false",
									"description": "Control restriction on account users being able to modify their TSP credentials.",
									"type": "text"
								},
								{
									"key": "dial_in_number_unrestricted",
									"value": "false",
									"description": "Control restriction on account users adding a TSP number outside of account's dial in numbers.",
									"type": "text"
								},
								{
									"key": "tsp_bridge",
									"value": "US_TSP_TB",
									"description": "Telephony bridge (This can only be one of US_TSP_TB,EU_TSP_TB)",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/tsp",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tsp"
							]
						},
						"description": "Update information of the Telephony Service Provider set up on an account.<br>\n**Prerequisites**:<br>\nTSP account option should be enabled.<br>\n**Scopes:** `tsp:write:admin`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `204` **No Content**<br>\nTSP Account updated.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "tsp_provider",
											"value": "nulla Duis incididunt",
											"description": "3rd party audio conferencing provider",
											"type": "text"
										},
										{
											"key": "enable",
											"value": "true",
											"description": "Enable 3rd party audio conferencing for account users",
											"type": "text"
										},
										{
											"key": "tsp_enabled",
											"value": "true",
											"description": "Enable TSP feature for account. This has to be enabled to use any other tsp settings/features.",
											"type": "text"
										},
										{
											"key": "master_account_setting_extended",
											"value": "true",
											"description": "For master account, extend its TSP setting to all sub accounts. For sub account, extend TSP setting from master account.",
											"type": "text"
										},
										{
											"key": "modify_credential_forbidden",
											"value": "false",
											"description": "Control restriction on account users being able to modify their TSP credentials.",
											"type": "text"
										},
										{
											"key": "dial_in_number_unrestricted",
											"value": "false",
											"description": "Control restriction on account users adding a TSP number outside of account's dial in numbers.",
											"type": "text"
										},
										{
											"key": "tsp_bridge",
											"value": "US_TSP_TB",
											"description": "Telephony bridge (This can only be one of US_TSP_TB,EU_TSP_TB)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/tsp",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tsp"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `400`<br>\nBad request.<br>\n\n**Error Code:** `300`<br>\nInvalid parameter: tsp_bridge.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "tsp_provider",
											"value": "nulla Duis incididunt",
											"description": "3rd party audio conferencing provider",
											"type": "text"
										},
										{
											"key": "enable",
											"value": "true",
											"description": "Enable 3rd party audio conferencing for account users",
											"type": "text"
										},
										{
											"key": "tsp_enabled",
											"value": "true",
											"description": "Enable TSP feature for account. This has to be enabled to use any other tsp settings/features.",
											"type": "text"
										},
										{
											"key": "master_account_setting_extended",
											"value": "true",
											"description": "For master account, extend its TSP setting to all sub accounts. For sub account, extend TSP setting from master account.",
											"type": "text"
										},
										{
											"key": "modify_credential_forbidden",
											"value": "false",
											"description": "Control restriction on account users being able to modify their TSP credentials.",
											"type": "text"
										},
										{
											"key": "dial_in_number_unrestricted",
											"value": "false",
											"description": "Control restriction on account users adding a TSP number outside of account's dial in numbers.",
											"type": "text"
										},
										{
											"key": "tsp_bridge",
											"value": "US_TSP_TB",
											"description": "Telephony bridge (This can only be one of US_TSP_TB,EU_TSP_TB)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/tsp",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tsp"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "webinars/{webinar Id}",
			"item": [
				{
					"name": "panelists",
					"item": [
						{
							"name": "List panelists",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"panelists"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								},
								"description": "Panelists in a Webinar can view and send video, screen share, annotate, etc and do much more compared to attendees in a Webinar. \n\nUse this API to list all the panelists of a Webinar.<br><br>\n**Scopes:** `webinar:read:admin` `webinar:read`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n**Prerequisites:**<br>\n* Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).<br> "
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nWebinar plan subscription missing. Enable webinar for this user once the subscription is added.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"total_records\": \"2\",\n \"panelists\": [\n  {\n   \"name\": \"Mary\",\n   \"email\": \"example@example.com\"\n  },\n  {\n   \"name\": \"Mike\",\n   \"email\": \"example-2@example.com\"\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `300`<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add panelists",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "panelists",
											"value": "[{\"name\":\"et laboris\",\"email\":\"wm9XsF2S1obVMx@ODqRSZqfXHfSvvBSoJpBEHvNBlHY.py\"},{\"name\":\"qui\",\"email\":\"J-jU@pwSlELUTULOQBdKWwRVYMq.go\"}]",
											"description": "List of panelist objects.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"panelists"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								},
								"description": "Panelists in a Webinar can view and send video, screen share, annotate, etc and do much more compared to attendees in a webinar.<br>Use this API to [add panelists](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_7550d59e-23f5-4703-9e22-e76bded1ed70) to a scheduled webinar.<br><br>\n**Scopes:** `webinar:write:admin` `webinar:write`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n\n\n**Prerequisites:**\n* Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).<br> "
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nWebinar plan subscription missing. Enable webinar for this user once the subscription is added.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "panelists",
													"value": "[{\"name\":\"in do\",\"email\":\"qC3xUfJSnzm9@SGPG.dqb\"},{\"name\":\"consectetur id ullamco\",\"email\":\"ci5EG3T8L@jcQWTGkSsnNSrkxm.szeh\"}]",
													"description": "List of panelist objects.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `201`<br>\nPanelist created.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "panelists",
													"value": "[{\"name\":\"in do\",\"email\":\"qC3xUfJSnzm9@SGPG.dqb\"},{\"name\":\"consectetur id ullamco\",\"email\":\"ci5EG3T8L@jcQWTGkSsnNSrkxm.szeh\"}]",
													"description": "List of panelist objects.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"doetwerggrlor\",\n \"updated_at\": \"2019-01-25T10:04:27.051Z\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>\n**Error Code:** `3000`<br>\nYou have reached the limit for the number of panelists you can add. Contact Zoom Support for more i",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "panelists",
													"value": "[{\"name\":\"in do\",\"email\":\"qC3xUfJSnzm9@SGPG.dqb\"},{\"name\":\"consectetur id ullamco\",\"email\":\"ci5EG3T8L@jcQWTGkSsnNSrkxm.szeh\"}]",
													"description": "List of panelist objects.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "panelists",
													"value": "[{\"name\":\"in do\",\"email\":\"qC3xUfJSnzm9@SGPG.dqb\"},{\"name\":\"consectetur id ullamco\",\"email\":\"ci5EG3T8L@jcQWTGkSsnNSrkxm.szeh\"}]",
													"description": "List of panelist objects.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `429` <br> You have exceeded the daily rate limit of \"{0}\" for webinar **Add panelists** API requests for the panelist \"{1}\". You can resume these API requests at GMT 00:00:00.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "panelists",
													"value": "[{\"name\":\"in do\",\"email\":\"qC3xUfJSnzm9@SGPG.dqb\"},{\"name\":\"consectetur id ullamco\",\"email\":\"ci5EG3T8L@jcQWTGkSsnNSrkxm.szeh\"}]",
													"description": "List of panelist objects.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Remove panelists",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"panelists"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								},
								"description": "Remove all the panelists from a Webinar.<br>\n**Scopes:** `webinar:write:admin` `webinar:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n**Prerequisites:**<br>\n* Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).<br> "
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204`<br>\nPanelists removed.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Remove a panelist",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/panelists/:panelistId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"panelists",
										":panelistId"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										},
										{
											"key": "panelistId",
											"value": "-14804147",
											"description": "(Required) The panelist ID or panelist email."
										}
									]
								},
								"description": "[Remove](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_de31f237-a91c-4fb2-912b-ecfba8ec5ffb) a single panelist from a webinar.<br> You can retrieve the `panelistId` by calling **List Panelists API**.<br><br>\n**Scopes:** `webinar:write:admin` `webinar:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n\n\n**Prerequisites:**<br>\n* Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).<br> "
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nWebinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists/:panelistId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists",
												":panelistId"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												},
												{
													"key": "panelistId",
													"value": "-14804147",
													"description": "(Required) The panelist ID or panelist email."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `204`<br>\nPanelists removed.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists/:panelistId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists",
												":panelistId"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												},
												{
													"key": "panelistId",
													"value": "-14804147",
													"description": "(Required) The panelist ID or panelist email."
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists/:panelistId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists",
												":panelistId"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												},
												{
													"key": "panelistId",
													"value": "-14804147",
													"description": "(Required) The panelist ID or panelist email."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>\n**Error Code:** `1001`<br>\nUser {email} does not exist or does not belong to this account.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/panelists/:panelistId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"panelists",
												":panelistId"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												},
												{
													"key": "panelistId",
													"value": "-14804147",
													"description": "(Required) The panelist ID or panelist email."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "registrants",
					"item": [
						{
							"name": "questions",
							"item": [
								{
									"name": "List registration questions",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants/questions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants",
												"questions"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										},
										"description": "Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the Webinar.<br>Use this API to list registration questions and fields that are to be answered by users while registering for a Webinar.<br>\n**Prerequisites:**<br>  \n* Pro or higher plan with a Webinar Add-on.\n**Scopes:** `webinar:read:admin` `webinar:read`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nWebinar Registrant Question object returned",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/registrants/questions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"registrants",
														"questions"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "-14804147",
															"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"questions\": [\n  {\n   \"field_name\": \"string\",\n   \"required\": \"boolean\"\n  }\n ],\n \"custom_questions\": [\n  {\n   \"title\": \"string\",\n   \"type\": \"string\",\n   \"required\": \"boolean\",\n   \"answers\": [\n    \"array of answer choices\"\n   ]\n  }\n ]\n}"
										},
										{
											"name": "**HTTP Status Code:** `404`<br>Webinar not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/registrants/questions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"registrants",
														"questions"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "-14804147",
															"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update registration questions",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "questions",
													"value": "[{\"field_name\":\"state\",\"required\":false},{\"field_name\":\"country\",\"required\":false}]",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "custom_questions",
													"value": "[{\"title\":\"Lorem sed cillum Duis\",\"type\":\"multiple\",\"required\":true,\"answers\":[\"incididunt et anim Lorem\",\"sed consequat dolor\"]},{\"title\":\"in sit dolor Duis\",\"type\":\"single_radio\",\"required\":true,\"answers\":[\"Duis nulla\",\"labore cillum am\"]}]",
													"description": "undefined",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants/questions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants",
												"questions"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										},
										"description": "Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the Webinar.<br>Use this API to update registration questions and fields of a scheduled Webinar that are to be answered by users while registering for a Webinar.<br><br>\n**Prerequisites:**<br>  \n* Pro or higher plan with a Webinar Add-on.\n* Registration option for Webinar should be set as required to use this API. \n**Scopes:** `webinar:write:admin` `webinar:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204`<br>Webinar Registrant Questions Updated",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "questions",
															"value": "[{\"field_name\":\"comments\",\"required\":false},{\"field_name\":\"no_of_employees\",\"required\":true}]",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "custom_questions",
															"value": "[{\"title\":\"ea in ut deserunt\",\"type\":\"single_dropdown\",\"required\":false,\"answers\":[\"sint aliquip deserunt in\",\"anim ipsum cillum sed qui\"]},{\"title\":\"Excepteur labore\",\"type\":\"single_dropdown\",\"required\":true,\"answers\":[\"ad mollit\",\"Lorem veniam culpa ullamco\"]}]",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/registrants/questions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"registrants",
														"questions"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "-14804147",
															"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>Webinar not found",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "questions",
															"value": "[{\"field_name\":\"comments\",\"required\":false},{\"field_name\":\"no_of_employees\",\"required\":true}]",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "custom_questions",
															"value": "[{\"title\":\"ea in ut deserunt\",\"type\":\"single_dropdown\",\"required\":false,\"answers\":[\"sint aliquip deserunt in\",\"anim ipsum cillum sed qui\"]},{\"title\":\"Excepteur labore\",\"type\":\"single_dropdown\",\"required\":true,\"answers\":[\"ad mollit\",\"Lorem veniam culpa ullamco\"]}]",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/registrants/questions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"registrants",
														"questions"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "-14804147",
															"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "{registrant Id}",
							"item": [
								{
									"name": "Get a webinar registrant",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants/:registrantId?occurrence_id=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants",
												":registrantId"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "culpa velit reprehenderit",
													"description": "The meeting occurrence ID."
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												},
												{
													"key": "registrantId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The registrant ID."
												}
											]
										},
										"description": "Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the Webinar.<br>Use this API to get details on a specific user who has registered for the Webinar.<br><br>\n**Scopes:** `webinar:read:admin` `webinar:read`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n**Prerequisites:**<br>\n* The account must have a Webinar plan."
									},
									"response": [
										{
											"name": "Success.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/registrants/:registrantId?occurrence_id=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"registrants",
														":registrantId"
													],
													"query": [
														{
															"key": "occurrence_id",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "-14804147",
															"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
														},
														{
															"key": "registrantId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The registrant ID."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"page_count\": \"1\",\n \"page_number\": \"1\",\n \"page_size\": \"30\",\n \"total_records\": \"1\",\n \"registrants\": [\n  {\n   \"id\": \"24000002122\",\n   \"email\": \"example@example.com\",\n   \"first_name\": \"Jill\",\n   \"last_name\": \"Chill\",\n   \"address\": \"1800 Amphibious Blvd.\",\n   \"city\": \"Mountain View\",\n   \"country\": \"US\",\n   \"zip\": \"94045\",\n   \"state\": \"CA\",\n   \"phone\": \"5550100\",\n   \"industry\": \"Food\",\n   \"org\": \"Cooking Org\",\n   \"job_title\": \"Chef\",\n   \"purchasing_time_frame\": \"1-3 months\",\n   \"role_in_purchase_process\": \"Influencer\",\n   \"no_of_employees\": \"10\",\n   \"comments\": \"Looking forward to the Webinar\",\n   \"custom_questions\": [\n    {\n     \"title\": \"What do you hope to learn from this Webinar?\",\n     \"value\": \"Look forward to learning how you come up with new recipes and what other services you offer.\"\n    }\n   ],\n   \"status\": \"approved\",\n   \"create_time\": \"2019-02-26T23:01:16.899Z\",\n   \"join_url\": \"https://zoom.us/webinar/mywebinarissocooldighdghodghodg\"\n  }\n ]\n}"
										},
										{
											"name": "Invalid webinar ID.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/registrants/:registrantId?occurrence_id=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"registrants",
														":registrantId"
													],
													"query": [
														{
															"key": "occurrence_id",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "-14804147",
															"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
														},
														{
															"key": "registrantId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The registrant ID."
														}
													]
												}
											},
											"status": "Multiple Choices",
											"code": 300,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/registrants/:registrantId?occurrence_id=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"registrants",
														":registrantId"
													],
													"query": [
														{
															"key": "occurrence_id",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "-14804147",
															"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
														},
														{
															"key": "registrantId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The registrant ID."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/registrants/:registrantId?occurrence_id=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"registrants",
														":registrantId"
													],
													"query": [
														{
															"key": "occurrence_id",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "-14804147",
															"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
														},
														{
															"key": "registrantId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The registrant ID."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a webinar registrant",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants/:registrantId?occurrence_id=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants",
												":registrantId"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "culpa velit reprehenderit",
													"description": "The webinar occurence ID."
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID."
												},
												{
													"key": "registrantId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The registrant ID."
												}
											]
										},
										"description": "Delete a webinar registrant.<br><br>\n**Scopes**: `webinar:write:admin` `webinar:write`<br>\n <br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
									},
									"response": [
										{
											"name": "**HTTP status code:** `204` <br>\nOK",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/registrants/:registrantId?occurrence_id=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"registrants",
														":registrantId"
													],
													"query": [
														{
															"key": "occurrence_id",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "-14804147",
															"description": "(Required) The webinar ID."
														},
														{
															"key": "registrantId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The registrant ID."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP status code:** `400` <br>\nBad Request<br>\n\n**Error code:** `200`<br>\nWebinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {0}.<br>\n\n**Error code:** `300`<br>\nThe value th",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/registrants/:registrantId?occurrence_id=culpa velit reprehenderit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"registrants",
														":registrantId"
													],
													"query": [
														{
															"key": "occurrence_id",
															"value": "culpa velit reprehenderit"
														}
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "-14804147",
															"description": "(Required) The webinar ID."
														},
														{
															"key": "registrantId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The registrant ID."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "List webinar registrants",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/registrants?occurrence_id=culpa velit reprehenderit&status=approved&tracking_source_id=culpa velit reprehenderit&page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"registrants"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit",
											"description": "The meeting occurrence ID."
										},
										{
											"key": "status",
											"value": "approved",
											"description": "The registrant status:<br>`pending` - Registrant's status is pending.<br>`approved` - Registrant's status is approved.<br>`denied` - Registrant's status is denied."
										},
										{
											"key": "tracking_source_id",
											"value": "culpa velit reprehenderit",
											"description": "The tracking source ID for the registrants. Useful if you share the webinar registration page in multiple locations. See [Creating source tracking links for webinar registration](https://support.zoom.us/hc/en-us/articles/360000315683-Creating-source-tracking-links-for-webinar-registration) for details."
										},
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "page_number",
											"value": "1",
											"description": "\n**Deprecated** - This field has been deprecated and we will stop supporting it completely in a future release. Please use \"next_page_token\" for pagination instead of this field.\n\nThe page number of the current page in the returned records."
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								},
								"description": "Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the Webinar.<br>\nUse this API to list all the users that have registered for a webinar.<br><br>\n**Prerequisites:**\n* Pro or higher plan with a Webinar Add-on.<br>\n**Scopes:** `webinar:read:admin` `webinar:read`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nWebinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants?occurrence_id=culpa velit reprehenderit&status=approved&tracking_source_id=culpa velit reprehenderit&page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "status",
													"value": "approved"
												},
												{
													"key": "tracking_source_id",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "page_number",
													"value": "1"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"page_count\": \"1\",\n \"page_number\": \"1\",\n \"page_size\": \"30\",\n \"total_records\": \"1\",\n \"registrants\": [\n  {\n   \"id\": \"24000002122\",\n   \"email\": \"example@example.com\",\n   \"first_name\": \"Jill\",\n   \"last_name\": \"Chill\",\n   \"address\": \"1800 Amphibious Blvd.\",\n   \"city\": \"Mountain View\",\n   \"country\": \"US\",\n   \"zip\": \"94045\",\n   \"state\": \"CA\",\n   \"phone\": \"5550100\",\n   \"industry\": \"Food\",\n   \"org\": \"Cooking Org\",\n   \"job_title\": \"Chef\",\n   \"purchasing_time_frame\": \"1-3 months\",\n   \"role_in_purchase_process\": \"Influencer\",\n   \"no_of_employees\": \"10\",\n   \"comments\": \"Looking forward to the Webinar\",\n   \"custom_questions\": [\n    {\n     \"title\": \"What do you hope to learn from this Webinar?\",\n     \"value\": \"Look forward to learning how you come up with new recipes and what other services you offer.\"\n    }\n   ],\n   \"status\": \"approved\",\n   \"create_time\": \"2019-02-26T23:01:16.899Z\",\n   \"join_url\": \"https://zoom.us/webinar/mywebinarissocooldighdghodghodg\"\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `300`<br>Invalid webinar ID.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants?occurrence_id=culpa velit reprehenderit&status=approved&tracking_source_id=culpa velit reprehenderit&page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "status",
													"value": "approved"
												},
												{
													"key": "tracking_source_id",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "page_number",
													"value": "1"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants?occurrence_id=culpa velit reprehenderit&status=approved&tracking_source_id=culpa velit reprehenderit&page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "status",
													"value": "approved"
												},
												{
													"key": "tracking_source_id",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "page_number",
													"value": "1"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants?occurrence_id=culpa velit reprehenderit&status=approved&tracking_source_id=culpa velit reprehenderit&page_size=30&page_number=1&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "status",
													"value": "approved"
												},
												{
													"key": "tracking_source_id",
													"value": "culpa velit reprehenderit"
												},
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "page_number",
													"value": "1"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add a webinar registrant",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"value": "cupidatat do Duis Lorem dolore",
											"type": "text"
										},
										{
											"key": "first_name",
											"value": "deserunt commodo voluptate",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "enim sed",
											"type": "text"
										},
										{
											"key": "address",
											"value": "Ut in",
											"type": "text"
										},
										{
											"key": "city",
											"value": "exercitation non dolor",
											"type": "text"
										},
										{
											"key": "country",
											"value": "mollit ullamco labore",
											"type": "text"
										},
										{
											"key": "zip",
											"value": "esse nulla",
											"type": "text"
										},
										{
											"key": "state",
											"value": "labore consequat ame",
											"type": "text"
										},
										{
											"key": "phone",
											"value": "ut eu",
											"type": "text"
										},
										{
											"key": "industry",
											"value": "laboris enim ad",
											"type": "text"
										},
										{
											"key": "org",
											"value": "aliq",
											"type": "text"
										},
										{
											"key": "job_title",
											"value": "et laboris sunt",
											"type": "text"
										},
										{
											"key": "purchasing_time_frame",
											"value": "aute",
											"type": "text"
										},
										{
											"key": "role_in_purchase_process",
											"value": "culpa occaecat quis",
											"type": "text"
										},
										{
											"key": "no_of_employees",
											"value": "aliqua eiusmod reprehenderit",
											"type": "text"
										},
										{
											"key": "comments",
											"value": "laboris",
											"type": "text"
										},
										{
											"key": "custom_questions",
											"value": "[{\"title\":\"reprehenderit tempor anim officia\",\"value\":\"est ea non in\"},{\"title\":\"sit ut fugiat laboris\",\"value\":\"laboris consectetur enim\"}]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/registrants?occurrence_ids=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"registrants"
									],
									"query": [
										{
											"key": "occurrence_ids",
											"value": "culpa velit reprehenderit",
											"description": "Occurrence ID. Get this value from the webinar get API. Multiple values separated by a comma."
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								},
								"description": "Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the Webinar.<br>Use this API to create and submit the registration of a user for a webinar.<br><br>\n**Scopes:** `webinar:write:admin` `webinar:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n**Prerequisites:**\n* Pro or higher plan with a Webinar Add-on."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `201`<br>\nRegistration created.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "dolor ipsum aliquip",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "enim aliqua et dolor e",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "cupidatat id nisi Duis",
													"type": "text"
												},
												{
													"key": "address",
													"value": "laboris sit",
													"type": "text"
												},
												{
													"key": "city",
													"value": "sit veniam do",
													"type": "text"
												},
												{
													"key": "country",
													"value": "sed minim exercitation aliqui",
													"type": "text"
												},
												{
													"key": "zip",
													"value": "aliquip voluptate proident do",
													"type": "text"
												},
												{
													"key": "state",
													"value": "dolore ipsum ut eiusmod",
													"type": "text"
												},
												{
													"key": "phone",
													"value": "in",
													"type": "text"
												},
												{
													"key": "industry",
													"value": "non aute ullamco",
													"type": "text"
												},
												{
													"key": "org",
													"value": "voluptate nisi aliqua amet laborum",
													"type": "text"
												},
												{
													"key": "job_title",
													"value": "consequat aliqua in",
													"type": "text"
												},
												{
													"key": "purchasing_time_frame",
													"value": "quis fugiat",
													"type": "text"
												},
												{
													"key": "role_in_purchase_process",
													"value": "minim ",
													"type": "text"
												},
												{
													"key": "no_of_employees",
													"value": "adipisicing velit sed",
													"type": "text"
												},
												{
													"key": "comments",
													"value": "anim ullamco ipsum",
													"type": "text"
												},
												{
													"key": "custom_questions",
													"value": "[{\"title\":\"labore aute\",\"value\":\"magna qui enim\"},{\"title\":\"consequat quis\",\"value\":\"dolore ut adipisicing proident\"}]",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants?occurrence_ids=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_ids",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"registrant_id\": \"culpa deserunt ea est commodo\",\n \"id\": \"velit dolore minim Ut\",\n \"topic\": \"et laboris Lorem in Ut\",\n \"start_time\": \"1974-02-26T23:01:16.899Z\",\n \"join_url\": \"pariatur\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `300`<br>Invalid webinar ID. <br>\nInvalid parameter: occurrence_ids.<br>\nInvalid user name.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "dolor ipsum aliquip",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "enim aliqua et dolor e",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "cupidatat id nisi Duis",
													"type": "text"
												},
												{
													"key": "address",
													"value": "laboris sit",
													"type": "text"
												},
												{
													"key": "city",
													"value": "sit veniam do",
													"type": "text"
												},
												{
													"key": "country",
													"value": "sed minim exercitation aliqui",
													"type": "text"
												},
												{
													"key": "zip",
													"value": "aliquip voluptate proident do",
													"type": "text"
												},
												{
													"key": "state",
													"value": "dolore ipsum ut eiusmod",
													"type": "text"
												},
												{
													"key": "phone",
													"value": "in",
													"type": "text"
												},
												{
													"key": "industry",
													"value": "non aute ullamco",
													"type": "text"
												},
												{
													"key": "org",
													"value": "voluptate nisi aliqua amet laborum",
													"type": "text"
												},
												{
													"key": "job_title",
													"value": "consequat aliqua in",
													"type": "text"
												},
												{
													"key": "purchasing_time_frame",
													"value": "quis fugiat",
													"type": "text"
												},
												{
													"key": "role_in_purchase_process",
													"value": "minim ",
													"type": "text"
												},
												{
													"key": "no_of_employees",
													"value": "adipisicing velit sed",
													"type": "text"
												},
												{
													"key": "comments",
													"value": "anim ullamco ipsum",
													"type": "text"
												},
												{
													"key": "custom_questions",
													"value": "[{\"title\":\"labore aute\",\"value\":\"magna qui enim\"},{\"title\":\"consequat quis\",\"value\":\"dolore ut adipisicing proident\"}]",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants?occurrence_ids=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_ids",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>\n**Error Code:** `3000`<br>\nThis webinar does not have registration as required:{webinarId}.<br>\n**Error Code:** `3027`<br>\nHos",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "dolor ipsum aliquip",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "enim aliqua et dolor e",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "cupidatat id nisi Duis",
													"type": "text"
												},
												{
													"key": "address",
													"value": "laboris sit",
													"type": "text"
												},
												{
													"key": "city",
													"value": "sit veniam do",
													"type": "text"
												},
												{
													"key": "country",
													"value": "sed minim exercitation aliqui",
													"type": "text"
												},
												{
													"key": "zip",
													"value": "aliquip voluptate proident do",
													"type": "text"
												},
												{
													"key": "state",
													"value": "dolore ipsum ut eiusmod",
													"type": "text"
												},
												{
													"key": "phone",
													"value": "in",
													"type": "text"
												},
												{
													"key": "industry",
													"value": "non aute ullamco",
													"type": "text"
												},
												{
													"key": "org",
													"value": "voluptate nisi aliqua amet laborum",
													"type": "text"
												},
												{
													"key": "job_title",
													"value": "consequat aliqua in",
													"type": "text"
												},
												{
													"key": "purchasing_time_frame",
													"value": "quis fugiat",
													"type": "text"
												},
												{
													"key": "role_in_purchase_process",
													"value": "minim ",
													"type": "text"
												},
												{
													"key": "no_of_employees",
													"value": "adipisicing velit sed",
													"type": "text"
												},
												{
													"key": "comments",
													"value": "anim ullamco ipsum",
													"type": "text"
												},
												{
													"key": "custom_questions",
													"value": "[{\"title\":\"labore aute\",\"value\":\"magna qui enim\"},{\"title\":\"consequat quis\",\"value\":\"dolore ut adipisicing proident\"}]",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants?occurrence_ids=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_ids",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>\n",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "dolor ipsum aliquip",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "enim aliqua et dolor e",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "cupidatat id nisi Duis",
													"type": "text"
												},
												{
													"key": "address",
													"value": "laboris sit",
													"type": "text"
												},
												{
													"key": "city",
													"value": "sit veniam do",
													"type": "text"
												},
												{
													"key": "country",
													"value": "sed minim exercitation aliqui",
													"type": "text"
												},
												{
													"key": "zip",
													"value": "aliquip voluptate proident do",
													"type": "text"
												},
												{
													"key": "state",
													"value": "dolore ipsum ut eiusmod",
													"type": "text"
												},
												{
													"key": "phone",
													"value": "in",
													"type": "text"
												},
												{
													"key": "industry",
													"value": "non aute ullamco",
													"type": "text"
												},
												{
													"key": "org",
													"value": "voluptate nisi aliqua amet laborum",
													"type": "text"
												},
												{
													"key": "job_title",
													"value": "consequat aliqua in",
													"type": "text"
												},
												{
													"key": "purchasing_time_frame",
													"value": "quis fugiat",
													"type": "text"
												},
												{
													"key": "role_in_purchase_process",
													"value": "minim ",
													"type": "text"
												},
												{
													"key": "no_of_employees",
													"value": "adipisicing velit sed",
													"type": "text"
												},
												{
													"key": "comments",
													"value": "anim ullamco ipsum",
													"type": "text"
												},
												{
													"key": "custom_questions",
													"value": "[{\"title\":\"labore aute\",\"value\":\"magna qui enim\"},{\"title\":\"consequat quis\",\"value\":\"dolore ut adipisicing proident\"}]",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants?occurrence_ids=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_ids",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `429`<br>\nYou have exceeded the daily rate limit of \"{0}\" for **Add a webinar registrant** API requests for the registrant \"{1}\". You can resume these API requests at GMT 00:00:00.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "dolor ipsum aliquip",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "enim aliqua et dolor e",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "cupidatat id nisi Duis",
													"type": "text"
												},
												{
													"key": "address",
													"value": "laboris sit",
													"type": "text"
												},
												{
													"key": "city",
													"value": "sit veniam do",
													"type": "text"
												},
												{
													"key": "country",
													"value": "sed minim exercitation aliqui",
													"type": "text"
												},
												{
													"key": "zip",
													"value": "aliquip voluptate proident do",
													"type": "text"
												},
												{
													"key": "state",
													"value": "dolore ipsum ut eiusmod",
													"type": "text"
												},
												{
													"key": "phone",
													"value": "in",
													"type": "text"
												},
												{
													"key": "industry",
													"value": "non aute ullamco",
													"type": "text"
												},
												{
													"key": "org",
													"value": "voluptate nisi aliqua amet laborum",
													"type": "text"
												},
												{
													"key": "job_title",
													"value": "consequat aliqua in",
													"type": "text"
												},
												{
													"key": "purchasing_time_frame",
													"value": "quis fugiat",
													"type": "text"
												},
												{
													"key": "role_in_purchase_process",
													"value": "minim ",
													"type": "text"
												},
												{
													"key": "no_of_employees",
													"value": "adipisicing velit sed",
													"type": "text"
												},
												{
													"key": "comments",
													"value": "anim ullamco ipsum",
													"type": "text"
												},
												{
													"key": "custom_questions",
													"value": "[{\"title\":\"labore aute\",\"value\":\"magna qui enim\"},{\"title\":\"consequat quis\",\"value\":\"dolore ut adipisicing proident\"}]",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants?occurrence_ids=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants"
											],
											"query": [
												{
													"key": "occurrence_ids",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update registrant's status",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "deny",
											"description": "(Required) Used to approve a registrant, deny a registrant, or cancel a previously approved registrant.  (This can only be one of approve,cancel,deny)",
											"type": "text"
										},
										{
											"key": "registrants",
											"value": "[{\"id\":\"eu occaecat amet quis ex\",\"email\":\"ullamco elit Excepteur magna dolore\"},{\"id\":\"magna officia sed voluptate ea\",\"email\":\"irure velit aliqua\"}]",
											"description": "List of registrants.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/registrants/status?occurrence_id=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"registrants",
										"status"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit",
											"description": "The meeting occurrence ID."
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								},
								"description": "Update a webinar registrant's status. Using this API, you can specify whether you want to approve a registration, deny a registration or cancel a previously approved registration.<br><br>\n**Scopes:** `webinar:write:admin` `webinar:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nThe webinar plan subscription is missing. Enable webinar for this user once the subscription is added: {userId}.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "approve",
													"description": "(Required) Used to approve a registrant, deny a registrant, or cancel a previously approved registrant.  (This can only be one of approve,cancel,deny)",
													"type": "text"
												},
												{
													"key": "registrants",
													"value": "[{\"id\":\"laborum ex\",\"email\":\"enim incididunt aliquip\"},{\"id\":\"reprehenderit tempor sin\",\"email\":\"cupidatat in\"}]",
													"description": "List of registrants.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants/status?occurrence_id=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants",
												"status"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `300`<br>Invalid webinar ID.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "approve",
													"description": "(Required) Used to approve a registrant, deny a registrant, or cancel a previously approved registrant.  (This can only be one of approve,cancel,deny)",
													"type": "text"
												},
												{
													"key": "registrants",
													"value": "[{\"id\":\"laborum ex\",\"email\":\"enim incididunt aliquip\"},{\"id\":\"reprehenderit tempor sin\",\"email\":\"cupidatat in\"}]",
													"description": "List of registrants.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants/status?occurrence_id=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants",
												"status"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>\n**Error Code:** `3035`<br>\nWebinar has reached maximum attendee capacity.<br>",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "approve",
													"description": "(Required) Used to approve a registrant, deny a registrant, or cancel a previously approved registrant.  (This can only be one of approve,cancel,deny)",
													"type": "text"
												},
												{
													"key": "registrants",
													"value": "[{\"id\":\"laborum ex\",\"email\":\"enim incididunt aliquip\"},{\"id\":\"reprehenderit tempor sin\",\"email\":\"cupidatat in\"}]",
													"description": "List of registrants.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants/status?occurrence_id=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants",
												"status"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "approve",
													"description": "(Required) Used to approve a registrant, deny a registrant, or cancel a previously approved registrant.  (This can only be one of approve,cancel,deny)",
													"type": "text"
												},
												{
													"key": "registrants",
													"value": "[{\"id\":\"laborum ex\",\"email\":\"enim incididunt aliquip\"},{\"id\":\"reprehenderit tempor sin\",\"email\":\"cupidatat in\"}]",
													"description": "List of registrants.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants/status?occurrence_id=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants",
												"status"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `429` <br> You have exceeded the daily rate limit of \"{0}\" for webinar **Update registrant's status** API requests for the registrant \"{1}\". You can resume these API requests at GMT 00:00:00.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "approve",
													"description": "(Required) Used to approve a registrant, deny a registrant, or cancel a previously approved registrant.  (This can only be one of approve,cancel,deny)",
													"type": "text"
												},
												{
													"key": "registrants",
													"value": "[{\"id\":\"laborum ex\",\"email\":\"enim incididunt aliquip\"},{\"id\":\"reprehenderit tempor sin\",\"email\":\"cupidatat in\"}]",
													"description": "List of registrants.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/registrants/status?occurrence_id=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"registrants",
												"status"
											],
											"query": [
												{
													"key": "occurrence_id",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "polls",
					"item": [
						{
							"name": "{poll Id}",
							"item": [
								{
									"name": "Get a webinar poll",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/polls/:pollId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"polls",
												":pollId"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												},
												{
													"key": "pollId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The poll ID"
												}
											]
										},
										"description": "Get a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) details.<br><br>\n**Scopes:** `webinar:read:admin` `webinar:read`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `200`<br>\nWebinar Poll object returned",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "-14804147",
															"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
														},
														{
															"key": "pollId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"cdjfhdsdfd\",\n \"status\": \"ended\",\n \"title\": \"Learn something new\",\n \"anonymous\": false,\n \"poll_type\": 2,\n \"questions\": [\n  {\n   \"name\": \"How are you?\",\n   \"type\": \"multiple\",\n   \"answer_required\": false,\n   \"answers\": [\n    \"Good\",\n    \"Not so good\"\n   ],\n   \"right_answers\": [\n    \"Good\"\n   ]\n  }\n ]\n}"
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n **Error Code:** `4400` <br> Webinar polls disabled. To enable this feature, enable the \"Webinar Polls/Quizzes\" setting in the Zoom web portal's \"Settings\" interface.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "-14804147",
															"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
														},
														{
															"key": "pollId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "-14804147",
															"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
														},
														{
															"key": "pollId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a webinar poll",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "p",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "poll_type",
													"value": "2",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "anonymous",
													"value": "false",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "questions",
													"value": "[{\"name\":\"enim pariatur\",\"type\":\"multiple\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"est pariatur enim mi\",\"ut do incididunt aliqua aute\"],\"right_answers\":[\"tempor d\"],\"prompts\":[{\"prompt_question\":\"off\",\"prompt_right_answers\":[\"cupidatat in in laborum\",\"nulla eu sint esse\"]},{\"prompt_question\":\"sit ullamco\",\"prompt_right_answers\":[\"minim amet officia Excepteur\",\"consectetur sunt\"]}],\"answer_min_character\":20042587,\"answer_max_character\":8083722,\"case_sensitive\":false,\"rating_min_value\":22665825,\"rating_max_value\":-72931511,\"rating_min_label\":\"incididunt proident et Lorem tempor\",\"rating_max_label\":\"ut dolore non culpa\"},{\"name\":\"nostrud esse\",\"type\":\"single\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"irure aliqua\",\"minim eu aliquip dolore mollit\"],\"right_answers\":[\"esse eiusmod\"],\"prompts\":[{\"prompt_question\":\"in\",\"prompt_right_answers\":[\"nostrud esse adipisicing ullamco\",\"Excepteur enim nulla cillum\"]},{\"prompt_question\":\"tempor\",\"prompt_right_answers\":[\"sit et\",\"in deserunt aute\"]}],\"answer_min_character\":33594336,\"answer_max_character\":-78155582,\"case_sensitive\":false,\"rating_min_value\":84162208,\"rating_max_value\":-72033554,\"rating_min_label\":\"culpa consectetur\",\"rating_max_label\":\"ea Ut\"}]",
													"description": "undefined",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/polls/:pollId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"polls",
												":pollId"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												},
												{
													"key": "pollId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The poll ID"
												}
											]
										},
										"description": "Update a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).<br><br>\n**Scopes:** `webinar:write:admin` `webinar:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204`<br>\nWebinar Poll Updated",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "title",
															"value": "incididunt",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "poll_type",
															"value": "2",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "anonymous",
															"value": "false",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "questions",
															"value": "[{\"name\":\"dolor in consequat\",\"type\":\"single\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"ut officia\",\"ex amet enim eu veniam\"],\"right_answers\":[\"eu ullamco\"],\"prompts\":[{\"prompt_question\":\"et anim\",\"prompt_right_answers\":[\"ipsum enim culpa\",\"qui\"]},{\"prompt_question\":\"id nostrud\",\"prompt_right_answers\":[\"proident tempor\",\"elit veniam eu tempor sit\"]}],\"answer_min_character\":8200392,\"answer_max_character\":8100659,\"case_sensitive\":false,\"rating_min_value\":19274228,\"rating_max_value\":-27935111,\"rating_min_label\":\"irure voluptate anim qui occaecat\",\"rating_max_label\":\"tempor minim sit\"},{\"name\":\"enim\",\"type\":\"short_answer\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"reprehenderit\",\"ipsum in\"],\"right_answers\":[\"commodo aliquip in do dolore\"],\"prompts\":[{\"prompt_question\":\"consectetur Duis mollit \",\"prompt_right_answers\":[\"dolore ut pariatur id\",\"labore voluptate in\"]},{\"prompt_question\":\"sed minim\",\"prompt_right_answers\":[\"anim commodo eiusmod sint\",\"veniam non irure\"]}],\"answer_min_character\":76380629,\"answer_max_character\":29642584,\"case_sensitive\":false,\"rating_min_value\":74560674,\"rating_max_value\":-60617322,\"rating_min_label\":\"incididunt minim ut dolor\",\"rating_max_label\":\"voluptate est\"}]",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "-14804147",
															"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
														},
														{
															"key": "pollId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n **Error Code:** `4400` <br>\n* Webinar polls disabled. To enable this feature, enable the \"Webinar Polls/Quizzes\" setting in the Zoom web portal's \"Settings\" interface. \n* Advanced webinar polls disabled. T",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "title",
															"value": "incididunt",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "poll_type",
															"value": "2",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "anonymous",
															"value": "false",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "questions",
															"value": "[{\"name\":\"dolor in consequat\",\"type\":\"single\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"ut officia\",\"ex amet enim eu veniam\"],\"right_answers\":[\"eu ullamco\"],\"prompts\":[{\"prompt_question\":\"et anim\",\"prompt_right_answers\":[\"ipsum enim culpa\",\"qui\"]},{\"prompt_question\":\"id nostrud\",\"prompt_right_answers\":[\"proident tempor\",\"elit veniam eu tempor sit\"]}],\"answer_min_character\":8200392,\"answer_max_character\":8100659,\"case_sensitive\":false,\"rating_min_value\":19274228,\"rating_max_value\":-27935111,\"rating_min_label\":\"irure voluptate anim qui occaecat\",\"rating_max_label\":\"tempor minim sit\"},{\"name\":\"enim\",\"type\":\"short_answer\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"reprehenderit\",\"ipsum in\"],\"right_answers\":[\"commodo aliquip in do dolore\"],\"prompts\":[{\"prompt_question\":\"consectetur Duis mollit \",\"prompt_right_answers\":[\"dolore ut pariatur id\",\"labore voluptate in\"]},{\"prompt_question\":\"sed minim\",\"prompt_right_answers\":[\"anim commodo eiusmod sint\",\"veniam non irure\"]}],\"answer_min_character\":76380629,\"answer_max_character\":29642584,\"case_sensitive\":false,\"rating_min_value\":74560674,\"rating_max_value\":-60617322,\"rating_min_label\":\"incididunt minim ut dolor\",\"rating_max_label\":\"voluptate est\"}]",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "-14804147",
															"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
														},
														{
															"key": "pollId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nWebinar poll not found.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "title",
															"value": "incididunt",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "poll_type",
															"value": "2",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "anonymous",
															"value": "false",
															"description": "undefined",
															"type": "text"
														},
														{
															"key": "questions",
															"value": "[{\"name\":\"dolor in consequat\",\"type\":\"single\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"ut officia\",\"ex amet enim eu veniam\"],\"right_answers\":[\"eu ullamco\"],\"prompts\":[{\"prompt_question\":\"et anim\",\"prompt_right_answers\":[\"ipsum enim culpa\",\"qui\"]},{\"prompt_question\":\"id nostrud\",\"prompt_right_answers\":[\"proident tempor\",\"elit veniam eu tempor sit\"]}],\"answer_min_character\":8200392,\"answer_max_character\":8100659,\"case_sensitive\":false,\"rating_min_value\":19274228,\"rating_max_value\":-27935111,\"rating_min_label\":\"irure voluptate anim qui occaecat\",\"rating_max_label\":\"tempor minim sit\"},{\"name\":\"enim\",\"type\":\"short_answer\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"reprehenderit\",\"ipsum in\"],\"right_answers\":[\"commodo aliquip in do dolore\"],\"prompts\":[{\"prompt_question\":\"consectetur Duis mollit \",\"prompt_right_answers\":[\"dolore ut pariatur id\",\"labore voluptate in\"]},{\"prompt_question\":\"sed minim\",\"prompt_right_answers\":[\"anim commodo eiusmod sint\",\"veniam non irure\"]}],\"answer_min_character\":76380629,\"answer_max_character\":29642584,\"case_sensitive\":false,\"rating_min_value\":74560674,\"rating_max_value\":-60617322,\"rating_min_label\":\"incididunt minim ut dolor\",\"rating_max_label\":\"voluptate est\"}]",
															"description": "undefined",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "-14804147",
															"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
														},
														{
															"key": "pollId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a webinar poll",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/polls/:pollId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"polls",
												":pollId"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												},
												{
													"key": "pollId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The poll ID"
												}
											]
										},
										"description": "Delete a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).<br><br>\n**Scopes:** `webinar:write:admin` `webinar:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n\n"
									},
									"response": [
										{
											"name": "**HTTP Status Code:** `204`<br>\nWebinar Poll deleted",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "-14804147",
															"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
														},
														{
															"key": "pollId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n **Error Code:** `4400` <br> Webinar polls disabled. To enable this feature, enable the \"Webinar Polls/Quizzes\" setting in the Zoom web portal's \"Settings\" interface.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "-14804147",
															"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
														},
														{
															"key": "pollId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "**HTTP Status Code:** `404`<br>\nWebinar poll not found.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/webinars/:webinarId/polls/:pollId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"webinars",
														":webinarId",
														"polls",
														":pollId"
													],
													"variable": [
														{
															"key": "webinarId",
															"value": "-14804147",
															"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
														},
														{
															"key": "pollId",
															"value": "culpa velit reprehenderit",
															"description": "(Required) The poll ID"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "List a webinar's polls ",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/polls?anonymous=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"polls"
									],
									"query": [
										{
											"key": "anonymous",
											"value": "true",
											"description": "Whether to query for polls with the **Anonymous** option enabled: \n* `true` — Query for polls with the **Anonymous** option enabled. \n* `false` — Do not query for polls with the **Anonymous** option enabled."
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								},
								"description": "List all the [polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) of a Webinar.<br><br>\n**Scopes:** `webinar:read:admin` `webinar:read`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nList polls of a Webinar  returned",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/polls?anonymous=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"polls"
											],
											"query": [
												{
													"key": "anonymous",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"cdjfhdsdfd\",\n \"status\": \"ended\",\n \"title\": \"Learn something new\",\n \"anonymous\": false,\n \"poll_type\": 2,\n \"questions\": [\n  {\n   \"name\": \"How are you?\",\n   \"type\": \"multiple\",\n   \"answer_required\": false,\n   \"answers\": [\n    \"Good\",\n    \"Not so good\"\n   ],\n   \"right_answers\": [\n    \"Good\"\n   ]\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n **Error Code:** `4400` <br> Webinar polls disabled. To enable this feature, enable the \"Webinar Polls/Quizzes\" setting in the Zoom web portal's \"Settings\" interface.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/polls?anonymous=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"polls"
											],
											"query": [
												{
													"key": "anonymous",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/polls?anonymous=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"polls"
											],
											"query": [
												{
													"key": "anonymous",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create a webinar's poll",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "p",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "poll_type",
											"value": "2",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "anonymous",
											"value": "false",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "questions",
											"value": "[{\"name\":\"enim pariatur\",\"type\":\"multiple\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"est pariatur enim mi\",\"ut do incididunt aliqua aute\"],\"right_answers\":[\"tempor d\"],\"prompts\":[{\"prompt_question\":\"off\",\"prompt_right_answers\":[\"cupidatat in in laborum\",\"nulla eu sint esse\"]},{\"prompt_question\":\"sit ullamco\",\"prompt_right_answers\":[\"minim amet officia Excepteur\",\"consectetur sunt\"]}],\"answer_min_character\":20042587,\"answer_max_character\":8083722,\"case_sensitive\":false,\"rating_min_value\":22665825,\"rating_max_value\":-72931511,\"rating_min_label\":\"incididunt proident et Lorem tempor\",\"rating_max_label\":\"ut dolore non culpa\"},{\"name\":\"nostrud esse\",\"type\":\"single\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"irure aliqua\",\"minim eu aliquip dolore mollit\"],\"right_answers\":[\"esse eiusmod\"],\"prompts\":[{\"prompt_question\":\"in\",\"prompt_right_answers\":[\"nostrud esse adipisicing ullamco\",\"Excepteur enim nulla cillum\"]},{\"prompt_question\":\"tempor\",\"prompt_right_answers\":[\"sit et\",\"in deserunt aute\"]}],\"answer_min_character\":33594336,\"answer_max_character\":-78155582,\"case_sensitive\":false,\"rating_min_value\":84162208,\"rating_max_value\":-72033554,\"rating_min_label\":\"culpa consectetur\",\"rating_max_label\":\"ea Ut\"}]",
											"description": "undefined",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/polls",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"polls"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								},
								"description": "Create a [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) for a webinar.<br><br>\n**Scopes:** `webinar:write:admin` `webinar:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `201`<br>\nWebinar Poll Created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "incididunt",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "poll_type",
													"value": "2",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "anonymous",
													"value": "false",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "questions",
													"value": "[{\"name\":\"dolor in consequat\",\"type\":\"single\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"ut officia\",\"ex amet enim eu veniam\"],\"right_answers\":[\"eu ullamco\"],\"prompts\":[{\"prompt_question\":\"et anim\",\"prompt_right_answers\":[\"ipsum enim culpa\",\"qui\"]},{\"prompt_question\":\"id nostrud\",\"prompt_right_answers\":[\"proident tempor\",\"elit veniam eu tempor sit\"]}],\"answer_min_character\":8200392,\"answer_max_character\":8100659,\"case_sensitive\":false,\"rating_min_value\":19274228,\"rating_max_value\":-27935111,\"rating_min_label\":\"irure voluptate anim qui occaecat\",\"rating_max_label\":\"tempor minim sit\"},{\"name\":\"enim\",\"type\":\"short_answer\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"reprehenderit\",\"ipsum in\"],\"right_answers\":[\"commodo aliquip in do dolore\"],\"prompts\":[{\"prompt_question\":\"consectetur Duis mollit \",\"prompt_right_answers\":[\"dolore ut pariatur id\",\"labore voluptate in\"]},{\"prompt_question\":\"sed minim\",\"prompt_right_answers\":[\"anim commodo eiusmod sint\",\"veniam non irure\"]}],\"answer_min_character\":76380629,\"answer_max_character\":29642584,\"case_sensitive\":false,\"rating_min_value\":74560674,\"rating_max_value\":-60617322,\"rating_min_label\":\"incididunt minim ut dolor\",\"rating_max_label\":\"voluptate est\"}]",
													"description": "undefined",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"polls"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Location",
											"value": "culpa velit reprehenderit",
											"description": "Location of created Webinar Poll"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"cdjfhdsdfd\",\n \"status\": \"ended\",\n \"title\": \"Learn something new\",\n \"anonymous\": false,\n \"poll_type\": 2,\n \"questions\": [\n  {\n   \"name\": \"How are you?\",\n   \"type\": \"multiple\",\n   \"answer_required\": false,\n   \"answers\": [\n    \"Good\",\n    \"Not so good\"\n   ],\n   \"right_answers\": [\n    \"Good\"\n   ]\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `300`<br>Invalid webinarId.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "incididunt",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "poll_type",
													"value": "2",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "anonymous",
													"value": "false",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "questions",
													"value": "[{\"name\":\"dolor in consequat\",\"type\":\"single\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"ut officia\",\"ex amet enim eu veniam\"],\"right_answers\":[\"eu ullamco\"],\"prompts\":[{\"prompt_question\":\"et anim\",\"prompt_right_answers\":[\"ipsum enim culpa\",\"qui\"]},{\"prompt_question\":\"id nostrud\",\"prompt_right_answers\":[\"proident tempor\",\"elit veniam eu tempor sit\"]}],\"answer_min_character\":8200392,\"answer_max_character\":8100659,\"case_sensitive\":false,\"rating_min_value\":19274228,\"rating_max_value\":-27935111,\"rating_min_label\":\"irure voluptate anim qui occaecat\",\"rating_max_label\":\"tempor minim sit\"},{\"name\":\"enim\",\"type\":\"short_answer\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"reprehenderit\",\"ipsum in\"],\"right_answers\":[\"commodo aliquip in do dolore\"],\"prompts\":[{\"prompt_question\":\"consectetur Duis mollit \",\"prompt_right_answers\":[\"dolore ut pariatur id\",\"labore voluptate in\"]},{\"prompt_question\":\"sed minim\",\"prompt_right_answers\":[\"anim commodo eiusmod sint\",\"veniam non irure\"]}],\"answer_min_character\":76380629,\"answer_max_character\":29642584,\"case_sensitive\":false,\"rating_min_value\":74560674,\"rating_max_value\":-60617322,\"rating_min_label\":\"incididunt minim ut dolor\",\"rating_max_label\":\"voluptate est\"}]",
													"description": "undefined",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"polls"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n **Error Code:** `4400` <br>\n* Webinar polls disabled. To enable this feature, enable the \"Webinar Polls/Quizzes\" setting in the Zoom web portal's \"Settings\" interface. \n* Advanced webinar polls disabled. T",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "incididunt",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "poll_type",
													"value": "2",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "anonymous",
													"value": "false",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "questions",
													"value": "[{\"name\":\"dolor in consequat\",\"type\":\"single\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"ut officia\",\"ex amet enim eu veniam\"],\"right_answers\":[\"eu ullamco\"],\"prompts\":[{\"prompt_question\":\"et anim\",\"prompt_right_answers\":[\"ipsum enim culpa\",\"qui\"]},{\"prompt_question\":\"id nostrud\",\"prompt_right_answers\":[\"proident tempor\",\"elit veniam eu tempor sit\"]}],\"answer_min_character\":8200392,\"answer_max_character\":8100659,\"case_sensitive\":false,\"rating_min_value\":19274228,\"rating_max_value\":-27935111,\"rating_min_label\":\"irure voluptate anim qui occaecat\",\"rating_max_label\":\"tempor minim sit\"},{\"name\":\"enim\",\"type\":\"short_answer\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"reprehenderit\",\"ipsum in\"],\"right_answers\":[\"commodo aliquip in do dolore\"],\"prompts\":[{\"prompt_question\":\"consectetur Duis mollit \",\"prompt_right_answers\":[\"dolore ut pariatur id\",\"labore voluptate in\"]},{\"prompt_question\":\"sed minim\",\"prompt_right_answers\":[\"anim commodo eiusmod sint\",\"veniam non irure\"]}],\"answer_min_character\":76380629,\"answer_max_character\":29642584,\"case_sensitive\":false,\"rating_min_value\":74560674,\"rating_max_value\":-60617322,\"rating_min_label\":\"incididunt minim ut dolor\",\"rating_max_label\":\"voluptate est\"}]",
													"description": "undefined",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"polls"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "incididunt",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "poll_type",
													"value": "2",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "anonymous",
													"value": "false",
													"description": "undefined",
													"type": "text"
												},
												{
													"key": "questions",
													"value": "[{\"name\":\"dolor in consequat\",\"type\":\"single\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"ut officia\",\"ex amet enim eu veniam\"],\"right_answers\":[\"eu ullamco\"],\"prompts\":[{\"prompt_question\":\"et anim\",\"prompt_right_answers\":[\"ipsum enim culpa\",\"qui\"]},{\"prompt_question\":\"id nostrud\",\"prompt_right_answers\":[\"proident tempor\",\"elit veniam eu tempor sit\"]}],\"answer_min_character\":8200392,\"answer_max_character\":8100659,\"case_sensitive\":false,\"rating_min_value\":19274228,\"rating_max_value\":-27935111,\"rating_min_label\":\"irure voluptate anim qui occaecat\",\"rating_max_label\":\"tempor minim sit\"},{\"name\":\"enim\",\"type\":\"short_answer\",\"show_as_dropdown\":false,\"answer_required\":false,\"answers\":[\"reprehenderit\",\"ipsum in\"],\"right_answers\":[\"commodo aliquip in do dolore\"],\"prompts\":[{\"prompt_question\":\"consectetur Duis mollit \",\"prompt_right_answers\":[\"dolore ut pariatur id\",\"labore voluptate in\"]},{\"prompt_question\":\"sed minim\",\"prompt_right_answers\":[\"anim commodo eiusmod sint\",\"veniam non irure\"]}],\"answer_min_character\":76380629,\"answer_max_character\":29642584,\"case_sensitive\":false,\"rating_min_value\":74560674,\"rating_max_value\":-60617322,\"rating_min_label\":\"incididunt minim ut dolor\",\"rating_max_label\":\"voluptate est\"}]",
													"description": "undefined",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"polls"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "livestream",
					"item": [
						{
							"name": "Update a live stream",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "stream_url",
											"value": "et nostrud minim in",
											"description": "(Required) The webinar live stream URL.",
											"type": "text"
										},
										{
											"key": "stream_key",
											"value": "fugiat sunt non",
											"description": "(Required) The webinar live stream name and key.",
											"type": "text"
										},
										{
											"key": "page_url",
											"value": "http://FAFTPeEumULzKoTpec.geB8ohjzx7VpF3M4bgoPJpISqY",
											"description": "(Required) The webinar live stream page's URL.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/livestream",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"livestream"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								},
								"description": "Zoom allows users to [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Use this API to update a webinar's live stream information.<br><br>\n**Prerequisites:**<br>\n* Pro or higher plan with a Webinar Add-on.<br>\n* Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.<br><br>\n**Scopes:** `webinar:write:admin` `webinar:write`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204`<br>\nMeeting live stream updated.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "stream_url",
													"value": "et nostrud minim in",
													"description": "(Required) The webinar live stream URL.",
													"type": "text"
												},
												{
													"key": "stream_key",
													"value": "fugiat sunt non",
													"description": "(Required) The webinar live stream name and key.",
													"type": "text"
												},
												{
													"key": "page_url",
													"value": "http://FAFTPeEumULzKoTpec.geB8ohjzx7VpF3M4bgoPJpISqY",
													"description": "(Required) The webinar live stream page's URL.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/livestream",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"livestream"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `300` <br>\n* Webinar Id does not exist.<br>\n* Invalid Webinar Id.<br>\n**Error Code:** `3001` Webinar does not exist: {webinarId}.<br>\n**Error Code:** `1001` User does not exist: {userId}.<br>",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "stream_url",
													"value": "et nostrud minim in",
													"description": "(Required) The webinar live stream URL.",
													"type": "text"
												},
												{
													"key": "stream_key",
													"value": "fugiat sunt non",
													"description": "(Required) The webinar live stream name and key.",
													"type": "text"
												},
												{
													"key": "page_url",
													"value": "http://FAFTPeEumULzKoTpec.geB8ohjzx7VpF3M4bgoPJpISqY",
													"description": "(Required) The webinar live stream page's URL.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/livestream",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"livestream"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get live stream details",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/livestream",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"livestream"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The webinar's unique ID."
										}
									]
								},
								"description": "Zoom allows users to [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Use this API to get a webinar's live stream configuration details such as Stream URL, Stream Key and Page URL.<br><br>\n**Prerequisites:**<br>\n* Pro or higher plan with a Webinar Add-on.<br>\n* Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.<br><br>\n**Scopes:** `webinar:read:admin` `webinar:read`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nLive Stream details returned.\n\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/livestream",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"livestream"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's unique ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"stream_url\": \"https://somecompany.com/livestream\",\n \"stream_key\": \"Contact It@somecompany.com\",\n \"page_url\": \"https://somecompany.com/livestream/123\"\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `300` <br>\n* Webinar Id does not exist.<br>\n* Invalid Webinar Id.<br>\n**Error Code:** `3001` Webinar does not exist: {webinarId}.<br>\n**Error Code:** `1001` User does not exist: {userId}.<br>",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/livestream",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"livestream"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's unique ID."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update Live Stream Status",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "stop",
											"description": "Update the status of a livestream. This value can be one of the following:\n\n* `start` — Start a webinar live stream.\n\n* `stop` — Stop an ongoing webinar live stream. (This can only be one of start,stop)",
											"type": "text"
										},
										{
											"key": "settings",
											"value": "{\"active_speaker_name\":true,\"display_name\":\"cupidatat sed fugiat\"}",
											"description": "Update the live stream session's settings. You can **only** update settings for a stopped live stream.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/livestream/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"livestream",
										"status"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								},
								"description": "Zoom allows users to [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Use this API to update the status of a webinar's live stream.<br><br>\n**Prerequisites:**<br>\n* Pro or higher plan with a Webinar Add-on.<br>\n* Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.<br><br>\n**Scopes:** `webinar:write:admin` `webinar:write`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `204` <br>\nMeeting live stream updated.\n\n",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "stop",
													"description": "Update the status of a livestream. This value can be one of the following:\n\n* `start` — Start a webinar live stream.\n\n* `stop` — Stop an ongoing webinar live stream. (This can only be one of start,stop)",
													"type": "text"
												},
												{
													"key": "settings",
													"value": "{\"active_speaker_name\":true,\"display_name\":\"cupidatat sed fugiat\"}",
													"description": "Update the live stream session's settings. You can **only** update settings for a stopped live stream.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/livestream/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"livestream",
												"status"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `300` <br>\n* Webinar Id does not exist.<br>\n* Invalid Webinar Id.<br>\n**Error Code:** `3001` Webinar does not exist: {webinarId}.<br>\n**Error Code:** `1001` User does not exist: {userId}.<br>",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "stop",
													"description": "Update the status of a livestream. This value can be one of the following:\n\n* `start` — Start a webinar live stream.\n\n* `stop` — Stop an ongoing webinar live stream. (This can only be one of start,stop)",
													"type": "text"
												},
												{
													"key": "settings",
													"value": "{\"active_speaker_name\":true,\"display_name\":\"cupidatat sed fugiat\"}",
													"description": "Update the live stream session's settings. You can **only** update settings for a stopped live stream.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/webinars/:webinarId/livestream/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"webinars",
												":webinarId",
												"livestream",
												"status"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Get a webinar",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=culpa velit reprehenderit&show_previous_occurrences=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"webinars",
								":webinarId"
							],
							"query": [
								{
									"key": "occurrence_id",
									"value": "culpa velit reprehenderit",
									"description": "Unique Identifier that identifies an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences. When you create a recurring Webinar using [Create a Webinar API](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarcreate), you can retrieve the Occurrence ID from the response of the API call."
								},
								{
									"key": "show_previous_occurrences",
									"value": "true",
									"description": "Set the value of this field to `true` if you would like to view Webinar details of all previous occurrences of a recurring Webinar."
								}
							],
							"variable": [
								{
									"key": "webinarId",
									"value": "-14804147",
									"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
								}
							]
						},
						"description": "Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.<br>Use this API to get details of a scheduled webinar.<br><br>\n**Scopes:** `webinar:read:admin` `webinar:read`<br> \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>**Prerequisites:**\n* Pro or higher plan with a Webinar Add-on."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nSuccess",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=culpa velit reprehenderit&show_previous_occurrences=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "show_previous_occurrences",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"created_at\": \"2019-09-13T15:35:00Z\",\n \"duration\": 60,\n \"host_id\": \"Labcjskdfsjgfg\",\n \"id\": 12345678,\n \"join_url\": \"https://zoom.us/j/12345678\",\n \"settings\": {\n  \"allow_multiple_devices\": true,\n  \"alternative_hosts\": \"\",\n  \"approval_type\": 2,\n  \"audio\": \"both\",\n  \"auto_recording\": \"local\",\n  \"close_registration\": true,\n  \"contact_email\": \"example@example.com\",\n  \"contact_name\": \"Amal\",\n  \"enforce_login\": false,\n  \"enforce_login_domains\": \"\",\n  \"global_dial_in_countries\": [\n   \"US\"\n  ],\n  \"global_dial_in_numbers\": [\n   {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"country_name\": \"US\",\n    \"number\": \"+1 00000\",\n    \"type\": \"toll\"\n   },\n   {\n    \"city\": \"San Jose\",\n    \"country\": \"US\",\n    \"country_name\": \"US\",\n    \"number\": \"+1 111111111\",\n    \"type\": \"toll\"\n   },\n   {\n    \"city\": \"San Jose\",\n    \"country\": \"US\",\n    \"country_name\": \"US\",\n    \"number\": \"+1 11111110\",\n    \"type\": \"toll\"\n   }\n  ],\n  \"hd_video\": false,\n  \"hd_video_for_attendees\": false,\n  \"send_1080p_video_to_attendees\": false,\n  \"host_video\": false,\n  \"on_demand\": false,\n  \"panelists_video\": false,\n  \"practice_session\": false,\n  \"question_answer\": true,\n  \"registrants_confirmation_email\": true,\n  \"registrants_restrict_number\": 0,\n  \"show_share_button\": true,\n  \"registrants_email_notification\": true,\n  \"email_language\": \"en-US\",\n  \"panelists_invitation_email_notification\": true,\n  \"attendees_and_panelists_reminder_email_notification\": {\n   \"enable\": true,\n   \"type\": 1\n  },\n  \"follow_up_attendees_email_notification\": {\n   \"enable\": true,\n   \"type\": 1\n  },\n  \"follow_up_absentees_email_notification\": {\n   \"enable\": true,\n   \"type\": 1\n  }\n },\n \"start_time\": \"2019-08-30T22:00:00Z\",\n \"start_url\": \"https://zoom.us/s/00000011110?zhghTlUT1Rjd2FXRgh0amxoejNQZ1EiLCJjaWQiOiIifQ.NJ0CXWQ-yhI8Xv01JvxityBtzp3Bt7odMOEG2L8DLmY\",\n \"timezone\": \"America/New_York\",\n \"topic\": \"Test Webinar\",\n \"type\": 5,\n \"uuid\": \"nWMHAAAAAAAAAAAAAUDP1A==\"\n}"
						},
						{
							"name": "**HTTP Status Code:** `300`<br>Invalid webinar ID.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=culpa velit reprehenderit&show_previous_occurrences=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "show_previous_occurrences",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								}
							},
							"status": "Multiple Choices",
							"code": 300,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=culpa velit reprehenderit&show_previous_occurrences=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "show_previous_occurrences",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=culpa velit reprehenderit&show_previous_occurrences=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "show_previous_occurrences",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Update a webinar",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "topic",
									"value": "Excepteur consectetur",
									"type": "text"
								},
								{
									"key": "type",
									"value": "5",
									"type": "text"
								},
								{
									"key": "start_time",
									"value": "2017-09-28T03:34:03.498Z",
									"type": "text"
								},
								{
									"key": "duration",
									"value": "15266742",
									"type": "text"
								},
								{
									"key": "timezone",
									"value": "non in laboris sunt",
									"type": "text"
								},
								{
									"key": "password",
									"value": "",
									"type": "text"
								},
								{
									"key": "agenda",
									"value": "et reprehenderit non cupidatat",
									"type": "text"
								},
								{
									"key": "tracking_fields",
									"value": "[{\"field\":\"dolore veniam enim ea\",\"value\":\"dolore esse voluptate minim\"},{\"field\":\"eu minim consequat fu\",\"value\":\"culpa esse est\"}]",
									"type": "text"
								},
								{
									"key": "recurrence",
									"value": "{\"type\":1,\"repeat_interval\":-6498220,\"weekly_days\":\"1\",\"monthly_day\":1,\"monthly_week\":3,\"monthly_week_day\":1,\"end_times\":1,\"end_date_time\":\"1962-08-08T05:12:13.547Z\"}",
									"type": "text"
								},
								{
									"key": "settings",
									"value": "{\"host_video\":false,\"panelists_video\":true,\"practice_session\":false,\"hd_video\":false,\"hd_video_for_attendees\":false,\"send_1080p_video_to_attendees\":false,\"approval_type\":2,\"registration_type\":1,\"audio\":\"both\",\"auto_recording\":\"none\",\"enforce_login\":true,\"enforce_login_domains\":\"est labore exercitation\",\"alternative_hosts\":\"laborum tempor\",\"close_registration\":true,\"show_share_button\":false,\"allow_multiple_devices\":false,\"on_demand\":false,\"global_dial_in_countries\":[\"elit sint incididunt\",\"in cillum cupidatat\"],\"contact_name\":\"laboris\",\"contact_email\":\"culpa irure in Lorem\",\"registrants_confirmation_email\":true,\"registrants_restrict_number\":0,\"notify_registrants\":true,\"post_webinar_survey\":false,\"survey_url\":\"id in ad incididunt\",\"registrants_email_notification\":true,\"meeting_authentication\":false,\"authentication_option\":\"fugiat amet\",\"authentication_domains\":\"do eiusmod\",\"authentication_name\":\"ut voluptate qui in dolor\",\"question_and_answer\":{\"enable\":true,\"allow_anonymous_questions\":false,\"answer_questions\":\"all\",\"attendees_can_upvote\":true,\"attendees_can_comment\":true},\"email_language\":\"dolor Ut\",\"panelists_invitation_email_notification\":true,\"attendees_and_panelists_reminder_email_notification\":{\"enable\":false,\"type\":1},\"follow_up_attendees_email_notification\":{\"enable\":false,\"type\":3},\"follow_up_absentees_email_notification\":{\"enable\":false,\"type\":6},\"language_interpretation\":{\"enable\":false,\"interpreters\":[{\"email\":\"BvvVkUnGm@qhMwGovGPNOlkNcYwqcXFycBkqR.qj\",\"languages\":\"in tempor do dolore\"},{\"email\":\"kCdRFHWbfqq@KuVmvGchakLYHAsuZPrHlB.eu\",\"languages\":\"dolore\"}]}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=culpa velit reprehenderit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"webinars",
								":webinarId"
							],
							"query": [
								{
									"key": "occurrence_id",
									"value": "culpa velit reprehenderit",
									"description": "Webinar occurrence id. Support change of agenda, start_time, duration, settings: {host_video, panelist_video, hd_video, watermark, auto_recording}"
								}
							],
							"variable": [
								{
									"key": "webinarId",
									"value": "-14804147",
									"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
								}
							]
						},
						"description": "Use this API to make updates to a scheduled webinar. \n\n**Scopes:** `webinar:write:admin`, `webinar:write` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` \n* This API has a daily rate limit of **100 requests per day**. The rate limit is applied to the `userId` of the **webinar host** used to make the request. \n\n**Prerequisites:** \n* A Pro or higher plan with a Webinar add-on."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nWebinar subscription plan is missing. Enable webinar for this user once the subscription is added:{userId}.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "topic",
											"value": "dolor culpa pariatur aliqua",
											"type": "text"
										},
										{
											"key": "type",
											"value": "5",
											"type": "text"
										},
										{
											"key": "start_time",
											"value": "1975-02-24T14:19:09.044Z",
											"type": "text"
										},
										{
											"key": "duration",
											"value": "49556216",
											"type": "text"
										},
										{
											"key": "timezone",
											"value": "voluptate in dolor",
											"type": "text"
										},
										{
											"key": "password",
											"value": "ut d",
											"type": "text"
										},
										{
											"key": "agenda",
											"value": "esse sunt dolor",
											"type": "text"
										},
										{
											"key": "tracking_fields",
											"value": "[{\"field\":\"tempor sunt\",\"value\":\"nulla dolor consequat\"},{\"field\":\"officia ex\",\"value\":\"eiusmod labore ex adipisicing\"}]",
											"type": "text"
										},
										{
											"key": "recurrence",
											"value": "{\"type\":2,\"repeat_interval\":-60189612,\"weekly_days\":\"1\",\"monthly_day\":1,\"monthly_week\":1,\"monthly_week_day\":3,\"end_times\":1,\"end_date_time\":\"1960-10-15T10:51:09.012Z\"}",
											"type": "text"
										},
										{
											"key": "settings",
											"value": "{\"host_video\":true,\"panelists_video\":true,\"practice_session\":false,\"hd_video\":false,\"hd_video_for_attendees\":false,\"send_1080p_video_to_attendees\":false,\"approval_type\":2,\"registration_type\":1,\"audio\":\"both\",\"auto_recording\":\"none\",\"enforce_login\":false,\"enforce_login_domains\":\"ad Dui\",\"alternative_hosts\":\"non voluptate do\",\"close_registration\":true,\"show_share_button\":true,\"allow_multiple_devices\":false,\"on_demand\":false,\"global_dial_in_countries\":[\"Ut in sint quis\",\"non\"],\"contact_name\":\"anim exercitation do\",\"contact_email\":\"voluptate consectetur\",\"registrants_confirmation_email\":false,\"registrants_restrict_number\":0,\"notify_registrants\":false,\"post_webinar_survey\":false,\"survey_url\":\"sint commodo velit magna\",\"registrants_email_notification\":false,\"meeting_authentication\":true,\"authentication_option\":\"in dolore Lorem pariatur\",\"authentication_domains\":\"Ut cupidatat\",\"authentication_name\":\"nulla cupidatat in\",\"question_and_answer\":{\"enable\":false,\"allow_anonymous_questions\":true,\"answer_questions\":\"only\",\"attendees_can_upvote\":false,\"attendees_can_comment\":false},\"email_language\":\"proident cupidatat incididunt voluptate\",\"panelists_invitation_email_notification\":false,\"attendees_and_panelists_reminder_email_notification\":{\"enable\":true,\"type\":2},\"follow_up_attendees_email_notification\":{\"enable\":true,\"type\":1},\"follow_up_absentees_email_notification\":{\"enable\":true,\"type\":6},\"language_interpretation\":{\"enable\":false,\"interpreters\":[{\"email\":\"y9Ail2i9Pp@VwIwuLuihA.ud\",\"languages\":\"Ut id\"},{\"email\":\"b-RQQ8vdJZ@V.zztz\",\"languages\":\"tempor culpa veniam\"}]}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `204`<br>\nWebinar updated.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "topic",
											"value": "dolor culpa pariatur aliqua",
											"type": "text"
										},
										{
											"key": "type",
											"value": "5",
											"type": "text"
										},
										{
											"key": "start_time",
											"value": "1975-02-24T14:19:09.044Z",
											"type": "text"
										},
										{
											"key": "duration",
											"value": "49556216",
											"type": "text"
										},
										{
											"key": "timezone",
											"value": "voluptate in dolor",
											"type": "text"
										},
										{
											"key": "password",
											"value": "ut d",
											"type": "text"
										},
										{
											"key": "agenda",
											"value": "esse sunt dolor",
											"type": "text"
										},
										{
											"key": "tracking_fields",
											"value": "[{\"field\":\"tempor sunt\",\"value\":\"nulla dolor consequat\"},{\"field\":\"officia ex\",\"value\":\"eiusmod labore ex adipisicing\"}]",
											"type": "text"
										},
										{
											"key": "recurrence",
											"value": "{\"type\":2,\"repeat_interval\":-60189612,\"weekly_days\":\"1\",\"monthly_day\":1,\"monthly_week\":1,\"monthly_week_day\":3,\"end_times\":1,\"end_date_time\":\"1960-10-15T10:51:09.012Z\"}",
											"type": "text"
										},
										{
											"key": "settings",
											"value": "{\"host_video\":true,\"panelists_video\":true,\"practice_session\":false,\"hd_video\":false,\"hd_video_for_attendees\":false,\"send_1080p_video_to_attendees\":false,\"approval_type\":2,\"registration_type\":1,\"audio\":\"both\",\"auto_recording\":\"none\",\"enforce_login\":false,\"enforce_login_domains\":\"ad Dui\",\"alternative_hosts\":\"non voluptate do\",\"close_registration\":true,\"show_share_button\":true,\"allow_multiple_devices\":false,\"on_demand\":false,\"global_dial_in_countries\":[\"Ut in sint quis\",\"non\"],\"contact_name\":\"anim exercitation do\",\"contact_email\":\"voluptate consectetur\",\"registrants_confirmation_email\":false,\"registrants_restrict_number\":0,\"notify_registrants\":false,\"post_webinar_survey\":false,\"survey_url\":\"sint commodo velit magna\",\"registrants_email_notification\":false,\"meeting_authentication\":true,\"authentication_option\":\"in dolore Lorem pariatur\",\"authentication_domains\":\"Ut cupidatat\",\"authentication_name\":\"nulla cupidatat in\",\"question_and_answer\":{\"enable\":false,\"allow_anonymous_questions\":true,\"answer_questions\":\"only\",\"attendees_can_upvote\":false,\"attendees_can_comment\":false},\"email_language\":\"proident cupidatat incididunt voluptate\",\"panelists_invitation_email_notification\":false,\"attendees_and_panelists_reminder_email_notification\":{\"enable\":true,\"type\":2},\"follow_up_attendees_email_notification\":{\"enable\":true,\"type\":1},\"follow_up_absentees_email_notification\":{\"enable\":true,\"type\":6},\"language_interpretation\":{\"enable\":false,\"interpreters\":[{\"email\":\"y9Ail2i9Pp@VwIwuLuihA.ud\",\"languages\":\"Ut id\"},{\"email\":\"b-RQQ8vdJZ@V.zztz\",\"languages\":\"tempor culpa veniam\"}]}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `300`<br>Invalid webinar Id.<br>\nInvalid recurrence settings.<br>\nA maximum of \"{rateLimitNumber}\" webinars can be created and updated for a single user in one day.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "topic",
											"value": "dolor culpa pariatur aliqua",
											"type": "text"
										},
										{
											"key": "type",
											"value": "5",
											"type": "text"
										},
										{
											"key": "start_time",
											"value": "1975-02-24T14:19:09.044Z",
											"type": "text"
										},
										{
											"key": "duration",
											"value": "49556216",
											"type": "text"
										},
										{
											"key": "timezone",
											"value": "voluptate in dolor",
											"type": "text"
										},
										{
											"key": "password",
											"value": "ut d",
											"type": "text"
										},
										{
											"key": "agenda",
											"value": "esse sunt dolor",
											"type": "text"
										},
										{
											"key": "tracking_fields",
											"value": "[{\"field\":\"tempor sunt\",\"value\":\"nulla dolor consequat\"},{\"field\":\"officia ex\",\"value\":\"eiusmod labore ex adipisicing\"}]",
											"type": "text"
										},
										{
											"key": "recurrence",
											"value": "{\"type\":2,\"repeat_interval\":-60189612,\"weekly_days\":\"1\",\"monthly_day\":1,\"monthly_week\":1,\"monthly_week_day\":3,\"end_times\":1,\"end_date_time\":\"1960-10-15T10:51:09.012Z\"}",
											"type": "text"
										},
										{
											"key": "settings",
											"value": "{\"host_video\":true,\"panelists_video\":true,\"practice_session\":false,\"hd_video\":false,\"hd_video_for_attendees\":false,\"send_1080p_video_to_attendees\":false,\"approval_type\":2,\"registration_type\":1,\"audio\":\"both\",\"auto_recording\":\"none\",\"enforce_login\":false,\"enforce_login_domains\":\"ad Dui\",\"alternative_hosts\":\"non voluptate do\",\"close_registration\":true,\"show_share_button\":true,\"allow_multiple_devices\":false,\"on_demand\":false,\"global_dial_in_countries\":[\"Ut in sint quis\",\"non\"],\"contact_name\":\"anim exercitation do\",\"contact_email\":\"voluptate consectetur\",\"registrants_confirmation_email\":false,\"registrants_restrict_number\":0,\"notify_registrants\":false,\"post_webinar_survey\":false,\"survey_url\":\"sint commodo velit magna\",\"registrants_email_notification\":false,\"meeting_authentication\":true,\"authentication_option\":\"in dolore Lorem pariatur\",\"authentication_domains\":\"Ut cupidatat\",\"authentication_name\":\"nulla cupidatat in\",\"question_and_answer\":{\"enable\":false,\"allow_anonymous_questions\":true,\"answer_questions\":\"only\",\"attendees_can_upvote\":false,\"attendees_can_comment\":false},\"email_language\":\"proident cupidatat incididunt voluptate\",\"panelists_invitation_email_notification\":false,\"attendees_and_panelists_reminder_email_notification\":{\"enable\":true,\"type\":2},\"follow_up_attendees_email_notification\":{\"enable\":true,\"type\":1},\"follow_up_absentees_email_notification\":{\"enable\":true,\"type\":6},\"language_interpretation\":{\"enable\":false,\"interpreters\":[{\"email\":\"y9Ail2i9Pp@VwIwuLuihA.ud\",\"languages\":\"Ut id\"},{\"email\":\"b-RQQ8vdJZ@V.zztz\",\"languages\":\"tempor culpa veniam\"}]}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								}
							},
							"status": "Multiple Choices",
							"code": 300,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>\n**Error Code:** `3003`<br>\nYou are not the meeting host.<br>\n* Users in '{0}' have been blocked from joining meetings and webi",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "topic",
											"value": "dolor culpa pariatur aliqua",
											"type": "text"
										},
										{
											"key": "type",
											"value": "5",
											"type": "text"
										},
										{
											"key": "start_time",
											"value": "1975-02-24T14:19:09.044Z",
											"type": "text"
										},
										{
											"key": "duration",
											"value": "49556216",
											"type": "text"
										},
										{
											"key": "timezone",
											"value": "voluptate in dolor",
											"type": "text"
										},
										{
											"key": "password",
											"value": "ut d",
											"type": "text"
										},
										{
											"key": "agenda",
											"value": "esse sunt dolor",
											"type": "text"
										},
										{
											"key": "tracking_fields",
											"value": "[{\"field\":\"tempor sunt\",\"value\":\"nulla dolor consequat\"},{\"field\":\"officia ex\",\"value\":\"eiusmod labore ex adipisicing\"}]",
											"type": "text"
										},
										{
											"key": "recurrence",
											"value": "{\"type\":2,\"repeat_interval\":-60189612,\"weekly_days\":\"1\",\"monthly_day\":1,\"monthly_week\":1,\"monthly_week_day\":3,\"end_times\":1,\"end_date_time\":\"1960-10-15T10:51:09.012Z\"}",
											"type": "text"
										},
										{
											"key": "settings",
											"value": "{\"host_video\":true,\"panelists_video\":true,\"practice_session\":false,\"hd_video\":false,\"hd_video_for_attendees\":false,\"send_1080p_video_to_attendees\":false,\"approval_type\":2,\"registration_type\":1,\"audio\":\"both\",\"auto_recording\":\"none\",\"enforce_login\":false,\"enforce_login_domains\":\"ad Dui\",\"alternative_hosts\":\"non voluptate do\",\"close_registration\":true,\"show_share_button\":true,\"allow_multiple_devices\":false,\"on_demand\":false,\"global_dial_in_countries\":[\"Ut in sint quis\",\"non\"],\"contact_name\":\"anim exercitation do\",\"contact_email\":\"voluptate consectetur\",\"registrants_confirmation_email\":false,\"registrants_restrict_number\":0,\"notify_registrants\":false,\"post_webinar_survey\":false,\"survey_url\":\"sint commodo velit magna\",\"registrants_email_notification\":false,\"meeting_authentication\":true,\"authentication_option\":\"in dolore Lorem pariatur\",\"authentication_domains\":\"Ut cupidatat\",\"authentication_name\":\"nulla cupidatat in\",\"question_and_answer\":{\"enable\":false,\"allow_anonymous_questions\":true,\"answer_questions\":\"only\",\"attendees_can_upvote\":false,\"attendees_can_comment\":false},\"email_language\":\"proident cupidatat incididunt voluptate\",\"panelists_invitation_email_notification\":false,\"attendees_and_panelists_reminder_email_notification\":{\"enable\":true,\"type\":2},\"follow_up_attendees_email_notification\":{\"enable\":true,\"type\":1},\"follow_up_absentees_email_notification\":{\"enable\":true,\"type\":6},\"language_interpretation\":{\"enable\":false,\"interpreters\":[{\"email\":\"y9Ail2i9Pp@VwIwuLuihA.ud\",\"languages\":\"Ut id\"},{\"email\":\"b-RQQ8vdJZ@V.zztz\",\"languages\":\"tempor culpa veniam\"}]}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "topic",
											"value": "dolor culpa pariatur aliqua",
											"type": "text"
										},
										{
											"key": "type",
											"value": "5",
											"type": "text"
										},
										{
											"key": "start_time",
											"value": "1975-02-24T14:19:09.044Z",
											"type": "text"
										},
										{
											"key": "duration",
											"value": "49556216",
											"type": "text"
										},
										{
											"key": "timezone",
											"value": "voluptate in dolor",
											"type": "text"
										},
										{
											"key": "password",
											"value": "ut d",
											"type": "text"
										},
										{
											"key": "agenda",
											"value": "esse sunt dolor",
											"type": "text"
										},
										{
											"key": "tracking_fields",
											"value": "[{\"field\":\"tempor sunt\",\"value\":\"nulla dolor consequat\"},{\"field\":\"officia ex\",\"value\":\"eiusmod labore ex adipisicing\"}]",
											"type": "text"
										},
										{
											"key": "recurrence",
											"value": "{\"type\":2,\"repeat_interval\":-60189612,\"weekly_days\":\"1\",\"monthly_day\":1,\"monthly_week\":1,\"monthly_week_day\":3,\"end_times\":1,\"end_date_time\":\"1960-10-15T10:51:09.012Z\"}",
											"type": "text"
										},
										{
											"key": "settings",
											"value": "{\"host_video\":true,\"panelists_video\":true,\"practice_session\":false,\"hd_video\":false,\"hd_video_for_attendees\":false,\"send_1080p_video_to_attendees\":false,\"approval_type\":2,\"registration_type\":1,\"audio\":\"both\",\"auto_recording\":\"none\",\"enforce_login\":false,\"enforce_login_domains\":\"ad Dui\",\"alternative_hosts\":\"non voluptate do\",\"close_registration\":true,\"show_share_button\":true,\"allow_multiple_devices\":false,\"on_demand\":false,\"global_dial_in_countries\":[\"Ut in sint quis\",\"non\"],\"contact_name\":\"anim exercitation do\",\"contact_email\":\"voluptate consectetur\",\"registrants_confirmation_email\":false,\"registrants_restrict_number\":0,\"notify_registrants\":false,\"post_webinar_survey\":false,\"survey_url\":\"sint commodo velit magna\",\"registrants_email_notification\":false,\"meeting_authentication\":true,\"authentication_option\":\"in dolore Lorem pariatur\",\"authentication_domains\":\"Ut cupidatat\",\"authentication_name\":\"nulla cupidatat in\",\"question_and_answer\":{\"enable\":false,\"allow_anonymous_questions\":true,\"answer_questions\":\"only\",\"attendees_can_upvote\":false,\"attendees_can_comment\":false},\"email_language\":\"proident cupidatat incididunt voluptate\",\"panelists_invitation_email_notification\":false,\"attendees_and_panelists_reminder_email_notification\":{\"enable\":true,\"type\":2},\"follow_up_attendees_email_notification\":{\"enable\":true,\"type\":1},\"follow_up_absentees_email_notification\":{\"enable\":true,\"type\":6},\"language_interpretation\":{\"enable\":false,\"interpreters\":[{\"email\":\"y9Ail2i9Pp@VwIwuLuihA.ud\",\"languages\":\"Ut id\"},{\"email\":\"b-RQQ8vdJZ@V.zztz\",\"languages\":\"tempor culpa veniam\"}]}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete a webinar",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=culpa velit reprehenderit&cancel_webinar_reminder=culpa velit reprehenderit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"webinars",
								":webinarId"
							],
							"query": [
								{
									"key": "occurrence_id",
									"value": "culpa velit reprehenderit",
									"description": "The meeting occurrence ID."
								},
								{
									"key": "cancel_webinar_reminder",
									"value": "culpa velit reprehenderit",
									"description": "`true`: Notify panelists and registrants about the webinar cancellation via email. \n\n`false`: Do not send any email notification to webinar registrants and panelists. \n\nThe default value of this field is `false`."
								}
							],
							"variable": [
								{
									"key": "webinarId",
									"value": "-14804147",
									"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
								}
							]
						},
						"description": "Delete a Webinar.<br><br>\n**Scopes:** `webinar:write:admin` `webinar:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n**Prerequisites:**<br>\n* Pro or higher plan with a Webinar Add-on."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nSuccess",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=culpa velit reprehenderit&cancel_webinar_reminder=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "cancel_webinar_reminder",
											"value": "culpa velit reprehenderit"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `204`<br>\nWebinar deleted.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=culpa velit reprehenderit&cancel_webinar_reminder=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "cancel_webinar_reminder",
											"value": "culpa velit reprehenderit"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `300`<br>Invalid webinar ID.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=culpa velit reprehenderit&cancel_webinar_reminder=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "cancel_webinar_reminder",
											"value": "culpa velit reprehenderit"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								}
							},
							"status": "Multiple Choices",
							"code": 300,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>\n**Error Code:** `3002`<br>\nSorry, you cannot delete this webinar since it is in progress.<br>\n**Error Code:** `3003`<br>\nYou a",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=culpa velit reprehenderit&cancel_webinar_reminder=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "cancel_webinar_reminder",
											"value": "culpa velit reprehenderit"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId?occurrence_id=culpa velit reprehenderit&cancel_webinar_reminder=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "cancel_webinar_reminder",
											"value": "culpa velit reprehenderit"
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Update webinar status",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "action",
									"value": "end",
									"description": " (This can only be one of end)",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/webinars/:webinarId/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"webinars",
								":webinarId",
								"status"
							],
							"variable": [
								{
									"key": "webinarId",
									"value": "-14804147",
									"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
								}
							]
						},
						"description": "Update a webinar's status. Use this API to end an ongoing webinar.<br><br>\n**Scopes:** `webinar:write:admin` `webinar:write`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n**Prerequisites:**<br>\n* The account must hold a valid [Webinar plan](https://zoom.us/webinar)."
					},
					"response": [
						{
							"name": "Webinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "end",
											"description": " (This can only be one of end)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"status"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Webinar's status updated.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "end",
											"description": " (This can only be one of end)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"status"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `400`<br>\nBad request<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>\n**Error Code:** `3003`<br>\nYou are not the meeting host.<br>\n**Error Code:** `3063`<br>\nCan not end on-premise user's meeting:",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "end",
											"description": " (This can only be one of end)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"status"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3001`<br>\nWebinar {webinarId} not found or has expired.<br>",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "end",
											"description": " (This can only be one of end)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"status"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Perform batch registration",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auto_approve",
									"value": "true",
									"description": "If a meeting was scheduled with approval_type `1` (manual approval), but you would like to automatically approve the registrants that are added via this API, you can set the value of this field to `true`. \n\nYou **cannot** use this field to change approval setting for a meeting  that was originally scheduled with approval_type `0` (automatic approval).",
									"type": "text"
								},
								{
									"key": "registrants",
									"value": "[{\"first_name\":\"nisi anim\",\"email\":\"W6xgYZx6EjBFj@C.lr\",\"last_name\":\"do fugiat Excepteur\"},{\"first_name\":\"ex irure fugiat\",\"email\":\"XVPALs@ZIxkSiBOOUvpGCdzpcwIXrlo.get\",\"last_name\":\"sunt\"}]",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/webinars/:webinarId/batch_registrants",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"webinars",
								":webinarId",
								"batch_registrants"
							],
							"variable": [
								{
									"key": "webinarId",
									"value": "culpa velit reprehenderit",
									"description": "(Required) Unique identifier of the webinar."
								}
							]
						},
						"description": "Use this API to register up to 30 registrants at once for a scheduled webinar that requires [registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-webinar-with-registration). <br>\n\n**Prerequisites:**<br>\n* The webinar host must be a Licensed user.\n* The webinar should be of type `5`, i.e., it should be a scheduled webinar. Other types of webinars are not supported by this API.<br><br>\n**Scope:** `webinar:write`, `webinar:write:admin`<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>\n\n\n\n\n\n\n\n"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200` **OK** <br>\nRegistrants added.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "auto_approve",
											"value": "false",
											"description": "If a meeting was scheduled with approval_type `1` (manual approval), but you would like to automatically approve the registrants that are added via this API, you can set the value of this field to `true`. \n\nYou **cannot** use this field to change approval setting for a meeting  that was originally scheduled with approval_type `0` (automatic approval).",
											"type": "text"
										},
										{
											"key": "registrants",
											"value": "[{\"first_name\":\"et Excepteur ipsum\",\"email\":\"YeoH9H@wJSMwuGDuzwRZgtKxxHrHvHlGTqml.ukuc\",\"last_name\":\"consectetur mollit\"},{\"first_name\":\"nostrud dolor\",\"email\":\"bRdEM@EICBdH.wge\",\"last_name\":\"do ut\"}]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/batch_registrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"batch_registrants"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Unique identifier of the webinar."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"registrants\": [\n  {\n   \"registrant_id\": \"conseret14re\",\n   \"email\": \"example@example.com\",\n   \"join_url\": \" https://zoom.us/w/9999999?tk=oZuwHfdgAAAAAAAAAAAAAAAA&uuid=WN_XW4_SdxBBBBxLDQt\"\n  },\n  {\n   \"registrant_id\": \"fdgsfh2ey82fuh\",\n   \"email\": \"example-2@example.com\",\n   \"join_url\": \" https://zoom.us/w/9999999?tk=oZu52542356AAAAAA&uuid=WN_XW4_SdxBBBBxLDQt\"\n  },\n  {\n   \"registrant_id\": \"hdsfhjf3iwh\",\n   \"email\": \"example-3@example.com\",\n   \"join_url\": \" https://zoom.us/w/9999999?tk=ozghdfdsghf36AAA&uuid=WN_XW4_SdxBBBBxLDQt\"\n  }\n ]\n}"
						},
						{
							"name": "**HTTP Status Code:** `400` **Bad Request** <br>\n**Error Code:** `200`<br> Webinar plan is missing. You must subscribe to the webinar plan and enable webinar for this user: {0} in order to perform this action.<br><br>\n**Error Code:** `300`<br> \nThis API c",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "auto_approve",
											"value": "false",
											"description": "If a meeting was scheduled with approval_type `1` (manual approval), but you would like to automatically approve the registrants that are added via this API, you can set the value of this field to `true`. \n\nYou **cannot** use this field to change approval setting for a meeting  that was originally scheduled with approval_type `0` (automatic approval).",
											"type": "text"
										},
										{
											"key": "registrants",
											"value": "[{\"first_name\":\"et Excepteur ipsum\",\"email\":\"YeoH9H@wJSMwuGDuzwRZgtKxxHrHvHlGTqml.ukuc\",\"last_name\":\"consectetur mollit\"},{\"first_name\":\"nostrud dolor\",\"email\":\"bRdEM@EICBdH.wge\",\"last_name\":\"do ut\"}]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/batch_registrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"batch_registrants"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Unique identifier of the webinar."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404` **Not Found** <br>\n**Error Code:** `3001`<br>\nWebinar does not exist: {0}.<br><br>\n**Error Code:** `3043`<br>\nWebinar has reached maximum attendee capacity.<br><br>\n**Error Code:** `404`<br>\nRegistration has not been enabled fo",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "auto_approve",
											"value": "false",
											"description": "If a meeting was scheduled with approval_type `1` (manual approval), but you would like to automatically approve the registrants that are added via this API, you can set the value of this field to `true`. \n\nYou **cannot** use this field to change approval setting for a meeting  that was originally scheduled with approval_type `0` (automatic approval).",
											"type": "text"
										},
										{
											"key": "registrants",
											"value": "[{\"first_name\":\"et Excepteur ipsum\",\"email\":\"YeoH9H@wJSMwuGDuzwRZgtKxxHrHvHlGTqml.ukuc\",\"last_name\":\"consectetur mollit\"},{\"first_name\":\"nostrud dolor\",\"email\":\"bRdEM@EICBdH.wge\",\"last_name\":\"do ut\"}]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/batch_registrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"batch_registrants"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Unique identifier of the webinar."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `429` <br> You have exceeded the daily rate limit of \"{0}\" for webinar **Perform batch registration** API requests for the registrant \"{1}\". You can resume these API requests at GMT 00:00:00.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "auto_approve",
											"value": "false",
											"description": "If a meeting was scheduled with approval_type `1` (manual approval), but you would like to automatically approve the registrants that are added via this API, you can set the value of this field to `true`. \n\nYou **cannot** use this field to change approval setting for a meeting  that was originally scheduled with approval_type `0` (automatic approval).",
											"type": "text"
										},
										{
											"key": "registrants",
											"value": "[{\"first_name\":\"et Excepteur ipsum\",\"email\":\"YeoH9H@wJSMwuGDuzwRZgtKxxHrHvHlGTqml.ukuc\",\"last_name\":\"consectetur mollit\"},{\"first_name\":\"nostrud dolor\",\"email\":\"bRdEM@EICBdH.wge\",\"last_name\":\"do ut\"}]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/batch_registrants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"batch_registrants"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) Unique identifier of the webinar."
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get webinar tracking sources",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/webinars/:webinarId/tracking_sources",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"webinars",
								":webinarId",
								"tracking_sources"
							],
							"variable": [
								{
									"key": "webinarId",
									"value": "-14804147",
									"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
								}
							]
						},
						"description": "[Webinar Registration Tracking Sources](https://support.zoom.us/hc/en-us/articles/360000315683-Webinar-Registration-Source-Tracking) allow you to see where your registrants are coming from if you share the webinar registration page in multiple platforms. You can then use the source tracking to see the number of registrants generated from each platform.<br> Use this API to list information on all the tracking sources of a Webinar.<br>\n**Scopes:** `webinar:read:admin`, `webinar:read`<br>\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n**Prerequisites**:<br>\n* [Webinar license](https://zoom.us/webinar).\n* Registration must be required for the Webinar.\n"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/tracking_sources",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"tracking_sources"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"total_records\": 1,\n \"tracking_sources\": [\n  {\n   \"id\": \"1100011100\",\n   \"source_name\": \"general\",\n   \"visitor_count\": 2,\n   \"registrationr_count\": 1,\n   \"tracking_url\": \"https://zoom.us/webinar/register/1100011100/WN_6ToMP5n6Quas2SdMjIWu7Q\"\n  }\n ]\n}"
						}
					]
				},
				{
					"name": "Create webinar's invite links",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ttl",
									"value": "7200",
									"description": "undefined",
									"type": "text"
								},
								{
									"key": "attendees",
									"value": "[{\"name\":\"mollit non\"},{\"name\":\"Excepteur ad\"}]",
									"description": "undefined",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/webinars/:webinarId/invite_links",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"webinars",
								":webinarId",
								"invite_links"
							],
							"variable": [
								{
									"key": "webinarId",
									"value": "-14804147",
									"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
								}
							]
						},
						"description": "Use this API to create a batch of invitation links for a webinar.\n\n**Scopes**: `webinar:write:admin`, `webinar:write`</br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`\n\n**Prerequisites:**\n\n* Business, Education or API Plan with Webinar add-on."
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `201` <br>\nWebinar Invite Links Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ttl",
											"value": "7200",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "attendees",
											"value": "[{\"name\":\"culpa et\"},{\"name\":\"Lorem\"}]",
											"description": "undefined",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/invite_links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"invite_links"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Location",
									"value": "culpa velit reprehenderit",
									"description": "The location of the created webinar invite links."
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"attendees\": [\n  {\n   \"name\": \"Mike Brown\",\n   \"join_url\": \"https://zoom.us/j/935364234?wp=9a84R6-YFwCCP04ss8PwwImO-3Rm9HSM0RwPn3Ll05WGBEJJDI21846QS-nJuNs7JKcwHTG2VoILGWJkljPTKw.tRxEV0sF4mEBkAaE\"\n  }\n ]\n}"
						},
						{
							"name": "**HTTP Status Code:** `400` **Bad Request**<br>\n**Error Code:** `300`<br>\n* Webinar Id does not exist.<br>\n* Invalid Webinar Id.<br>\n**Error Code:** `3001` Webinar does not exist: {webinarId}.<br>\n**Error Code:** `1001` User does not exist: {userId}.<br>\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ttl",
											"value": "7200",
											"description": "undefined",
											"type": "text"
										},
										{
											"key": "attendees",
											"value": "[{\"name\":\"culpa et\"},{\"name\":\"Lorem\"}]",
											"description": "undefined",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/webinars/:webinarId/invite_links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"webinars",
										":webinarId",
										"invite_links"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "past webinars",
			"item": [
				{
					"name": "{webinar Id}",
					"item": [
						{
							"name": "List webinar participants",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/past_webinars/:webinarId/participants?page_size=30&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_webinars",
										":webinarId",
										"participants"
									],
									"query": [
										{
											"key": "page_size",
											"value": "30",
											"description": "The number of records returned within a single API call."
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit",
											"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
										}
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The webinar's ID. To get this value, use the [**List webinars**](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinars) API."
										}
									]
								},
								"description": "Use this API to list all the participants who attended a webinar hosted in the past. \n\n**Scopes:** `webinar:read:admin`, `webinar:read` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` \n\n**Prerequisites:** \n* A Pro or higher plan with a Webinar add-on."
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nParticipants list returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/participants?page_size=30&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's ID. To get this value, use the [**List webinars**](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinars) API."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"page_count\": 1,\n \"page_size\": 1,\n \"total_records\": 1,\n \"next_page_token\": \"mdnf23qbsf4wr\",\n \"participants\": [\n  {\n   \"id\": \"sdjhf3ui\",\n   \"name\": \"Matt\",\n   \"user_email\": \"example@example.com\"\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `400` **Bad request**<br>\n\n**Error Code:** `200`<br>\nNo permission.<br>\nOnly available for paid account: {accountId}.<br><br>\n**Error Code:**  `300`<br>\nThe next page token is invalid or expired.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/participants?page_size=30&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's ID. To get this value, use the [**List webinars**](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinars) API."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`\n**Error Code:**`3001`<br>\nWebinar does not exist.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/participants?page_size=30&next_page_token=culpa velit reprehenderit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"participants"
											],
											"query": [
												{
													"key": "page_size",
													"value": "30"
												},
												{
													"key": "next_page_token",
													"value": "culpa velit reprehenderit"
												}
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's ID. To get this value, use the [**List webinars**](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinars) API."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List past webinar instances",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/past_webinars/:webinarId/instances",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_webinars",
										":webinarId",
										"instances"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "-14804147",
											"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
										}
									]
								},
								"description": "List past webinar instances.<br><br>\n**Scopes:** `webinar:read:admin` `webinar:read`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200`<br>\nList of past webinar instances returned.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"instances"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"webinars\": [\n  {\n   \"uuid\": \"ut44544gisi\",\n   \"start_time\": \"2019-06-07T03:42:34.548Z\"\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `300`<br>\nInvalid webinar ID.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"instances"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Multiple Choices",
									"code": 300,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404`<br>\nWebinar not found.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"instances"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "-14804147",
													"description": "(Required) The webinar ID in \"**long**\" format(represented as int64 data type in JSON). "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List past webinar poll results",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/past_webinars/:webinarId/polls",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_webinars",
										":webinarId",
										"polls"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
										}
									]
								},
								"description": "The polling feature for webinar allows you to create single choice or multiple choice polling questions for your webinars. Use this API to retrieve the results for Webinar Polls of a specific Webinar.\n\n**Prerequisites:**<br>\n* [Webinar license](https://zoom.us/webinar)<br>\n**Scopes**: `webinar:read:admin`, `webinar:read`<br>\n**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nPolls returned successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"polls"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": 123456,\n \"uuid\": \"gsdjfhsdfkhjdsf\",\n \"start_time\": \"2019-02-01T12:34:12.660Z\",\n \"title\": \"Learn something new\",\n \"questions\": [\n  {\n   \"name\": \"Sam S\",\n   \"email\": \"example@example.com\",\n   \"question_details\": [\n    {\n     \"question\": \"How are you?\",\n     \"answer\": \"I am wonderful.\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `401` **Unauthorized**<br>\n**Error Code:** `1010`<br>  User does not belong to this account:{accountId}.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"polls"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not found**<br>\nWebinar not found.<br>\n\n**Error Code:** `3001`<br>\nWebinar ID is invalid or not end.<br>\nThis webinar id does not belong to you:{webinarId}.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/polls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"polls"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List Q&A of past webinar",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/past_webinars/:webinarId/qa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_webinars",
										":webinarId",
										"qa"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
										}
									]
								},
								"description": "The [Question & Answer (Q&A)](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) feature for Webinars allows attendees to ask questions during the Webinar and for the panelists, co-hosts and host to answer their questions.<br>\nUse this API to list Q&A of a specific Webinar.\n\n**Prerequisites:**<br>\n* [Webinar license](https://zoom.us/webinar)<br>\n**Scopes**: `webinar:read:admin`, `webinar:read`<br>\n <br>\n\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nQ&A returned successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/qa",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"qa"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": 123456,\n \"uuid\": \"gsdjfhsdfkhjdsf\",\n \"start_time\": \"2019-02-01T12:34:12.660Z\",\n \"title\": \"Learn something new\",\n \"questions\": [\n  {\n   \"name\": \"Sam S\",\n   \"email\": \"example@example.com\",\n   \"question_details\": [\n    {\n     \"question\": \"How are you?\",\n     \"answer\": \"I am wonderful.\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `401` **Unauthorized**<br>\n**Error Code:** `1010`<br>  User does not belong to this account:{accountId}.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/qa",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"qa"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not found**<br>\nWebinar not found.<br>\n\n**Error Code:** `3001`<br>\nWebinar ID is invalid or not end.<br>\nThis webinar id does not belong to you:{webinarId}.\n",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/qa",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"qa"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) The webinar's ID or universally unique ID (UUID). \n* If you provide a webinar ID, the API will return a response for the latest webinar instance. \n* If you provide a webinar UUID that begins with a `/` character or contains the `//` charcters, you **must** double-encode the webinar UUID before making an API request."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List past webinar files",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/past_webinars/:webinarId/files",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_webinars",
										":webinarId",
										"files"
									],
									"variable": [
										{
											"key": "webinarId",
											"value": "culpa velit reprehenderit",
											"description": "(Required) "
										}
									]
								},
								"description": "**Note: This API has been deprecated and is no longer supported due to GCM encryption updates for security purposes.**\n\nList files sent via in-meeting chat during a meeting. The in-meeting files are deleted after 24 hours of the meeting completion time. \n<br><br>\n**Scope:** `webinar:read`, `webinar:read:admin`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>\n\n"
							},
							"response": [
								{
									"name": "**HTTP Status Code:** `200` **OK**<br>\nFiles retrieved successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"files"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"total_records\": 1,\n \"in_meeting_files\": [\n  {\n   \"file_name\": \"somefile.txt\",\n   \"download_url\": \"somefile.txt/randomurl\",\n   \"file_size\": 300\n  }\n ]\n}"
								},
								{
									"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account: {accountId}.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"files"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "**HTTP Status Code:** `404` **Not Found**<br>\n**Error Code:** `3001`<br>\nWebinar ID is invalid or not end.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/past_webinars/:webinarId/files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"past_webinars",
												":webinarId",
												"files"
											],
											"variable": [
												{
													"key": "webinarId",
													"value": "culpa velit reprehenderit",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Get webinar absentees",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/past_webinars/:WebinarUUID/absentees?occurrence_id=culpa velit reprehenderit&page_size=30&next_page_token=culpa velit reprehenderit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"past_webinars",
								":WebinarUUID",
								"absentees"
							],
							"query": [
								{
									"key": "occurrence_id",
									"value": "culpa velit reprehenderit",
									"description": "The meeting occurrence ID."
								},
								{
									"key": "page_size",
									"value": "30",
									"description": "The number of records returned within a single API call."
								},
								{
									"key": "next_page_token",
									"value": "culpa velit reprehenderit",
									"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
								}
							],
							"variable": [
								{
									"key": "WebinarUUID",
									"value": "culpa velit reprehenderit",
									"description": "(Required) The Webinar UUID. Each Webinar instance will generate its own Webinar UUID (i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it."
								}
							]
						},
						"description": "List absentees of a webinar.<br><br>\n**Scopes:** `webinar:read:admin` `webinar:read`<br>\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`"
					},
					"response": [
						{
							"name": "**HTTP Status Code:** `200`<br>\nSuccess.<br>**Error Code:** `200`<br>\nWebinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/past_webinars/:WebinarUUID/absentees?occurrence_id=culpa velit reprehenderit&page_size=30&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_webinars",
										":WebinarUUID",
										"absentees"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit"
										}
									],
									"variable": [
										{
											"key": "WebinarUUID",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The Webinar UUID. Each Webinar instance will generate its own Webinar UUID (i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"page_count\": 1,\n \"page_number\": 1,\n \"page_size\": 30,\n \"total_records\": 1,\n \"registrants\": [\n  {\n   \"id\": \"24000002122\",\n   \"email\": \"example@example.com\",\n   \"first_name\": \"Jill\",\n   \"last_name\": \"Chill\",\n   \"address\": \"1800 Amphibious Blvd.\",\n   \"city\": \"Mountain View\",\n   \"country\": \"US\",\n   \"zip\": \"94045\",\n   \"state\": \"CA\",\n   \"phone\": \"5550100\",\n   \"industry\": \"Food\",\n   \"org\": \"Cooking Org\",\n   \"job_title\": \"Chef\",\n   \"purchasing_time_frame\": \"1-3 months\",\n   \"role_in_purchase_process\": \"Influencer\",\n   \"no_of_employees\": \"10\",\n   \"comments\": \"Looking forward to the Webinar\",\n   \"custom_questions\": [\n    {\n     \"title\": \"What do you hope to learn from this Webinar?\",\n     \"value\": \"Look forward to learning how you come up with new recipes and what other services you offer.\"\n    }\n   ],\n   \"status\": \"approved\",\n   \"create_time\": \"2019-02-26T23:01:16.899Z\",\n   \"join_url\": \"https://zoom.us/webinar/mywebinarissocooldighdghodghodg\"\n  }\n ]\n}"
						},
						{
							"name": "**Error Code:** `300`<br>Invalid webinar UUID.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/past_webinars/:WebinarUUID/absentees?occurrence_id=culpa velit reprehenderit&page_size=30&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_webinars",
										":WebinarUUID",
										"absentees"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit"
										}
									],
									"variable": [
										{
											"key": "WebinarUUID",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The Webinar UUID. Each Webinar instance will generate its own Webinar UUID (i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it."
										}
									]
								}
							},
							"status": "Multiple Choices",
							"code": 300,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `300`<br>\nThe request could not be completed because you have provided an invalid occurence ID: {occurenceId}<br>\n**Error Code:** `1010`<br>\nUser does not belong to this account:{accountId}.<br>\n**Error Code",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/past_webinars/:WebinarUUID/absentees?occurrence_id=culpa velit reprehenderit&page_size=30&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_webinars",
										":WebinarUUID",
										"absentees"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit"
										}
									],
									"variable": [
										{
											"key": "WebinarUUID",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The Webinar UUID. Each Webinar instance will generate its own Webinar UUID (i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `1001`<br>\nUser {userId} does not exist or does not belong to this account.<br>\n**Error Code:** `3001`<br>Meeting ID is invalid or not end.\n\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/past_webinars/:WebinarUUID/absentees?occurrence_id=culpa velit reprehenderit&page_size=30&next_page_token=culpa velit reprehenderit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"past_webinars",
										":WebinarUUID",
										"absentees"
									],
									"query": [
										{
											"key": "occurrence_id",
											"value": "culpa velit reprehenderit"
										},
										{
											"key": "page_size",
											"value": "30"
										},
										{
											"key": "next_page_token",
											"value": "culpa velit reprehenderit"
										}
									],
									"variable": [
										{
											"key": "WebinarUUID",
											"value": "culpa velit reprehenderit",
											"description": "(Required) The Webinar UUID. Each Webinar instance will generate its own Webinar UUID (i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "Search company contacts",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/contacts?search_key=culpa velit reprehenderit&query_presence_status=culpa velit reprehenderit&page_size=1&contact_types=1&next_page_token=culpa velit reprehenderit",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"contacts"
					],
					"query": [
						{
							"key": "search_key",
							"value": "culpa velit reprehenderit",
							"description": "(Required) Provide the keyword - either first name, last name or email of the contact whom you have to search for."
						},
						{
							"key": "query_presence_status",
							"value": "culpa velit reprehenderit",
							"description": "Set `query_presence_status` to `true` in order to include the presence status of a contact in the response."
						},
						{
							"key": "page_size",
							"value": "1",
							"description": "The number of records to be returned with a single API call."
						},
						{
							"key": "contact_types",
							"value": "1",
							"description": "A comma-separated list of the type of user contact to query: \n* `1` — A Zoom user. \n* `2` — An auto receptionist. \n* `3` — A common area phone. \n* `4` — A call queue. \n * `5` — A shared line group. \n* `6` — A shared global directory. \n* `7` — A shared office contact. \n\n**Note:** \n* You must have a [phone management role with the \"**View**\" permission](https://support.zoom.us/hc/en-us/articles/360042099012-Using-Zoom-Phone-role-management) to query the `2`, `3`, `4`, `5`, and `7` values. \n* You must provide a valid `search_key` value to query this parameter."
						},
						{
							"key": "next_page_token",
							"value": "culpa velit reprehenderit",
							"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
						}
					]
				},
				"description": "A user under an organization's Zoom account has internal users listed under Company Contacts in the Zoom Client. Use this API to search users that are in the company contacts of a Zoom account. Using the `search_key` query parameter, provide either first name, last name or the email address of the user that you would like to search for. Optionally, set `query_presence_status` to `true` in order to include the presence status of a contact. <br><br>\n\n**Scopes:** `contact:read:admin`, `contact:read`<br>\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` "
			},
			"response": [
				{
					"name": "**HTTP Status Code:** `200`<br>\nContact returned successfully.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: oauth2",
								"key": "Authorization",
								"value": "<token>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contacts?search_key=culpa velit reprehenderit&query_presence_status=culpa velit reprehenderit&page_size=1&contact_types=1&next_page_token=culpa velit reprehenderit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contacts"
							],
							"query": [
								{
									"key": "search_key",
									"value": "culpa velit reprehenderit"
								},
								{
									"key": "query_presence_status",
									"value": "culpa velit reprehenderit"
								},
								{
									"key": "page_size",
									"value": "1"
								},
								{
									"key": "contact_types",
									"value": "1"
								},
								{
									"key": "next_page_token",
									"value": "culpa velit reprehenderit"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"page_size\": 1,\n \"next_page_token\": \" \",\n \"contacts\": [\n  {\n   \"id\": \"isds324bdfsf\",\n   \"email\": \"example@example.com\",\n   \"first_name\": \"John\",\n   \"last_name\": \"Doe\",\n   \"presence_status\": \"Offline\",\n   \"phone_number\": \"15550100\",\n   \"phone_numbers\": [\n    {\n     \"country\": \"US\",\n     \"code\": \"+1\",\n     \"number\": \"15550102\",\n     \"verified\": true,\n     \"label\": \"Mobile\"\n    }\n   ],\n   \"sip_phone_number\": \"11111111\",\n   \"direct_numbers\": [\n    111111,\n    222222\n   ],\n   \"extension_number\": \"010\",\n   \"im_group_id\": \"fhksdhfew34hjds\",\n   \"im_group_name\": \"Engineering\",\n   \"dept\": \"Engineering\",\n   \"job_title\": \"Engineer\",\n   \"location\": \"New York\",\n   \"sip_uri\": \"800@aaa.example.com\",\n   \"contact_type\": 1\n  }\n ]\n}"
				}
			]
		},
		{
			"name": "List SIP trunk numbers",
			"request": {
				"auth": {
					"type": "oauth2"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/sip_trunk/numbers",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"sip_trunk",
						"numbers"
					]
				},
				"description": "With SIP-connected audio, Zoom establishes a SIP trunk (a network connection specifically designed to make and deliver phone calls) over a direct and private connection between the customer’s network and the Zoom cloud. Meeting participants that dial into a meeting or have the meeting call them, and are On-Net from the perspective of the customers' IP telephony network, will be connected over this trunk rather than over the PSTN. <br><br>Use this API to list all the numbers that are configured for SIP Connected Audio in a Zoom Account.\n\n**Prerequisites:**<br>\n* Pro or a higher account with SIP Connected Audio plan enabled.\n* The account must be a master account<br>\n**Scopes:** `sip_trunk:master`\n \n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`"
			},
			"response": [
				{
					"name": "* **HTTP Status Code:** `200` **OK**<br>\nList of numbers returned.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: oauth2",
								"key": "Authorization",
								"value": "<token>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/sip_trunk/numbers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sip_trunk",
								"numbers"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"total_records\": 1,\n \"phone_numbers\": [\n  {\n   \"number\": \"45345545\",\n   \"country\": \"US\"\n  }\n ]\n}"
				},
				{
					"name": "**HTTP Status Code:** `404` **Not Found**<br><br>\n**Error Code:** `2001`<br>\nThis account does not exist or does not belong to this master account.\nThis account does not exist or does not belong to you.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: oauth2",
								"key": "Authorization",
								"value": "<token>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/sip_trunk/numbers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sip_trunk",
								"numbers"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Use in-meeting cloud recording controls",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "multipart/form-data"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "method",
							"value": "dolore proident esse culpa",
							"description": "The in-meeting recording method to control: \n* `recording.start` — Start the recording. \n* `recording.stop` — Stop the recording. \n* `recording.pause` — Pause the recording. \n* `recording.resume` — Resume a paused recording. \n* `participant.invite` — Invite a participant to the meeting.",
							"type": "text"
						},
						{
							"key": "params",
							"value": "{\"contacts\":[{\"id\":\"do dolor\",\"email\":\"exercitation Excepteur officia cupidatat\"},{\"id\":\"Excepteur eu reprehenderit labore\",\"email\":\"consectetur culpa Lorem Ut\"}]}",
							"description": "The in-meeting parameters.",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/live_meetings/:meetingId/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"live_meetings",
						":meetingId",
						"events"
					],
					"variable": [
						{
							"key": "meetingId",
							"value": "culpa velit reprehenderit",
							"description": "(Required) The live meeting's ID."
						}
					]
				},
				"description": "Use this API to control [in-meeting](https://support.zoom.us/hc/en-us/articles/360021921032-In-Meeting-Controls) cloud recording features. In-meeting controls include starting and stopping a recording, pausing and resuming a recording, and inviting participants. \n\n**Note:** This API only works for cloud recordings. It does **not** work for local recordings. \n\n**Scopes:** `meeting:write`, `meeting:write:admin`, `meeting:master` \n\n**Prerequisites:**\n* The meeting **must** be a live meeting. \n* [Cloud recording](https://support.zoom.us/hc/en-us/articles/360060231472-Enabling-cloud-recording) must be enabled on the account. \n* The user calling this API must be the host or an alternative meeting host.\n\n **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`"
			},
			"response": [
				{
					"name": "**HTTP Status:** `202` **Accepted**\nRequest processed successfully.",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"description": "Added as a part of security scheme: oauth2",
								"key": "Authorization",
								"value": "<token>"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "method",
									"value": "anim ullamco ",
									"description": "The in-meeting recording method to control: \n* `recording.start` — Start the recording. \n* `recording.stop` — Stop the recording. \n* `recording.pause` — Pause the recording. \n* `recording.resume` — Resume a paused recording. \n* `participant.invite` — Invite a participant to the meeting.",
									"type": "text"
								},
								{
									"key": "params",
									"value": "{\"contacts\":[{\"id\":\"est velit tempor cupidatat Ut\",\"email\":\"eu reprehenderit sed\"},{\"id\":\"dolor anim cupid\",\"email\":\"consequat\"}]}",
									"description": "The in-meeting parameters.",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/live_meetings/:meetingId/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"live_meetings",
								":meetingId",
								"events"
							],
							"variable": [
								{
									"key": "meetingId",
									"value": "culpa velit reprehenderit",
									"description": "(Required) The live meeting's ID."
								}
							]
						}
					},
					"status": "Accepted",
					"code": 202,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{}"
				},
				{
					"name": "**HTTP Status:** `400` **Bad Request** <br><br>\n**Error Code:** `300`<br>\n* Meeting id does not exist.<br>\n* Invalid meeting id.<br>\n* Meeting does not exist.<br>\n* No permission.\n",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"description": "Added as a part of security scheme: oauth2",
								"key": "Authorization",
								"value": "<token>"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "method",
									"value": "anim ullamco ",
									"description": "The in-meeting recording method to control: \n* `recording.start` — Start the recording. \n* `recording.stop` — Stop the recording. \n* `recording.pause` — Pause the recording. \n* `recording.resume` — Resume a paused recording. \n* `participant.invite` — Invite a participant to the meeting.",
									"type": "text"
								},
								{
									"key": "params",
									"value": "{\"contacts\":[{\"id\":\"est velit tempor cupidatat Ut\",\"email\":\"eu reprehenderit sed\"},{\"id\":\"dolor anim cupid\",\"email\":\"consequat\"}]}",
									"description": "The in-meeting parameters.",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/live_meetings/:meetingId/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"live_meetings",
								":meetingId",
								"events"
							],
							"variable": [
								{
									"key": "meetingId",
									"value": "culpa velit reprehenderit",
									"description": "(Required) The live meeting's ID."
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "**HTTP Status Code:** `404`<br>\n**Error Code:** `3001` <br> Meeting {meetingId} is not found or has expired.",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"description": "Added as a part of security scheme: oauth2",
								"key": "Authorization",
								"value": "<token>"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "method",
									"value": "anim ullamco ",
									"description": "The in-meeting recording method to control: \n* `recording.start` — Start the recording. \n* `recording.stop` — Stop the recording. \n* `recording.pause` — Pause the recording. \n* `recording.resume` — Resume a paused recording. \n* `participant.invite` — Invite a participant to the meeting.",
									"type": "text"
								},
								{
									"key": "params",
									"value": "{\"contacts\":[{\"id\":\"est velit tempor cupidatat Ut\",\"email\":\"eu reprehenderit sed\"},{\"id\":\"dolor anim cupid\",\"email\":\"consequat\"}]}",
									"description": "The in-meeting parameters.",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/live_meetings/:meetingId/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"live_meetings",
								":meetingId",
								"events"
							],
							"variable": [
								{
									"key": "meetingId",
									"value": "culpa velit reprehenderit",
									"description": "(Required) The live meeting's ID."
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Download an invoice file",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/download/billing/invoices/:invoiceId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"download",
						"billing",
						"invoices",
						":invoiceId"
					],
					"variable": [
						{
							"key": "invoiceId",
							"value": "culpa velit reprehenderit",
							"description": "(Required) "
						}
					]
				},
				"description": "Use this API to download a Zoom account’s [billed](https://support.zoom.us/hc/en-us/articles/201363263-About-Billing) invoice file, in PDF format. To get an account’s invoice ID, use the **[List billing invoices](https://marketplace.zoom.us/docs/api-reference/zoom-api/billing/accountbillinginvoices)** API.\n\n**Scopes:** `billing:master`<br>**Rate Limits:**\n* You can make **one** request to this API every **30 minutes** until the daily limit is reached.\n* This API has a daily limit of **100 requests per account**."
			},
			"response": [
				{
					"name": "**HTTP Status Code:** `200`<br>\nAccount billing invoice PDF returned.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: oauth2",
								"key": "Authorization",
								"value": "<token>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/download/billing/invoices/:invoiceId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"download",
								"billing",
								"invoices",
								":invoiceId"
							],
							"variable": [
								{
									"key": "invoiceId",
									"value": "culpa velit reprehenderit",
									"description": "(Required) "
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{}"
				},
				{
					"name": "**HTTP Status Code:** `400`<br>\n**Error Code:** `2001`<br>\nAccount does not exist: {subAccountId}.<br>",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: oauth2",
								"key": "Authorization",
								"value": "<token>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/download/billing/invoices/:invoiceId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"download",
								"billing",
								"invoices",
								":invoiceId"
							],
							"variable": [
								{
									"key": "invoiceId",
									"value": "culpa velit reprehenderit",
									"description": "(Required) "
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "List archived files",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/archive_files?page_size=30&next_page_token=culpa velit reprehenderit&from=culpa velit reprehenderit&to=culpa velit reprehenderit&query_date_type=meeting_start_time",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"archive_files"
					],
					"query": [
						{
							"key": "page_size",
							"value": "30",
							"description": "The number of records returned within a single API call."
						},
						{
							"key": "next_page_token",
							"value": "culpa velit reprehenderit",
							"description": "The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
						},
						{
							"key": "from",
							"value": "culpa velit reprehenderit",
							"description": "Start date for the query in \"yyyy-MM-dd'T'HH:mm:ss'Z'\" format. The duration for the query defined using the \"from\" and \"to\" parameters should not exceed 7 days as this API only provides a week's data at once."
						},
						{
							"key": "to",
							"value": "culpa velit reprehenderit",
							"description": "End date for the query in \"yyyy-MM-dd'T'HH:mm:ss'Z'\" format. "
						},
						{
							"key": "query_date_type",
							"value": "meeting_start_time",
							"description": "The query date type for the `from` and `to` parameters."
						}
					]
				},
				"description": "Use this API to retrieve archived meeting or webinar files of an account. \n\n Zoom’s [archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) allows account administrators to set up an automated mechanism to record, collect, and archive meeting data to a 3rd-party platform of their choice to satisfy FINRA and/or other compliance requirements. \n\n**Scopes:** `recording:read:admin` <br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` \n\n**Prerequisites:** \n* Follow the [enablement process](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data#h_01ENPBD3WR68D7FAKTBY92SG45) to access the archiving feature."
			},
			"response": [
				{
					"name": "**HTTP Status Code:** `200` **OK**\nArchived files returned.\n",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: oauth2",
								"key": "Authorization",
								"value": "<token>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/archive_files?page_size=30&next_page_token=culpa velit reprehenderit&from=culpa velit reprehenderit&to=culpa velit reprehenderit&query_date_type=meeting_start_time",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"archive_files"
							],
							"query": [
								{
									"key": "page_size",
									"value": "30"
								},
								{
									"key": "next_page_token",
									"value": "culpa velit reprehenderit"
								},
								{
									"key": "from",
									"value": "culpa velit reprehenderit"
								},
								{
									"key": "to",
									"value": "culpa velit reprehenderit"
								},
								{
									"key": "query_date_type",
									"value": "meeting_start_time"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"from\": \"2021-03-11T05:41:36Z\",\n \"to\": \"2021-03-18T05:41:36Z\",\n \"page_size\": 30,\n \"next_page_token\": \"\",\n \"meetings\": [\n  {\n   \"uuid\": \"yO3dfhh3t467UkQ==\",\n   \"id\": 553068284,\n   \"host_id\": \"Dhjdfgdkg8w\",\n   \"topic\": \"Zoom Meeting\",\n   \"type\": 1,\n   \"start_time\": \"2021-03-12T01:57:27Z\",\n   \"timezone\": \"\",\n   \"duration\": 3,\n   \"total_size\": 364463,\n   \"recording_count\": 2,\n   \"meeting_type\": \"internal\",\n   \"account_name\": \"account_01\",\n   \"complete_time\": \"2021-03-12T02:57:27Z\",\n   \"archive_files\": [\n    {\n     \"id\": \"55hfgsd-sd8e2bd7255\",\n     \"file_type\": \"M4A\",\n     \"file_extension\": \"M4A\",\n     \"file_size\": 165743,\n     \"download_url\": \"https://example.com/recording/download/Qg75t7xZBtEbAkjdlgbfdngBBBB\",\n     \"status\": \"completed\",\n     \"recording_type\": \"audio_only\",\n     \"individual\": true,\n     \"participant_email\": \"user@example.com\",\n     \"participant_join_time\": \"2021-03-12T02:07:27Z\",\n     \"participant_leave_time\": \"2021-03-12T02:12:27Z\"\n    },\n    {\n     \"id\": \"9c5daa5b-34a1-40e8-8947-a11be5e373a7\",\n     \"file_type\": \"MP4\",\n     \"file_extension\": \"MP4\",\n     \"file_size\": 198720,\n     \"download_url\": \"https://example.com/recording/download/Qg75t7xZBtEbAkjdlgbfdngCCCC\",\n     \"status\": \"completed\",\n     \"recording_type\": \"shared_screen_with_speaker_view\",\n     \"individual\": true,\n     \"participant_email\": \"user1@example.com\",\n     \"participant_join_time\": \"2021-03-12T02:07:27Z\",\n     \"participant_leave_time\": \"2021-03-12T02:12:27Z\"\n    }\n   ]\n  }\n ]\n}"
				},
				{
					"name": "**HTTP Status Code:** `400` **Bad request**<br>\n**Error Code:** `2001`<br>\nAccount does not exist: {accountId}.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: oauth2",
								"key": "Authorization",
								"value": "<token>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/archive_files?page_size=30&next_page_token=culpa velit reprehenderit&from=culpa velit reprehenderit&to=culpa velit reprehenderit&query_date_type=meeting_start_time",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"archive_files"
							],
							"query": [
								{
									"key": "page_size",
									"value": "30"
								},
								{
									"key": "next_page_token",
									"value": "culpa velit reprehenderit"
								},
								{
									"key": "from",
									"value": "culpa velit reprehenderit"
								},
								{
									"key": "to",
									"value": "culpa velit reprehenderit"
								},
								{
									"key": "query_date_type",
									"value": "meeting_start_time"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Oath Token Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.collectionVariables.set(\"Auth_Token\", jsonData.access_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{client_secret}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{client_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://zoom.us/oauth/token?grant_type=account_credentials&account_id={{account_id}}",
					"protocol": "https",
					"host": [
						"zoom",
						"us"
					],
					"path": [
						"oauth",
						"token"
					],
					"query": [
						{
							"key": "grant_type",
							"value": "account_credentials"
						},
						{
							"key": "account_id",
							"value": "{{account_id}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{Auth_Token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var CryptoJS = require(\"crypto-js\")",
					"var current_date = new Date().getTime();",
					"",
					"var current_token = pm.collectionVariables.get(\"Auth_Token\");",
					"var current_timestamp = pm.collectionVariables.get(\"token_timestamp\");",
					"",
					"console.log(\"Current Date: \" + current_date);",
					"console.log(\"Current Token Timestamp: \" + current_timestamp);",
					"console.log(\"Time Left: \" + (current_timestamp - current_date));",
					"if((current_timestamp < current_date) || !current_timestamp || !current_token){",
					"    var client_id = pm.collectionVariables.get(\"client_id\");",
					"    var client_secret = pm.collectionVariables.get(\"client_secret\");",
					"    var auth_url = pm.collectionVariables.get(\"token_url\") + \"?grant_type=account_credentials&account_id=\" + pm.collectionVariables.get(\"account_id\")",
					"    var basic_auth = client_id + ':' + client_secret",
					"",
					"    var rawStr = CryptoJS.enc.Utf8.parse(basic_auth)",
					"    var base64_auth = CryptoJS.enc.Base64.stringify(rawStr)",
					"    console.log(`Encoded  value: ${base64_auth}`)",
					"  ",
					"    pm.sendRequest({",
					"    url:  auth_url,",
					"    method: 'POST',",
					"    header: {",
					"        ",
					"        'Authorization': ('Basic '+ base64_auth),",
					"    }",
					"    ",
					"},function (err, res) {",
					"    pm.collectionVariables.set(\"Auth_Token\", res.json().access_token);",
					"    var token_expires = res.json().expires_in",
					"    var new_timestamp = token_expires * 1000 + current_date;",
					"    pm.collectionVariables.set(\"token_timestamp\", new_timestamp)",
					"    console.log(\"New Token Timestamp: \" + new_timestamp);",
					"    console.log(\"Access Token: \" + res.json().access_token)",
					"});",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://ap.zoom.us/v2"
		},
		{
			"key": "Auth_Token",
			"value": "",
			"type": "string"
		},
		{
			"key": "token_url",
			"value": "https://zoom.us/oauth/token",
			"type": "string"
		},
		{
			"key": "account_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "client_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "client_secret",
			"value": "",
			"type": "string"
		},
		{
			"key": "token_timestamp",
			"value": "",
			"type": "string"
		}
	]
}